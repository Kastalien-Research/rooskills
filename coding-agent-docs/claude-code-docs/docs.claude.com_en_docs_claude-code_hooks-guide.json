{
  "markdown": "[Claude Docs home page![light logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/light.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=c877c45432515ee69194cb19e9f983a2)![dark logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/dark.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=f5bb877be0cb3cba86cf6d7c88185216)](https://docs.claude.com/)\n\n![US](https://d3gk2c5xim1je2.cloudfront.net/flags/US.svg)\n\nEnglish\n\nSearch...\n\nCtrl K\n\n- [Console](https://console.anthropic.com/login)\n- [Support](https://support.claude.com/)\n- [Discord](https://www.anthropic.com/discord)\n- [Sign up](https://console.anthropic.com/login)\n- [Sign up](https://console.anthropic.com/login)\n\nSearch...\n\nNavigation\n\nBuild with Claude Code\n\nGet started with Claude Code hooks\n\n[Welcome](https://docs.claude.com/en/home) [Claude Developer Platform](https://docs.claude.com/en/docs/intro) [Claude Code](https://docs.claude.com/en/docs/claude-code/overview) [Model Context Protocol (MCP)](https://docs.claude.com/en/docs/mcp) [API Reference](https://docs.claude.com/en/api/messages) [Resources](https://docs.claude.com/en/resources/overview) [Release Notes](https://docs.claude.com/en/release-notes/overview)\n\n##### Getting started\n\n- [Overview](https://docs.claude.com/en/docs/claude-code/overview)\n- [Quickstart](https://docs.claude.com/en/docs/claude-code/quickstart)\n- [Common workflows](https://docs.claude.com/en/docs/claude-code/common-workflows)\n- [Claude Code on the web](https://docs.claude.com/en/docs/claude-code/claude-code-on-the-web)\n\n##### Build with Claude Code\n\n- [Subagents](https://docs.claude.com/en/docs/claude-code/sub-agents)\n- [Plugins](https://docs.claude.com/en/docs/claude-code/plugins)\n- [Agent Skills](https://docs.claude.com/en/docs/claude-code/skills)\n- [Output styles](https://docs.claude.com/en/docs/claude-code/output-styles)\n- [Hooks](https://docs.claude.com/en/docs/claude-code/hooks-guide)\n- [Headless mode](https://docs.claude.com/en/docs/claude-code/headless)\n- [GitHub Actions](https://docs.claude.com/en/docs/claude-code/github-actions)\n- [GitLab CI/CD](https://docs.claude.com/en/docs/claude-code/gitlab-ci-cd)\n- [Model Context Protocol (MCP)](https://docs.claude.com/en/docs/claude-code/mcp)\n- [Troubleshooting](https://docs.claude.com/en/docs/claude-code/troubleshooting)\n\n##### Claude Agent SDK\n\n- [Migrate to Claude Agent SDK](https://docs.claude.com/en/docs/claude-code/sdk/migration-guide)\n\n##### Deployment\n\n- [Overview](https://docs.claude.com/en/docs/claude-code/third-party-integrations)\n- [Amazon Bedrock](https://docs.claude.com/en/docs/claude-code/amazon-bedrock)\n- [Google Vertex AI](https://docs.claude.com/en/docs/claude-code/google-vertex-ai)\n- [Network configuration](https://docs.claude.com/en/docs/claude-code/network-config)\n- [LLM gateway](https://docs.claude.com/en/docs/claude-code/llm-gateway)\n- [Development containers](https://docs.claude.com/en/docs/claude-code/devcontainer)\n- [Sandboxing](https://docs.claude.com/en/docs/claude-code/sandboxing)\n\n##### Administration\n\n- [Advanced installation](https://docs.claude.com/en/docs/claude-code/setup)\n- [Identity and Access Management](https://docs.claude.com/en/docs/claude-code/iam)\n- [Security](https://docs.claude.com/en/docs/claude-code/security)\n- [Data usage](https://docs.claude.com/en/docs/claude-code/data-usage)\n- [Monitoring](https://docs.claude.com/en/docs/claude-code/monitoring-usage)\n- [Costs](https://docs.claude.com/en/docs/claude-code/costs)\n- [Analytics](https://docs.claude.com/en/docs/claude-code/analytics)\n- [Plugin marketplaces](https://docs.claude.com/en/docs/claude-code/plugin-marketplaces)\n\n##### Configuration\n\n- [Settings](https://docs.claude.com/en/docs/claude-code/settings)\n- [Visual Studio Code](https://docs.claude.com/en/docs/claude-code/vs-code)\n- [JetBrains IDEs](https://docs.claude.com/en/docs/claude-code/jetbrains)\n- [Terminal configuration](https://docs.claude.com/en/docs/claude-code/terminal-config)\n- [Model configuration](https://docs.claude.com/en/docs/claude-code/model-config)\n- [Memory management](https://docs.claude.com/en/docs/claude-code/memory)\n- [Status line configuration](https://docs.claude.com/en/docs/claude-code/statusline)\n\n##### Reference\n\n- [CLI reference](https://docs.claude.com/en/docs/claude-code/cli-reference)\n- [Interactive mode](https://docs.claude.com/en/docs/claude-code/interactive-mode)\n- [Slash commands](https://docs.claude.com/en/docs/claude-code/slash-commands)\n- [Checkpointing](https://docs.claude.com/en/docs/claude-code/checkpointing)\n- [Hooks reference](https://docs.claude.com/en/docs/claude-code/hooks)\n- [Plugins reference](https://docs.claude.com/en/docs/claude-code/plugins-reference)\n\n##### Resources\n\n- [Legal and compliance](https://docs.claude.com/en/docs/claude-code/legal-and-compliance)\n\nOn this page\n\n- [Hook Events Overview](https://docs.claude.com/en/docs/claude-code/hooks-guide#hook-events-overview)\n- [Quickstart](https://docs.claude.com/en/docs/claude-code/hooks-guide#quickstart)\n- [Prerequisites](https://docs.claude.com/en/docs/claude-code/hooks-guide#prerequisites)\n- [Step 1: Open hooks configuration](https://docs.claude.com/en/docs/claude-code/hooks-guide#step-1%3A-open-hooks-configuration)\n- [Step 2: Add a matcher](https://docs.claude.com/en/docs/claude-code/hooks-guide#step-2%3A-add-a-matcher)\n- [Step 3: Add the hook](https://docs.claude.com/en/docs/claude-code/hooks-guide#step-3%3A-add-the-hook)\n- [Step 4: Save your configuration](https://docs.claude.com/en/docs/claude-code/hooks-guide#step-4%3A-save-your-configuration)\n- [Step 5: Verify your hook](https://docs.claude.com/en/docs/claude-code/hooks-guide#step-5%3A-verify-your-hook)\n- [Step 6: Test your hook](https://docs.claude.com/en/docs/claude-code/hooks-guide#step-6%3A-test-your-hook)\n- [More Examples](https://docs.claude.com/en/docs/claude-code/hooks-guide#more-examples)\n- [Code Formatting Hook](https://docs.claude.com/en/docs/claude-code/hooks-guide#code-formatting-hook)\n- [Markdown Formatting Hook](https://docs.claude.com/en/docs/claude-code/hooks-guide#markdown-formatting-hook)\n- [Custom Notification Hook](https://docs.claude.com/en/docs/claude-code/hooks-guide#custom-notification-hook)\n- [File Protection Hook](https://docs.claude.com/en/docs/claude-code/hooks-guide#file-protection-hook)\n- [Learn more](https://docs.claude.com/en/docs/claude-code/hooks-guide#learn-more)\n\nBuild with Claude Code\n\n# Get started with Claude Code hooks\n\nCopy page\n\nLearn how to customize and extend Claude Code’s behavior by registering shell commands\n\nCopy page\n\nClaude Code hooks are user-defined shell commands that execute at various points\nin Claude Code’s lifecycle. Hooks provide deterministic control over Claude\nCode’s behavior, ensuring certain actions always happen rather than relying on\nthe LLM to choose to run them.\n\nFor reference documentation on hooks, see [Hooks reference](https://docs.claude.com/en/docs/claude-code/hooks).\n\nExample use cases for hooks include:\n\n- **Notifications**: Customize how you get notified when Claude Code is awaiting\nyour input or permission to run something.\n- **Automatic formatting**: Run `prettier` on .ts files, `gofmt` on .go files,\netc. after every file edit.\n- **Logging**: Track and count all executed commands for compliance or\ndebugging.\n- **Feedback**: Provide automated feedback when Claude Code produces code that\ndoes not follow your codebase conventions.\n- **Custom permissions**: Block modifications to production files or sensitive\ndirectories.\n\nBy encoding these rules as hooks rather than prompting instructions, you turn\nsuggestions into app-level code that executes every time it is expected to run.\n\nYou must consider the security implication of hooks as you add them, because hooks run automatically during the agent loop with your current environment’s credentials.\nFor example, malicious hooks code can exfiltrate your data. Always review your hooks implementation before registering them.For full security best practices, see [Security Considerations](https://docs.claude.com/en/docs/claude-code/hooks#security-considerations) in the hooks reference documentation.\n\n## [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#hook-events-overview)  Hook Events Overview\n\nClaude Code provides several hook events that run at different points in the\nworkflow:\n\n- **PreToolUse**: Runs before tool calls (can block them)\n- **PostToolUse**: Runs after tool calls complete\n- **UserPromptSubmit**: Runs when the user submits a prompt, before Claude processes it\n- **Notification**: Runs when Claude Code sends notifications\n- **Stop**: Runs when Claude Code finishes responding\n- **SubagentStop**: Runs when subagent tasks complete\n- **PreCompact**: Runs before Claude Code is about to run a compact operation\n- **SessionStart**: Runs when Claude Code starts a new session or resumes an existing session\n- **SessionEnd**: Runs when Claude Code session ends\n\nEach event receives different data and can control Claude’s behavior in\ndifferent ways.\n\n## [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#quickstart)  Quickstart\n\nIn this quickstart, you’ll add a hook that logs the shell commands that Claude\nCode runs.\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#prerequisites)  Prerequisites\n\nInstall `jq` for JSON processing in the command line.\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#step-1%3A-open-hooks-configuration)  Step 1: Open hooks configuration\n\nRun the `/hooks` [slash command](https://docs.claude.com/en/docs/claude-code/slash-commands) and select\nthe `PreToolUse` hook event.`PreToolUse` hooks run before tool calls and can block them while providing\nClaude feedback on what to do differently.\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#step-2%3A-add-a-matcher)  Step 2: Add a matcher\n\nSelect `+ Add new matcher…` to run your hook only on Bash tool calls.Type `Bash` for the matcher.\n\nYou can use `*` to match all tools.\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#step-3%3A-add-the-hook)  Step 3: Add the hook\n\nSelect `+ Add new hook…` and enter this command:\n\nCopy\n\n```\njq -r '\"\\(.tool_input.command) - \\(.tool_input.description // \"No description\")\"' >> ~/.claude/bash-command-log.txt\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#step-4%3A-save-your-configuration)  Step 4: Save your configuration\n\nFor storage location, select `User settings` since you’re logging to your home\ndirectory. This hook will then apply to all projects, not just your current\nproject.Then press Esc until you return to the REPL. Your hook is now registered!\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#step-5%3A-verify-your-hook)  Step 5: Verify your hook\n\nRun `/hooks` again or check `~/.claude/settings.json` to see your configuration:\n\nCopy\n\n```\n{\n  \"hooks\": {\n    \"PreToolUse\": [\\\n      {\\\n        \"matcher\": \"Bash\",\\\n        \"hooks\": [\\\n          {\\\n            \"type\": \"command\",\\\n            \"command\": \"jq -r '\\\"\\\\(.tool_input.command) - \\\\(.tool_input.description // \\\"No description\\\")\\\"' >> ~/.claude/bash-command-log.txt\"\\\n          }\\\n        ]\\\n      }\\\n    ]\n  }\n}\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#step-6%3A-test-your-hook)  Step 6: Test your hook\n\nAsk Claude to run a simple command like `ls` and check your log file:\n\nCopy\n\n```\ncat ~/.claude/bash-command-log.txt\n\n```\n\nYou should see entries like:\n\nCopy\n\n```\nls - Lists files and directories\n\n```\n\n## [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#more-examples)  More Examples\n\nFor a complete example implementation, see the [bash command validator example](https://github.com/anthropics/claude-code/blob/main/examples/hooks/bash_command_validator_example.py) in our public codebase.\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#code-formatting-hook)  Code Formatting Hook\n\nAutomatically format TypeScript files after editing:\n\nCopy\n\n```\n{\n  \"hooks\": {\n    \"PostToolUse\": [\\\n      {\\\n        \"matcher\": \"Edit|Write\",\\\n        \"hooks\": [\\\n          {\\\n            \"type\": \"command\",\\\n            \"command\": \"jq -r '.tool_input.file_path' | { read file_path; if echo \\\"$file_path\\\" | grep -q '\\\\.ts$'; then npx prettier --write \\\"$file_path\\\"; fi; }\"\\\n          }\\\n        ]\\\n      }\\\n    ]\n  }\n}\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#markdown-formatting-hook)  Markdown Formatting Hook\n\nAutomatically fix missing language tags and formatting issues in markdown files:\n\nCopy\n\n```\n{\n  \"hooks\": {\n    \"PostToolUse\": [\\\n      {\\\n        \"matcher\": \"Edit|Write\",\\\n        \"hooks\": [\\\n          {\\\n            \"type\": \"command\",\\\n            \"command\": \"\\\"$CLAUDE_PROJECT_DIR\\\"/.claude/hooks/markdown_formatter.py\"\\\n          }\\\n        ]\\\n      }\\\n    ]\n  }\n}\n\n```\n\nCreate `.claude/hooks/markdown_formatter.py` with this content:\n\nCopy\n\n````\n#!/usr/bin/env python3\n\"\"\"\nMarkdown formatter for Claude Code output.\nFixes missing language tags and spacing issues while preserving code content.\n\"\"\"\nimport json\nimport sys\nimport re\nimport os\n\ndef detect_language(code):\n    \"\"\"Best-effort language detection from code content.\"\"\"\n    s = code.strip()\n\n    # JSON detection\n    if re.search(r'^\\s*[{\\[]', s):\\\n        try:\\\n            json.loads(s)\\\n            return 'json'\\\n        except:\\\n            pass\\\n\\\n    # Python detection\\\n    if re.search(r'^\\s*def\\s+\\w+\\s*\\(', s, re.M) or \\\\\n       re.search(r'^\\s*(import|from)\\s+\\w+', s, re.M):\\\n        return 'python'\\\n\\\n    # JavaScript detection\\\n    if re.search(r'\\b(function\\s+\\w+\\s*\\(|const\\s+\\w+\\s*=)', s) or \\\\\n       re.search(r'=>|console\\.(log|error)', s):\\\n        return 'javascript'\\\n\\\n    # Bash detection\\\n    if re.search(r'^#!.*\\b(bash|sh)\\b', s, re.M) or \\\\\n       re.search(r'\\b(if|then|fi|for|in|do|done)\\b', s):\\\n        return 'bash'\\\n\\\n    # SQL detection\\\n    if re.search(r'\\b(SELECT|INSERT|UPDATE|DELETE|CREATE)\\s+', s, re.I):\\\n        return 'sql'\\\n\\\n    return 'text'\\\n\\\ndef format_markdown(content):\\\n    \"\"\"Format markdown content with language detection.\"\"\"\\\n    # Fix unlabeled code fences\\\n    def add_lang_to_fence(match):\\\n        indent, info, body, closing = match.groups()\\\n        if not info.strip():\\\n            lang = detect_language(body)\\\n            return f\"{indent}```{lang}\\n{body}{closing}\\n\"\\\n        return match.group(0)\\\n\\\n    fence_pattern = r'(?ms)^([ \\t]{0,3})```([^\\n]*)\\n(.*?)(\\n\\1```)\\s*$'\\\n    content = re.sub(fence_pattern, add_lang_to_fence, content)\\\n\\\n    # Fix excessive blank lines (only outside code fences)\\\n    content = re.sub(r'\\n{3,}', '\\n\\n', content)\\\n\\\n    return content.rstrip() + '\\n'\\\n\\\n# Main execution\\\ntry:\\\n    input_data = json.load(sys.stdin)\\\n    file_path = input_data.get('tool_input', {}).get('file_path', '')\\\n\\\n    if not file_path.endswith(('.md', '.mdx')):\\\n        sys.exit(0)  # Not a markdown file\\\n\\\n    if os.path.exists(file_path):\\\n        with open(file_path, 'r', encoding='utf-8') as f:\\\n            content = f.read()\\\n\\\n        formatted = format_markdown(content)\\\n\\\n        if formatted != content:\\\n            with open(file_path, 'w', encoding='utf-8') as f:\\\n                f.write(formatted)\\\n            print(f\"✓ Fixed markdown formatting in {file_path}\")\\\n\\\nexcept Exception as e:\\\n    print(f\"Error formatting markdown: {e}\", file=sys.stderr)\\\n    sys.exit(1)\\\n\\\n````\\\n\\\nMake the script executable:\\\n\\\nCopy\\\n\\\n```\\\nchmod +x .claude/hooks/markdown_formatter.py\\\n\\\n```\\\n\\\nThis hook automatically:\\\n\\\n- Detects programming languages in unlabeled code blocks\\\n- Adds appropriate language tags for syntax highlighting\\\n- Fixes excessive blank lines while preserving code content\\\n- Only processes markdown files ( `.md`, `.mdx`)\\\n\\\n### [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#custom-notification-hook)  Custom Notification Hook\\\n\\\nGet desktop notifications when Claude needs input:\\\n\\\nCopy\\\n\\\n```\\\n{\\\n  \"hooks\": {\\\n    \"Notification\": [\\\n      {\\\n        \"matcher\": \"\",\\\n        \"hooks\": [\\\n          {\\\n            \"type\": \"command\",\\\n            \"command\": \"notify-send 'Claude Code' 'Awaiting your input'\"\\\n          }\\\n        ]\\\n      }\\\n    ]\\\n  }\\\n}\\\n\\\n```\\\n\\\n### [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#file-protection-hook)  File Protection Hook\\\n\\\nBlock edits to sensitive files:\\\n\\\nCopy\\\n\\\n```\\\n{\\\n  \"hooks\": {\\\n    \"PreToolUse\": [\\\n      {\\\n        \"matcher\": \"Edit|Write\",\\\n        \"hooks\": [\\\n          {\\\n            \"type\": \"command\",\\\n            \"command\": \"python3 -c \\\"import json, sys; data=json.load(sys.stdin); path=data.get('tool_input',{}).get('file_path',''); sys.exit(2 if any(p in path for p in ['.env', 'package-lock.json', '.git/']) else 0)\\\"\"\\\n          }\\\n        ]\\\n      }\\\n    ]\\\n  }\\\n}\\\n\\\n```\\\n\\\n## [​](https://docs.claude.com/en/docs/claude-code/hooks-guide\\#learn-more)  Learn more\\\n\\\n- For reference documentation on hooks, see [Hooks reference](https://docs.claude.com/en/docs/claude-code/hooks).\\\n- For comprehensive security best practices and safety guidelines, see [Security Considerations](https://docs.claude.com/en/docs/claude-code/hooks#security-considerations) in the hooks reference documentation.\\\n- For troubleshooting steps and debugging techniques, see [Debugging](https://docs.claude.com/en/docs/claude-code/hooks#debugging) in the hooks reference\\\ndocumentation.\\\n\\\nWas this page helpful?\\\n\\\nYesNo\\\n\\\n[Output styles](https://docs.claude.com/en/docs/claude-code/output-styles) [Headless mode](https://docs.claude.com/en/docs/claude-code/headless)\\\n\\\nAssistant\\\n\\\nResponses are generated using AI and may contain mistakes.\\\n\\\n[Claude Docs home page![light logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/light.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=c877c45432515ee69194cb19e9f983a2)![dark logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/dark.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=f5bb877be0cb3cba86cf6d7c88185216)](https://docs.claude.com/)\\\n\\\n[x](https://x.com/AnthropicAI) [linkedin](https://www.linkedin.com/company/anthropicresearch)\\\n\\\nCompany\\\n\\\n[Anthropic](https://www.anthropic.com/company) [Careers](https://www.anthropic.com/careers) [Economic Futures](https://www.anthropic.com/economic-futures) [Research](https://www.anthropic.com/research) [News](https://www.anthropic.com/news) [Trust center](https://trust.anthropic.com/) [Transparency](https://www.anthropic.com/transparency)\\\n\\\nHelp and security\\\n\\\n[Availability](https://www.anthropic.com/supported-countries) [Status](https://status.anthropic.com/) [Support center](https://support.claude.com/)\\\n\\\nLearn\\\n\\\n[Courses](https://www.anthropic.com/learn) [MCP connectors](https://claude.com/partners/mcp) [Customer stories](https://www.claude.com/customers) [Engineering blog](https://www.anthropic.com/engineering) [Events](https://www.anthropic.com/events) [Powered by Claude](https://claude.com/partners/powered-by-claude) [Service partners](https://claude.com/partners/services) [Startups program](https://claude.com/programs/startups)\\\n\\\nTerms and policies\\\n\\\n[Privacy policy](https://www.anthropic.com/legal/privacy) [Disclosure policy](https://www.anthropic.com/responsible-disclosure-policy) [Usage policy](https://www.anthropic.com/legal/aup) [Commercial terms](https://www.anthropic.com/legal/commercial-terms) [Consumer terms](https://www.anthropic.com/legal/consumer-terms)\\\n\\\nAsk Docs\\\nAI Avatar",
  "metadata": {
    "og:description": "Learn how to customize and extend Claude Code's behavior by registering shell commands",
    "og:image:height": "630",
    "title": "Get started with Claude Code hooks - Claude Docs",
    "twitter:title": "Get started with Claude Code hooks - Claude Docs",
    "twitter:description": "Learn how to customize and extend Claude Code's behavior by registering shell commands",
    "twitter:image": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DBuild%2Bwith%2BClaude%2BCode%26appearance%3Dlight%26title%3DGet%2Bstarted%2Bwith%2BClaude%2BCode%2Bhooks%26description%3DLearn%2Bhow%2Bto%2Bcustomize%2Band%2Bextend%2BClaude%2BCode%2527s%2Bbehavior%2Bby%2Bregistering%2Bshell%2Bcommands%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "og:site_name": "Claude Docs",
    "favicon": "https://mintcdn.com/anthropic-claude-docs/JaG275Sqw0maE7Ce/_generated/favicon/favicon-16x16.png?fit=max&n=JaG275Sqw0maE7Ce&s=b20efcf65eab17019f139f435bec262e",
    "og:image": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DBuild%2Bwith%2BClaude%2BCode%26appearance%3Dlight%26title%3DGet%2Bstarted%2Bwith%2BClaude%2BCode%2Bhooks%26description%3DLearn%2Bhow%2Bto%2Bcustomize%2Band%2Bextend%2BClaude%2BCode%2527s%2Bbehavior%2Bby%2Bregistering%2Bshell%2Bcommands%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "twitter:image:height": "630",
    "og:image:width": "1200",
    "apple-mobile-web-app-title": "Claude Docs",
    "msapplication-config": "https://mintcdn.com/anthropic-claude-docs/JaG275Sqw0maE7Ce/_generated/favicon/browserconfig.xml?n=JaG275Sqw0maE7Ce&s=31cc0bae38445be839155997a2084e7e",
    "og:type": "website",
    "twitter:card": "summary_large_image",
    "charset": "utf-8",
    "twitter:image:width": "1200",
    "next-size-adjust": "",
    "msapplication-TileColor": "#0E0E0E",
    "ogDescription": "Learn how to customize and extend Claude Code's behavior by registering shell commands",
    "viewport": "width=device-width, initial-scale=1",
    "ogTitle": "Get started with Claude Code hooks - Claude Docs",
    "language": "en",
    "description": "Learn how to customize and extend Claude Code's behavior by registering shell commands",
    "og:title": "Get started with Claude Code hooks - Claude Docs",
    "generator": "Mintlify",
    "application-name": "Claude Docs",
    "ogImage": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DBuild%2Bwith%2BClaude%2BCode%26appearance%3Dlight%26title%3DGet%2Bstarted%2Bwith%2BClaude%2BCode%2Bhooks%26description%3DLearn%2Bhow%2Bto%2Bcustomize%2Band%2Bextend%2BClaude%2BCode%2527s%2Bbehavior%2Bby%2Bregistering%2Bshell%2Bcommands%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "scrapeId": "d8abdfa6-29e4-49f0-afbe-1a108cbc40f2",
    "sourceURL": "https://docs.claude.com/en/docs/claude-code/hooks-guide",
    "url": "https://docs.claude.com/en/docs/claude-code/hooks-guide",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic",
    "cacheState": "hit",
    "cachedAt": "2025-10-21T19:46:52.556Z",
    "creditsUsed": 1
  }
}