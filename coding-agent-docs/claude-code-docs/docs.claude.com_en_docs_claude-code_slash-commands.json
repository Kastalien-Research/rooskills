{
  "markdown": "[Claude Docs home page![light logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/light.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=c877c45432515ee69194cb19e9f983a2)![dark logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/dark.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=f5bb877be0cb3cba86cf6d7c88185216)](https://docs.claude.com/)\n\n![US](https://d3gk2c5xim1je2.cloudfront.net/flags/US.svg)\n\nEnglish\n\nSearch...\n\nCtrl K\n\n- [Console](https://console.anthropic.com/login)\n- [Support](https://support.claude.com/)\n- [Discord](https://www.anthropic.com/discord)\n- [Sign up](https://console.anthropic.com/login)\n- [Sign up](https://console.anthropic.com/login)\n\nSearch...\n\nNavigation\n\nReference\n\nSlash commands\n\n[Welcome](https://docs.claude.com/en/home) [Claude Developer Platform](https://docs.claude.com/en/docs/intro) [Claude Code](https://docs.claude.com/en/docs/claude-code/overview) [Model Context Protocol (MCP)](https://docs.claude.com/en/docs/mcp) [API Reference](https://docs.claude.com/en/api/messages) [Resources](https://docs.claude.com/en/resources/overview) [Release Notes](https://docs.claude.com/en/release-notes/overview)\n\n##### Getting started\n\n- [Overview](https://docs.claude.com/en/docs/claude-code/overview)\n- [Quickstart](https://docs.claude.com/en/docs/claude-code/quickstart)\n- [Common workflows](https://docs.claude.com/en/docs/claude-code/common-workflows)\n- [Claude Code on the web](https://docs.claude.com/en/docs/claude-code/claude-code-on-the-web)\n\n##### Build with Claude Code\n\n- [Subagents](https://docs.claude.com/en/docs/claude-code/sub-agents)\n- [Plugins](https://docs.claude.com/en/docs/claude-code/plugins)\n- [Agent Skills](https://docs.claude.com/en/docs/claude-code/skills)\n- [Output styles](https://docs.claude.com/en/docs/claude-code/output-styles)\n- [Hooks](https://docs.claude.com/en/docs/claude-code/hooks-guide)\n- [Headless mode](https://docs.claude.com/en/docs/claude-code/headless)\n- [GitHub Actions](https://docs.claude.com/en/docs/claude-code/github-actions)\n- [GitLab CI/CD](https://docs.claude.com/en/docs/claude-code/gitlab-ci-cd)\n- [Model Context Protocol (MCP)](https://docs.claude.com/en/docs/claude-code/mcp)\n- [Troubleshooting](https://docs.claude.com/en/docs/claude-code/troubleshooting)\n\n##### Claude Agent SDK\n\n- [Migrate to Claude Agent SDK](https://docs.claude.com/en/docs/claude-code/sdk/migration-guide)\n\n##### Deployment\n\n- [Overview](https://docs.claude.com/en/docs/claude-code/third-party-integrations)\n- [Amazon Bedrock](https://docs.claude.com/en/docs/claude-code/amazon-bedrock)\n- [Google Vertex AI](https://docs.claude.com/en/docs/claude-code/google-vertex-ai)\n- [Network configuration](https://docs.claude.com/en/docs/claude-code/network-config)\n- [LLM gateway](https://docs.claude.com/en/docs/claude-code/llm-gateway)\n- [Development containers](https://docs.claude.com/en/docs/claude-code/devcontainer)\n- [Sandboxing](https://docs.claude.com/en/docs/claude-code/sandboxing)\n\n##### Administration\n\n- [Advanced installation](https://docs.claude.com/en/docs/claude-code/setup)\n- [Identity and Access Management](https://docs.claude.com/en/docs/claude-code/iam)\n- [Security](https://docs.claude.com/en/docs/claude-code/security)\n- [Data usage](https://docs.claude.com/en/docs/claude-code/data-usage)\n- [Monitoring](https://docs.claude.com/en/docs/claude-code/monitoring-usage)\n- [Costs](https://docs.claude.com/en/docs/claude-code/costs)\n- [Analytics](https://docs.claude.com/en/docs/claude-code/analytics)\n- [Plugin marketplaces](https://docs.claude.com/en/docs/claude-code/plugin-marketplaces)\n\n##### Configuration\n\n- [Settings](https://docs.claude.com/en/docs/claude-code/settings)\n- [Visual Studio Code](https://docs.claude.com/en/docs/claude-code/vs-code)\n- [JetBrains IDEs](https://docs.claude.com/en/docs/claude-code/jetbrains)\n- [Terminal configuration](https://docs.claude.com/en/docs/claude-code/terminal-config)\n- [Model configuration](https://docs.claude.com/en/docs/claude-code/model-config)\n- [Memory management](https://docs.claude.com/en/docs/claude-code/memory)\n- [Status line configuration](https://docs.claude.com/en/docs/claude-code/statusline)\n\n##### Reference\n\n- [CLI reference](https://docs.claude.com/en/docs/claude-code/cli-reference)\n- [Interactive mode](https://docs.claude.com/en/docs/claude-code/interactive-mode)\n- [Slash commands](https://docs.claude.com/en/docs/claude-code/slash-commands)\n- [Checkpointing](https://docs.claude.com/en/docs/claude-code/checkpointing)\n- [Hooks reference](https://docs.claude.com/en/docs/claude-code/hooks)\n- [Plugins reference](https://docs.claude.com/en/docs/claude-code/plugins-reference)\n\n##### Resources\n\n- [Legal and compliance](https://docs.claude.com/en/docs/claude-code/legal-and-compliance)\n\nOn this page\n\n- [Built-in slash commands](https://docs.claude.com/en/docs/claude-code/slash-commands#built-in-slash-commands)\n- [Custom slash commands](https://docs.claude.com/en/docs/claude-code/slash-commands#custom-slash-commands)\n- [Syntax](https://docs.claude.com/en/docs/claude-code/slash-commands#syntax)\n- [Parameters](https://docs.claude.com/en/docs/claude-code/slash-commands#parameters)\n- [Command types](https://docs.claude.com/en/docs/claude-code/slash-commands#command-types)\n- [Project commands](https://docs.claude.com/en/docs/claude-code/slash-commands#project-commands)\n- [Personal commands](https://docs.claude.com/en/docs/claude-code/slash-commands#personal-commands)\n- [Features](https://docs.claude.com/en/docs/claude-code/slash-commands#features)\n- [Namespacing](https://docs.claude.com/en/docs/claude-code/slash-commands#namespacing)\n- [Arguments](https://docs.claude.com/en/docs/claude-code/slash-commands#arguments)\n- [Bash command execution](https://docs.claude.com/en/docs/claude-code/slash-commands#bash-command-execution)\n- [File references](https://docs.claude.com/en/docs/claude-code/slash-commands#file-references)\n- [Thinking mode](https://docs.claude.com/en/docs/claude-code/slash-commands#thinking-mode)\n- [Frontmatter](https://docs.claude.com/en/docs/claude-code/slash-commands#frontmatter)\n- [Plugin commands](https://docs.claude.com/en/docs/claude-code/slash-commands#plugin-commands)\n- [How plugin commands work](https://docs.claude.com/en/docs/claude-code/slash-commands#how-plugin-commands-work)\n- [Plugin command structure](https://docs.claude.com/en/docs/claude-code/slash-commands#plugin-command-structure)\n- [Invocation patterns](https://docs.claude.com/en/docs/claude-code/slash-commands#invocation-patterns)\n- [MCP slash commands](https://docs.claude.com/en/docs/claude-code/slash-commands#mcp-slash-commands)\n- [Command format](https://docs.claude.com/en/docs/claude-code/slash-commands#command-format)\n- [Features](https://docs.claude.com/en/docs/claude-code/slash-commands#features-2)\n- [Dynamic discovery](https://docs.claude.com/en/docs/claude-code/slash-commands#dynamic-discovery)\n- [Arguments](https://docs.claude.com/en/docs/claude-code/slash-commands#arguments-2)\n- [Naming conventions](https://docs.claude.com/en/docs/claude-code/slash-commands#naming-conventions)\n- [Managing MCP connections](https://docs.claude.com/en/docs/claude-code/slash-commands#managing-mcp-connections)\n- [MCP permissions and wildcards](https://docs.claude.com/en/docs/claude-code/slash-commands#mcp-permissions-and-wildcards)\n- [SlashCommand tool](https://docs.claude.com/en/docs/claude-code/slash-commands#slashcommand-tool)\n- [SlashCommand tool supported commands](https://docs.claude.com/en/docs/claude-code/slash-commands#slashcommand-tool-supported-commands)\n- [Disable SlashCommand tool](https://docs.claude.com/en/docs/claude-code/slash-commands#disable-slashcommand-tool)\n- [Disable specific commands only](https://docs.claude.com/en/docs/claude-code/slash-commands#disable-specific-commands-only)\n- [SlashCommand permission rules](https://docs.claude.com/en/docs/claude-code/slash-commands#slashcommand-permission-rules)\n- [Character budget limit](https://docs.claude.com/en/docs/claude-code/slash-commands#character-budget-limit)\n- [Skills vs slash commands](https://docs.claude.com/en/docs/claude-code/slash-commands#skills-vs-slash-commands)\n- [Use slash commands for](https://docs.claude.com/en/docs/claude-code/slash-commands#use-slash-commands-for)\n- [Use Skills for](https://docs.claude.com/en/docs/claude-code/slash-commands#use-skills-for)\n- [Key differences](https://docs.claude.com/en/docs/claude-code/slash-commands#key-differences)\n- [Example comparison](https://docs.claude.com/en/docs/claude-code/slash-commands#example-comparison)\n- [When to use each](https://docs.claude.com/en/docs/claude-code/slash-commands#when-to-use-each)\n- [See also](https://docs.claude.com/en/docs/claude-code/slash-commands#see-also)\n\nReference\n\n# Slash commands\n\nCopy page\n\nControl Claude’s behavior during an interactive session with slash commands.\n\nCopy page\n\n## [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#built-in-slash-commands)  Built-in slash commands\n\n| Command | Purpose |\n| --- | --- |\n| `/add-dir` | Add additional working directories |\n| `/agents` | Manage custom AI subagents for specialized tasks |\n| `/bug` | Report bugs (sends conversation to Anthropic) |\n| `/clear` | Clear conversation history |\n| `/compact [instructions]` | Compact conversation with optional focus instructions |\n| `/config` | Open the Settings interface (Config tab) |\n| `/cost` | Show token usage statistics (see [cost tracking guide](https://docs.claude.com/en/docs/claude-code/costs#using-the-cost-command) for subscription-specific details) |\n| `/doctor` | Checks the health of your Claude Code installation |\n| `/help` | Get usage help |\n| `/init` | Initialize project with CLAUDE.md guide |\n| `/login` | Switch Anthropic accounts |\n| `/logout` | Sign out from your Anthropic account |\n| `/mcp` | Manage MCP server connections and OAuth authentication |\n| `/memory` | Edit CLAUDE.md memory files |\n| `/model` | Select or change the AI model |\n| `/permissions` | View or update [permissions](https://docs.claude.com/en/docs/claude-code/iam#configuring-permissions) |\n| `/pr_comments` | View pull request comments |\n| `/review` | Request code review |\n| `/sandbox` | Enable sandboxed bash tool with filesystem and network isolation for safer, more autonomous execution |\n| `/rewind` | Rewind the conversation and/or code |\n| `/status` | Open the Settings interface (Status tab) showing version, model, account, and connectivity |\n| `/terminal-setup` | Install Shift+Enter key binding for newlines (iTerm2 and VSCode only) |\n| `/usage` | Show plan usage limits and rate limit status (subscription plans only) |\n| `/vim` | Enter vim mode for alternating insert and command modes |\n\n## [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#custom-slash-commands)  Custom slash commands\n\nCustom slash commands allow you to define frequently-used prompts as Markdown files that Claude Code can execute. Commands are organized by scope (project-specific or personal) and support namespacing through directory structures.\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#syntax)  Syntax\n\nCopy\n\n```\n/<command-name> [arguments]\n\n```\n\n#### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#parameters)  Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `<command-name>` | Name derived from the Markdown filename (without `.md` extension) |\n| `[arguments]` | Optional arguments passed to the command |\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#command-types)  Command types\n\n#### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#project-commands)  Project commands\n\nCommands stored in your repository and shared with your team. When listed in `/help`, these commands show “(project)” after their description.**Location**: `.claude/commands/`In the following example, we create the `/optimize` command:\n\nCopy\n\n```\n# Create a project command\nmkdir -p .claude/commands\necho \"Analyze this code for performance issues and suggest optimizations:\" > .claude/commands/optimize.md\n\n```\n\n#### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#personal-commands)  Personal commands\n\nCommands available across all your projects. When listed in `/help`, these commands show “(user)” after their description.**Location**: `~/.claude/commands/`In the following example, we create the `/security-review` command:\n\nCopy\n\n```\n# Create a personal command\nmkdir -p ~/.claude/commands\necho \"Review this code for security vulnerabilities:\" > ~/.claude/commands/security-review.md\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#features)  Features\n\n#### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#namespacing)  Namespacing\n\nOrganize commands in subdirectories. The subdirectories are used for organization and appear in the command description, but they do not affect the command name itself. The description will show whether the command comes from the project directory ( `.claude/commands`) or the user-level directory ( `~/.claude/commands`), along with the subdirectory name.Conflicts between user and project level commands are not supported. Otherwise, multiple commands with the same base file name can coexist.For example, a file at `.claude/commands/frontend/component.md` creates the command `/component` with description showing “(project:frontend)”.\nMeanwhile, a file at `~/.claude/commands/component.md` creates the command `/component` with description showing “(user)”.\n\n#### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#arguments)  Arguments\n\nPass dynamic values to commands using argument placeholders:\n\n##### All arguments with `$ARGUMENTS`\n\nThe `$ARGUMENTS` placeholder captures all arguments passed to the command:\n\nCopy\n\n```\n# Command definition\necho 'Fix issue #$ARGUMENTS following our coding standards' > .claude/commands/fix-issue.md\n\n# Usage\n> /fix-issue 123 high-priority\n# $ARGUMENTS becomes: \"123 high-priority\"\n\n```\n\n##### Individual arguments with `$1`, `$2`, etc.\n\nAccess specific arguments individually using positional parameters (similar to shell scripts):\n\nCopy\n\n```\n# Command definition\necho 'Review PR #$1 with priority $2 and assign to $3' > .claude/commands/review-pr.md\n\n# Usage\n> /review-pr 456 high alice\n# $1 becomes \"456\", $2 becomes \"high\", $3 becomes \"alice\"\n\n```\n\nUse positional arguments when you need to:\n\n- Access arguments individually in different parts of your command\n- Provide defaults for missing arguments\n- Build more structured commands with specific parameter roles\n\n#### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#bash-command-execution)  Bash command execution\n\nExecute bash commands before the slash command runs using the `!` prefix. The output is included in the command context. You _must_ include `allowed-tools` with the `Bash` tool, but you can choose the specific bash commands to allow.For example:\n\nCopy\n\n```\n---\nallowed-tools: Bash(git add:*), Bash(git status:*), Bash(git commit:*)\ndescription: Create a git commit\n---\n\n## Context\n\n- Current git status: !`git status`\n- Current git diff (staged and unstaged changes): !`git diff HEAD`\n- Current branch: !`git branch --show-current`\n- Recent commits: !`git log --oneline -10`\n\n## Your task\n\nBased on the above changes, create a single git commit.\n\n```\n\n#### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#file-references)  File references\n\nInclude file contents in commands using the `@` prefix to [reference files](https://docs.claude.com/en/docs/claude-code/common-workflows#reference-files-and-directories).For example:\n\nCopy\n\n```\n# Reference a specific file\n\nReview the implementation in @src/utils/helpers.js\n\n# Reference multiple files\n\nCompare @src/old-version.js with @src/new-version.js\n\n```\n\n#### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#thinking-mode)  Thinking mode\n\nSlash commands can trigger extended thinking by including [extended thinking keywords](https://docs.claude.com/en/docs/claude-code/common-workflows#use-extended-thinking).\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#frontmatter)  Frontmatter\n\nCommand files support frontmatter, useful for specifying metadata about the command:\n\n| Frontmatter | Purpose | Default |\n| --- | --- | --- |\n| `allowed-tools` | List of tools the command can use | Inherits from the conversation |\n| `argument-hint` | The arguments expected for the slash command. Example: `argument-hint: add [tagId] | remove [tagId] | list`. This hint is shown to the user when auto-completing the slash command. | None |\n| `description` | Brief description of the command | Uses the first line from the prompt |\n| `model` | Specific model string (see [Models overview](https://docs.claude.com/en/docs/about-claude/models/overview)) | Inherits from the conversation |\n| `disable-model-invocation` | Whether to prevent `SlashCommand` tool from calling this command | false |\n\nFor example:\n\nCopy\n\n```\n---\nallowed-tools: Bash(git add:*), Bash(git status:*), Bash(git commit:*)\nargument-hint: [message]\ndescription: Create a git commit\nmodel: claude-3-5-haiku-20241022\n---\n\nCreate a git commit with message: $ARGUMENTS\n\n```\n\nExample using positional arguments:\n\nCopy\n\n```\n---\nargument-hint: [pr-number] [priority] [assignee]\ndescription: Review pull request\n---\n\nReview PR #$1 with priority $2 and assign to $3.\nFocus on security, performance, and code style.\n\n```\n\n## [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#plugin-commands)  Plugin commands\n\n[Plugins](https://docs.claude.com/en/docs/claude-code/plugins) can provide custom slash commands that integrate seamlessly with Claude Code. Plugin commands work exactly like user-defined commands but are distributed through [plugin marketplaces](https://docs.claude.com/en/docs/claude-code/plugin-marketplaces).\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#how-plugin-commands-work)  How plugin commands work\n\nPlugin commands are:\n\n- **Namespaced**: Commands can use the format `/plugin-name:command-name` to avoid conflicts (plugin prefix is optional unless there are name collisions)\n- **Automatically available**: Once a plugin is installed and enabled, its commands appear in `/help`\n- **Fully integrated**: Support all command features (arguments, frontmatter, bash execution, file references)\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#plugin-command-structure)  Plugin command structure\n\n**Location**: `commands/` directory in plugin root**File format**: Markdown files with frontmatter**Basic command structure**:\n\nCopy\n\n```\n---\ndescription: Brief description of what the command does\n---\n\n# Command Name\n\nDetailed instructions for Claude on how to execute this command.\nInclude specific guidance on parameters, expected outcomes, and any special considerations.\n\n```\n\n**Advanced command features**:\n\n- **Arguments**: Use placeholders like `{arg1}` in command descriptions\n- **Subdirectories**: Organize commands in subdirectories for namespacing\n- **Bash integration**: Commands can execute shell scripts and programs\n- **File references**: Commands can reference and modify project files\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#invocation-patterns)  Invocation patterns\n\nDirect command (when no conflicts)\n\nCopy\n\n```\n/command-name\n\n```\n\nPlugin-prefixed (when needed for disambiguation)\n\nCopy\n\n```\n/plugin-name:command-name\n\n```\n\nWith arguments (if command supports them)\n\nCopy\n\n```\n/command-name arg1 arg2\n\n```\n\n## [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#mcp-slash-commands)  MCP slash commands\n\nMCP servers can expose prompts as slash commands that become available in Claude Code. These commands are dynamically discovered from connected MCP servers.\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#command-format)  Command format\n\nMCP commands follow the pattern:\n\nCopy\n\n```\n/mcp__<server-name>__<prompt-name> [arguments]\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#features-2)  Features\n\n#### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#dynamic-discovery)  Dynamic discovery\n\nMCP commands are automatically available when:\n\n- An MCP server is connected and active\n- The server exposes prompts through the MCP protocol\n- The prompts are successfully retrieved during connection\n\n#### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#arguments-2)  Arguments\n\nMCP prompts can accept arguments defined by the server:\n\nCopy\n\n```\n# Without arguments\n> /mcp__github__list_prs\n\n# With arguments\n> /mcp__github__pr_review 456\n> /mcp__jira__create_issue \"Bug title\" high\n\n```\n\n#### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#naming-conventions)  Naming conventions\n\n- Server and prompt names are normalized\n- Spaces and special characters become underscores\n- Names are lowercased for consistency\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#managing-mcp-connections)  Managing MCP connections\n\nUse the `/mcp` command to:\n\n- View all configured MCP servers\n- Check connection status\n- Authenticate with OAuth-enabled servers\n- Clear authentication tokens\n- View available tools and prompts from each server\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#mcp-permissions-and-wildcards)  MCP permissions and wildcards\n\nWhen configuring [permissions for MCP tools](https://docs.claude.com/en/docs/claude-code/iam#tool-specific-permission-rules), note that **wildcards are not supported**:\n\n- ✅ **Correct**: `mcp__github` (approves ALL tools from the github server)\n- ✅ **Correct**: `mcp__github__get_issue` (approves specific tool)\n- ❌ **Incorrect**: `mcp__github__*` (wildcards not supported)\n\nTo approve all tools from an MCP server, use just the server name: `mcp__servername`. To approve specific tools only, list each tool individually.\n\n## [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#slashcommand-tool)  `SlashCommand` tool\n\nThe `SlashCommand` tool allows Claude to execute [custom slash commands](https://docs.claude.com/en/docs/claude-code/slash-commands#custom-slash-commands) programmatically\nduring a conversation. This gives Claude the ability to invoke custom commands\non your behalf when appropriate.To encourage Claude to trigger `SlashCommand` tool, your instructions (prompts,\nCLAUDE.md, etc.) generally need to reference the command by name with its slash.Example:\n\nCopy\n\n```\n> Run /write-unit-test when you are about to start writing tests.\n\n```\n\nThis tool puts each available custom slash command’s metadata into context up to the\ncharacter budget limit. You can use `/context` to monitor token usage and follow\nthe operations below to manage context.\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#slashcommand-tool-supported-commands)  `SlashCommand` tool supported commands\n\n`SlashCommand` tool only supports custom slash commands that:\n\n- Are user-defined. Built-in commands like `/compact` and `/init` are _not_ supported.\n- Have the `description` frontmatter field populated. We use the `description` in the context.\n\nFor Claude Code versions >= 1.0.124, you can see which custom slash commands\n`SlashCommand` tool can invoke by running `claude --debug` and triggering a query.\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#disable-slashcommand-tool)  Disable `SlashCommand` tool\n\nTo prevent Claude from executing any slash commands via the tool:\n\nCopy\n\n```\n/permissions\n# Add to deny rules: SlashCommand\n\n```\n\nThis will also remove SlashCommand tool (and the slash command descriptions) from context.\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#disable-specific-commands-only)  Disable specific commands only\n\nTo prevent a specific slash command from becoming available, add\n`disable-model-invocation: true` to the slash command’s frontmatter.This will also remove the command’s metadata from context.\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#slashcommand-permission-rules)  `SlashCommand` permission rules\n\nThe permission rules support:\n\n- **Exact match**: `SlashCommand:/commit` (allows only `/commit` with no arguments)\n- **Prefix match**: `SlashCommand:/review-pr:*` (allows `/review-pr` with any arguments)\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#character-budget-limit)  Character budget limit\n\nThe `SlashCommand` tool includes a character budget to limit the size of command\ndescriptions shown to Claude. This prevents token overflow when many commands\nare available.The budget includes each custom slash command’s name, args, and description.\n\n- **Default limit**: 15,000 characters\n- **Custom limit**: Set via `SLASH_COMMAND_TOOL_CHAR_BUDGET` environment variable\n\nWhen the character budget is exceeded, Claude will see only a subset of the\navailable commands. In `/context`, a warning will show with “M of N commands”.\n\n## [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#skills-vs-slash-commands)  Skills vs slash commands\n\n**Slash commands** and **Agent Skills** serve different purposes in Claude Code:\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#use-slash-commands-for)  Use slash commands for\n\n**Quick, frequently-used prompts**:\n\n- Simple prompt snippets you use often\n- Quick reminders or templates\n- Frequently-used instructions that fit in one file\n\n**Examples**:\n\n- `/review` → “Review this code for bugs and suggest improvements”\n- `/explain` → “Explain this code in simple terms”\n- `/optimize` → “Analyze this code for performance issues”\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#use-skills-for)  Use Skills for\n\n**Comprehensive capabilities with structure**:\n\n- Complex workflows with multiple steps\n- Capabilities requiring scripts or utilities\n- Knowledge organized across multiple files\n- Team workflows you want to standardize\n\n**Examples**:\n\n- PDF processing Skill with form-filling scripts and validation\n- Data analysis Skill with reference docs for different data types\n- Documentation Skill with style guides and templates\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#key-differences)  Key differences\n\n| Aspect | Slash Commands | Agent Skills |\n| --- | --- | --- |\n| **Complexity** | Simple prompts | Complex capabilities |\n| **Structure** | Single .md file | Directory with SKILL.md + resources |\n| **Discovery** | Explicit invocation ( `/command`) | Automatic (based on context) |\n| **Files** | One file only | Multiple files, scripts, templates |\n| **Scope** | Project or personal | Project or personal |\n| **Sharing** | Via git | Via git |\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#example-comparison)  Example comparison\n\n**As a slash command**:\n\nCopy\n\n```\n# .claude/commands/review.md\nReview this code for:\n- Security vulnerabilities\n- Performance issues\n- Code style violations\n\n```\n\nUsage: `/review` (manual invocation)**As a Skill**:\n\nCopy\n\n```\n.claude/skills/code-review/\n├── SKILL.md (overview and workflows)\n├── SECURITY.md (security checklist)\n├── PERFORMANCE.md (performance patterns)\n├── STYLE.md (style guide reference)\n└── scripts/\n    └── run-linters.sh\n\n```\n\nUsage: “Can you review this code?” (automatic discovery)The Skill provides richer context, validation scripts, and organized reference material.\n\n### [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#when-to-use-each)  When to use each\n\n**Use slash commands**:\n\n- You invoke the same prompt repeatedly\n- The prompt fits in a single file\n- You want explicit control over when it runs\n\n**Use Skills**:\n\n- Claude should discover the capability automatically\n- Multiple files or scripts are needed\n- Complex workflows with validation steps\n- Team needs standardized, detailed guidance\n\nBoth slash commands and Skills can coexist. Use the approach that fits your needs.Learn more about [Agent Skills](https://docs.claude.com/en/docs/claude-code/skills).\n\n## [​](https://docs.claude.com/en/docs/claude-code/slash-commands\\#see-also)  See also\n\n- [Plugins](https://docs.claude.com/en/docs/claude-code/plugins) \\- Extend Claude Code with custom commands through plugins\n- [Identity and Access Management](https://docs.claude.com/en/docs/claude-code/iam) \\- Complete guide to permissions, including MCP tool permissions\n- [Interactive mode](https://docs.claude.com/en/docs/claude-code/interactive-mode) \\- Shortcuts, input modes, and interactive features\n- [CLI reference](https://docs.claude.com/en/docs/claude-code/cli-reference) \\- Command-line flags and options\n- [Settings](https://docs.claude.com/en/docs/claude-code/settings) \\- Configuration options\n- [Memory management](https://docs.claude.com/en/docs/claude-code/memory) \\- Managing Claude’s memory across sessions\n\nWas this page helpful?\n\nYesNo\n\n[Interactive mode](https://docs.claude.com/en/docs/claude-code/interactive-mode) [Checkpointing](https://docs.claude.com/en/docs/claude-code/checkpointing)\n\nAssistant\n\nResponses are generated using AI and may contain mistakes.\n\n[Claude Docs home page![light logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/light.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=c877c45432515ee69194cb19e9f983a2)![dark logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/dark.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=f5bb877be0cb3cba86cf6d7c88185216)](https://docs.claude.com/)\n\n[x](https://x.com/AnthropicAI) [linkedin](https://www.linkedin.com/company/anthropicresearch)\n\nCompany\n\n[Anthropic](https://www.anthropic.com/company) [Careers](https://www.anthropic.com/careers) [Economic Futures](https://www.anthropic.com/economic-futures) [Research](https://www.anthropic.com/research) [News](https://www.anthropic.com/news) [Trust center](https://trust.anthropic.com/) [Transparency](https://www.anthropic.com/transparency)\n\nHelp and security\n\n[Availability](https://www.anthropic.com/supported-countries) [Status](https://status.anthropic.com/) [Support center](https://support.claude.com/)\n\nLearn\n\n[Courses](https://www.anthropic.com/learn) [MCP connectors](https://claude.com/partners/mcp) [Customer stories](https://www.claude.com/customers) [Engineering blog](https://www.anthropic.com/engineering) [Events](https://www.anthropic.com/events) [Powered by Claude](https://claude.com/partners/powered-by-claude) [Service partners](https://claude.com/partners/services) [Startups program](https://claude.com/programs/startups)\n\nTerms and policies\n\n[Privacy policy](https://www.anthropic.com/legal/privacy) [Disclosure policy](https://www.anthropic.com/responsible-disclosure-policy) [Usage policy](https://www.anthropic.com/legal/aup) [Commercial terms](https://www.anthropic.com/legal/commercial-terms) [Consumer terms](https://www.anthropic.com/legal/consumer-terms)\n\nAsk Docs\nAI Avatar",
  "metadata": {
    "title": "Slash commands - Claude Docs",
    "generator": "Mintlify",
    "description": "Control Claude's behavior during an interactive session with slash commands.",
    "next-size-adjust": "",
    "msapplication-TileColor": "#0E0E0E",
    "ogTitle": "Slash commands - Claude Docs",
    "ogDescription": "Control Claude's behavior during an interactive session with slash commands.",
    "og:description": "Control Claude's behavior during an interactive session with slash commands.",
    "og:image": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DReference%26appearance%3Dlight%26title%3DSlash%2Bcommands%26description%3DControl%2BClaude%2527s%2Bbehavior%2Bduring%2Ban%2Binteractive%2Bsession%2Bwith%2Bslash%2Bcommands.%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "og:image:height": "630",
    "twitter:title": "Slash commands - Claude Docs",
    "twitter:description": "Control Claude's behavior during an interactive session with slash commands.",
    "twitter:image": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DReference%26appearance%3Dlight%26title%3DSlash%2Bcommands%26description%3DControl%2BClaude%2527s%2Bbehavior%2Bduring%2Ban%2Binteractive%2Bsession%2Bwith%2Bslash%2Bcommands.%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "twitter:image:width": "1200",
    "favicon": "https://mintcdn.com/anthropic-claude-docs/JaG275Sqw0maE7Ce/_generated/favicon/favicon-16x16.png?fit=max&n=JaG275Sqw0maE7Ce&s=b20efcf65eab17019f139f435bec262e",
    "apple-mobile-web-app-title": "Claude Docs",
    "charset": "utf-8",
    "ogImage": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DReference%26appearance%3Dlight%26title%3DSlash%2Bcommands%26description%3DControl%2BClaude%2527s%2Bbehavior%2Bduring%2Ban%2Binteractive%2Bsession%2Bwith%2Bslash%2Bcommands.%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "viewport": "width=device-width, initial-scale=1",
    "og:site_name": "Claude Docs",
    "application-name": "Claude Docs",
    "twitter:card": "summary_large_image",
    "language": "en",
    "msapplication-config": "https://mintcdn.com/anthropic-claude-docs/JaG275Sqw0maE7Ce/_generated/favicon/browserconfig.xml?n=JaG275Sqw0maE7Ce&s=31cc0bae38445be839155997a2084e7e",
    "og:type": "website",
    "twitter:image:height": "630",
    "og:image:width": "1200",
    "og:title": "Slash commands - Claude Docs",
    "scrapeId": "5f56e26b-749a-4d90-b413-e187a0c87630",
    "sourceURL": "https://docs.claude.com/en/docs/claude-code/slash-commands",
    "url": "https://docs.claude.com/en/docs/claude-code/slash-commands",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic",
    "cacheState": "hit",
    "cachedAt": "2025-10-21T20:48:57.700Z",
    "creditsUsed": 1
  }
}