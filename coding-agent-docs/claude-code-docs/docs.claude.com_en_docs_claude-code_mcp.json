{
  "markdown": "[Claude Docs home page![light logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/light.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=c877c45432515ee69194cb19e9f983a2)![dark logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/dark.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=f5bb877be0cb3cba86cf6d7c88185216)](https://docs.claude.com/)\n\n![US](https://d3gk2c5xim1je2.cloudfront.net/flags/US.svg)\n\nEnglish\n\nSearch...\n\nCtrl K\n\n- [Console](https://console.anthropic.com/login)\n- [Support](https://support.claude.com/)\n- [Discord](https://www.anthropic.com/discord)\n- [Sign up](https://console.anthropic.com/login)\n- [Sign up](https://console.anthropic.com/login)\n\nSearch...\n\nNavigation\n\nBuild with Claude Code\n\nConnect Claude Code to tools via MCP\n\n[Welcome](https://docs.claude.com/en/home) [Claude Developer Platform](https://docs.claude.com/en/docs/intro) [Claude Code](https://docs.claude.com/en/docs/claude-code/overview) [Model Context Protocol (MCP)](https://docs.claude.com/en/docs/mcp) [API Reference](https://docs.claude.com/en/api/messages) [Resources](https://docs.claude.com/en/resources/overview) [Release Notes](https://docs.claude.com/en/release-notes/overview)\n\n##### Getting started\n\n- [Overview](https://docs.claude.com/en/docs/claude-code/overview)\n- [Quickstart](https://docs.claude.com/en/docs/claude-code/quickstart)\n- [Common workflows](https://docs.claude.com/en/docs/claude-code/common-workflows)\n- [Claude Code on the web](https://docs.claude.com/en/docs/claude-code/claude-code-on-the-web)\n\n##### Build with Claude Code\n\n- [Subagents](https://docs.claude.com/en/docs/claude-code/sub-agents)\n- [Plugins](https://docs.claude.com/en/docs/claude-code/plugins)\n- [Agent Skills](https://docs.claude.com/en/docs/claude-code/skills)\n- [Output styles](https://docs.claude.com/en/docs/claude-code/output-styles)\n- [Hooks](https://docs.claude.com/en/docs/claude-code/hooks-guide)\n- [Headless mode](https://docs.claude.com/en/docs/claude-code/headless)\n- [GitHub Actions](https://docs.claude.com/en/docs/claude-code/github-actions)\n- [GitLab CI/CD](https://docs.claude.com/en/docs/claude-code/gitlab-ci-cd)\n- [Model Context Protocol (MCP)](https://docs.claude.com/en/docs/claude-code/mcp)\n- [Troubleshooting](https://docs.claude.com/en/docs/claude-code/troubleshooting)\n\n##### Claude Agent SDK\n\n- [Migrate to Claude Agent SDK](https://docs.claude.com/en/docs/claude-code/sdk/migration-guide)\n\n##### Deployment\n\n- [Overview](https://docs.claude.com/en/docs/claude-code/third-party-integrations)\n- [Amazon Bedrock](https://docs.claude.com/en/docs/claude-code/amazon-bedrock)\n- [Google Vertex AI](https://docs.claude.com/en/docs/claude-code/google-vertex-ai)\n- [Network configuration](https://docs.claude.com/en/docs/claude-code/network-config)\n- [LLM gateway](https://docs.claude.com/en/docs/claude-code/llm-gateway)\n- [Development containers](https://docs.claude.com/en/docs/claude-code/devcontainer)\n- [Sandboxing](https://docs.claude.com/en/docs/claude-code/sandboxing)\n\n##### Administration\n\n- [Advanced installation](https://docs.claude.com/en/docs/claude-code/setup)\n- [Identity and Access Management](https://docs.claude.com/en/docs/claude-code/iam)\n- [Security](https://docs.claude.com/en/docs/claude-code/security)\n- [Data usage](https://docs.claude.com/en/docs/claude-code/data-usage)\n- [Monitoring](https://docs.claude.com/en/docs/claude-code/monitoring-usage)\n- [Costs](https://docs.claude.com/en/docs/claude-code/costs)\n- [Analytics](https://docs.claude.com/en/docs/claude-code/analytics)\n- [Plugin marketplaces](https://docs.claude.com/en/docs/claude-code/plugin-marketplaces)\n\n##### Configuration\n\n- [Settings](https://docs.claude.com/en/docs/claude-code/settings)\n- [Visual Studio Code](https://docs.claude.com/en/docs/claude-code/vs-code)\n- [JetBrains IDEs](https://docs.claude.com/en/docs/claude-code/jetbrains)\n- [Terminal configuration](https://docs.claude.com/en/docs/claude-code/terminal-config)\n- [Model configuration](https://docs.claude.com/en/docs/claude-code/model-config)\n- [Memory management](https://docs.claude.com/en/docs/claude-code/memory)\n- [Status line configuration](https://docs.claude.com/en/docs/claude-code/statusline)\n\n##### Reference\n\n- [CLI reference](https://docs.claude.com/en/docs/claude-code/cli-reference)\n- [Interactive mode](https://docs.claude.com/en/docs/claude-code/interactive-mode)\n- [Slash commands](https://docs.claude.com/en/docs/claude-code/slash-commands)\n- [Checkpointing](https://docs.claude.com/en/docs/claude-code/checkpointing)\n- [Hooks reference](https://docs.claude.com/en/docs/claude-code/hooks)\n- [Plugins reference](https://docs.claude.com/en/docs/claude-code/plugins-reference)\n\n##### Resources\n\n- [Legal and compliance](https://docs.claude.com/en/docs/claude-code/legal-and-compliance)\n\nOn this page\n\n- [What you can do with MCP](https://docs.claude.com/en/docs/claude-code/mcp#what-you-can-do-with-mcp)\n- [Popular MCP servers](https://docs.claude.com/en/docs/claude-code/mcp#popular-mcp-servers)\n- [Installing MCP servers](https://docs.claude.com/en/docs/claude-code/mcp#installing-mcp-servers)\n- [Option 1: Add a remote HTTP server](https://docs.claude.com/en/docs/claude-code/mcp#option-1%3A-add-a-remote-http-server)\n- [Option 2: Add a remote SSE server](https://docs.claude.com/en/docs/claude-code/mcp#option-2%3A-add-a-remote-sse-server)\n- [Option 3: Add a local stdio server](https://docs.claude.com/en/docs/claude-code/mcp#option-3%3A-add-a-local-stdio-server)\n- [Managing your servers](https://docs.claude.com/en/docs/claude-code/mcp#managing-your-servers)\n- [Plugin-provided MCP servers](https://docs.claude.com/en/docs/claude-code/mcp#plugin-provided-mcp-servers)\n- [MCP installation scopes](https://docs.claude.com/en/docs/claude-code/mcp#mcp-installation-scopes)\n- [Local scope](https://docs.claude.com/en/docs/claude-code/mcp#local-scope)\n- [Project scope](https://docs.claude.com/en/docs/claude-code/mcp#project-scope)\n- [User scope](https://docs.claude.com/en/docs/claude-code/mcp#user-scope)\n- [Choosing the right scope](https://docs.claude.com/en/docs/claude-code/mcp#choosing-the-right-scope)\n- [Scope hierarchy and precedence](https://docs.claude.com/en/docs/claude-code/mcp#scope-hierarchy-and-precedence)\n- [Environment variable expansion in .mcp.json](https://docs.claude.com/en/docs/claude-code/mcp#environment-variable-expansion-in-mcp-json)\n- [Practical examples](https://docs.claude.com/en/docs/claude-code/mcp#practical-examples)\n- [Example: Monitor errors with Sentry](https://docs.claude.com/en/docs/claude-code/mcp#example%3A-monitor-errors-with-sentry)\n- [Example: Connect to GitHub for code reviews](https://docs.claude.com/en/docs/claude-code/mcp#example%3A-connect-to-github-for-code-reviews)\n- [Example: Query your PostgreSQL database](https://docs.claude.com/en/docs/claude-code/mcp#example%3A-query-your-postgresql-database)\n- [Authenticate with remote MCP servers](https://docs.claude.com/en/docs/claude-code/mcp#authenticate-with-remote-mcp-servers)\n- [Add MCP servers from JSON configuration](https://docs.claude.com/en/docs/claude-code/mcp#add-mcp-servers-from-json-configuration)\n- [Import MCP servers from Claude Desktop](https://docs.claude.com/en/docs/claude-code/mcp#import-mcp-servers-from-claude-desktop)\n- [Use Claude Code as an MCP server](https://docs.claude.com/en/docs/claude-code/mcp#use-claude-code-as-an-mcp-server)\n- [MCP output limits and warnings](https://docs.claude.com/en/docs/claude-code/mcp#mcp-output-limits-and-warnings)\n- [Use MCP resources](https://docs.claude.com/en/docs/claude-code/mcp#use-mcp-resources)\n- [Reference MCP resources](https://docs.claude.com/en/docs/claude-code/mcp#reference-mcp-resources)\n- [Use MCP prompts as slash commands](https://docs.claude.com/en/docs/claude-code/mcp#use-mcp-prompts-as-slash-commands)\n- [Execute MCP prompts](https://docs.claude.com/en/docs/claude-code/mcp#execute-mcp-prompts)\n- [Enterprise MCP configuration](https://docs.claude.com/en/docs/claude-code/mcp#enterprise-mcp-configuration)\n- [Setting up enterprise MCP configuration](https://docs.claude.com/en/docs/claude-code/mcp#setting-up-enterprise-mcp-configuration)\n- [Restricting MCP servers with allowlists and denylists](https://docs.claude.com/en/docs/claude-code/mcp#restricting-mcp-servers-with-allowlists-and-denylists)\n\nBuild with Claude Code\n\n# Connect Claude Code to tools via MCP\n\nCopy page\n\nLearn how to connect Claude Code to your tools with the Model Context Protocol.\n\nCopy page\n\nClaude Code can connect to hundreds of external tools and data sources through the [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction), an open-source standard for AI-tool integrations. MCP servers give Claude Code access to your tools, databases, and APIs.\n\n## [​](https://docs.claude.com/en/docs/claude-code/mcp\\#what-you-can-do-with-mcp)  What you can do with MCP\n\nWith MCP servers connected, you can ask Claude Code to:\n\n- **Implement features from issue trackers**: “Add the feature described in JIRA issue ENG-4521 and create a PR on GitHub.”\n- **Analyze monitoring data**: “Check Sentry and Statsig to check the usage of the feature described in ENG-4521.”\n- **Query databases**: “Find emails of 10 random users who used feature ENG-4521, based on our Postgres database.”\n- **Integrate designs**: “Update our standard email template based on the new Figma designs that were posted in Slack”\n- **Automate workflows**: “Create Gmail drafts inviting these 10 users to a feedback session about the new feature.”\n\n## [​](https://docs.claude.com/en/docs/claude-code/mcp\\#popular-mcp-servers)  Popular MCP servers\n\nHere are some commonly used MCP servers you can connect to Claude Code:\n\nUse third party MCP servers at your own risk - Anthropic has not verified\nthe correctness or security of all these servers.\nMake sure you trust MCP servers you are installing.\nBe especially careful when using MCP servers that could fetch untrusted\ncontent, as these can expose you to prompt injection risk.\n\n### Development & Testing Tools\n\n[**Sentry**](https://docs.sentry.io/product/sentry-mcp/)\n\nMonitor errors, debug production issuesCommand\n\n`claude mcp add --transport http sentry https://mcp.sentry.dev/mcp`\n\n[**Socket**](https://github.com/SocketDev/socket-mcp)\n\nSecurity analysis for dependenciesCommand\n\n`claude mcp add --transport http socket https://mcp.socket.dev/`\n\n[**Hugging Face**](https://huggingface.co/settings/mcp)\n\nProvides access to Hugging Face Hub information and Gradio AI ApplicationsCommand\n\n`claude mcp add --transport http hugging-face https://huggingface.co/mcp`\n\n[**Jam**](https://jam.dev/docs/debug-a-jam/mcp)\n\nDebug faster with AI agents that can access Jam recordings like video, console logs, network requests, and errorsCommand\n\n`claude mcp add --transport http jam https://mcp.jam.dev/mcp`\n\n### Project Management & Documentation\n\n[**Asana**](https://developers.asana.com/docs/using-asanas-model-control-protocol-mcp-server)\n\nInteract with your Asana workspace to keep projects on trackCommand\n\n`claude mcp add --transport sse asana https://mcp.asana.com/sse`\n\n[**Atlassian**](https://www.atlassian.com/platform/remote-mcp-server)\n\nManage your Jira tickets and Confluence docsCommand\n\n`claude mcp add --transport sse atlassian https://mcp.atlassian.com/v1/sse`\n\n[**ClickUp**](https://github.com/hauptsacheNet/clickup-mcp)\n\nTask management, project trackingCommand\n\n`claude mcp add --transport stdio clickup --env CLICKUP_API_KEY=YOUR_KEY --env CLICKUP_TEAM_ID=YOUR_ID -- npx -y @hauptsache.net/clickup-mcp`\n\n[**Intercom**](https://developers.intercom.com/docs/guides/mcp)\n\nAccess real-time customer conversations, tickets, and user dataCommand\n\n`claude mcp add --transport http intercom https://mcp.intercom.com/mcp`\n\n[**Linear**](https://linear.app/docs/mcp)\n\nIntegrate with Linear's issue tracking and project managementCommand\n\n`claude mcp add --transport http linear https://mcp.linear.app/mcp`\n\n[**Notion**](https://developers.notion.com/docs/mcp)\n\nRead docs, update pages, manage tasksCommand\n\n`claude mcp add --transport http notion https://mcp.notion.com/mcp`\n\n[**Box**](https://box.dev/guides/box-mcp/remote/)\n\nAsk questions about your enterprise content, get insights from unstructured data, automate content workflowsCommand\n\n`claude mcp add --transport http box https://mcp.box.com/`\n\n[**Fireflies**](https://guide.fireflies.ai/articles/8272956938-learn-about-the-fireflies-mcp-server-model-context-protocol)\n\nExtract valuable insights from meeting transcripts and summariesCommand\n\n`claude mcp add --transport http fireflies https://api.fireflies.ai/mcp`\n\n[**Monday**](https://developer.monday.com/apps/docs/mondaycom-mcp-integration)\n\nManage monday.com boards by creating items, updating columns, assigning owners, setting timelines, adding CRM activities, and writing summariesCommand\n\n`claude mcp add --transport sse monday https://mcp.monday.com/sse`\n\n### Databases & Data Management\n\n[**Airtable**](https://github.com/domdomegg/airtable-mcp-server)\n\nRead/write records, manage bases and tablesCommand\n\n`claude mcp add --transport stdio airtable --env AIRTABLE_API_KEY=YOUR_KEY -- npx -y airtable-mcp-server`\n\n[**Daloopa**](https://docs.daloopa.com/docs/daloopa-mcp)\n\nSupplies high quality fundamental financial data sourced from SEC Filings, investor presentationsCommand\n\n`claude mcp add --transport http daloopa https://mcp.daloopa.com/server/mcp`\n\n[**HubSpot**](https://developers.hubspot.com/mcp)\n\nAccess and manage HubSpot CRM data by fetching contacts, companies, and deals, and creating and updating recordsCommand\n\n`claude mcp add --transport http hubspot https://mcp.hubspot.com/anthropic`\n\n### Payments & Commerce\n\n[**PayPal**](https://www.paypal.ai/)\n\nIntegrate PayPal commerce capabilities, payment processing, transaction managementCommand\n\n`claude mcp add --transport http paypal https://mcp.paypal.com/mcp`\n\n[**Plaid**](https://plaid.com/blog/plaid-mcp-ai-assistant-claude/)\n\nAnalyze, troubleshoot, and optimize Plaid integrations. Banking data, financial account linkingCommand\n\n`claude mcp add --transport sse plaid https://api.dashboard.plaid.com/mcp/sse`\n\n[**Square**](https://developer.squareup.com/docs/mcp)\n\nUse an agent to build on Square APIs. Payments, inventory, orders, and moreCommand\n\n`claude mcp add --transport sse square https://mcp.squareup.com/sse`\n\n[**Stripe**](https://docs.stripe.com/mcp)\n\nPayment processing, subscription management, and financial transactionsCommand\n\n`claude mcp add --transport http stripe https://mcp.stripe.com`\n\n### Design & Media\n\n[**Figma**](https://developers.figma.com/)\n\nGenerate better code by bringing in full Figma contextVisit developers.figma.com for local server setup.Command\n\n`claude mcp add --transport http figma-remote-mcp https://mcp.figma.com/mcp`\n\n[**Cloudinary**](https://cloudinary.com/documentation/cloudinary_llm_mcp#mcp_servers)\n\nUpload, manage, transform, and analyze your media assetsMultiple services available. See documentation for specific server URLs.\n\n[**invideo**](https://invideo.io/ai/mcp)\n\nBuild video creation capabilities into your applicationsCommand\n\n`claude mcp add --transport sse invideo https://mcp.invideo.io/sse`\n\n[**Canva**](https://www.canva.dev/docs/connect/canva-mcp-server-setup/)\n\nBrowse, summarize, autofill, and even generate new Canva designs directly from ClaudeCommand\n\n`claude mcp add --transport http canva https://mcp.canva.com/mcp`\n\n### Infrastructure & DevOps\n\n[**Cloudflare**](https://developers.cloudflare.com/agents/model-context-protocol/mcp-servers-for-cloudflare/)\n\nBuild applications, analyze traffic, monitor performance, and manage security settings through CloudflareMultiple services available. See documentation for specific server URLs. Claude Code can use the Cloudflare CLI if installed.\n\n[**Netlify**](https://docs.netlify.com/build/build-with-ai/netlify-mcp-server/)\n\nCreate, deploy, and manage websites on Netlify. Control all aspects of your site from creating secrets to enforcing access controls to aggregating form submissionsCommand\n\n`claude mcp add --transport http netlify https://netlify-mcp.netlify.app/mcp`\n\n[**Stytch**](https://stytch.com/docs/workspace-management/stytch-mcp)\n\nConfigure and manage Stytch authentication services, redirect URLs, email templates, and workspace settingsCommand\n\n`claude mcp add --transport http stytch http://mcp.stytch.dev/mcp`\n\n[**Vercel**](https://vercel.com/docs/mcp/vercel-mcp)\n\nVercel's official MCP server, allowing you to search and navigate documentation, manage projects and deployments, and analyze deployment logs—all in one placeCommand\n\n`claude mcp add --transport http vercel https://mcp.vercel.com/`\n\n### Automation & Integration\n\n[**Workato**](https://docs.workato.com/mcp.html)\n\nAccess any application, workflows or data via Workato, made accessible for AIMCP servers are programmatically generated\n\n[**Zapier**](https://help.zapier.com/hc/en-us/articles/36265392843917)\n\nConnect to nearly 8,000 apps through Zapier's automation platformGenerate a user-specific URL at mcp.zapier.com\n\n**Need a specific integration?** [Find hundreds more MCP servers on GitHub](https://github.com/modelcontextprotocol/servers), or build your own using the [MCP SDK](https://modelcontextprotocol.io/quickstart/server).\n\n## [​](https://docs.claude.com/en/docs/claude-code/mcp\\#installing-mcp-servers)  Installing MCP servers\n\nMCP servers can be configured in three different ways depending on your needs:\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#option-1%3A-add-a-remote-http-server)  Option 1: Add a remote HTTP server\n\nHTTP servers are the recommended option for connecting to remote MCP servers. This is the most widely supported transport for cloud-based services.\n\nCopy\n\n```\n# Basic syntax\nclaude mcp add --transport http <name> <url>\n\n# Real example: Connect to Notion\nclaude mcp add --transport http notion https://mcp.notion.com/mcp\n\n# Example with Bearer token\nclaude mcp add --transport http secure-api https://api.example.com/mcp \\\n  --header \"Authorization: Bearer your-token\"\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#option-2%3A-add-a-remote-sse-server)  Option 2: Add a remote SSE server\n\nThe SSE (Server-Sent Events) transport is deprecated. Use HTTP servers instead, where available.\n\nCopy\n\n```\n# Basic syntax\nclaude mcp add --transport sse <name> <url>\n\n# Real example: Connect to Asana\nclaude mcp add --transport sse asana https://mcp.asana.com/sse\n\n# Example with authentication header\nclaude mcp add --transport sse private-api https://api.company.com/sse \\\n  --header \"X-API-Key: your-key-here\"\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#option-3%3A-add-a-local-stdio-server)  Option 3: Add a local stdio server\n\nStdio servers run as local processes on your machine. They’re ideal for tools that need direct system access or custom scripts.\n\nCopy\n\n```\n# Basic syntax\nclaude mcp add --transport stdio <name> <command> [args...]\n\n# Real example: Add Airtable server\nclaude mcp add --transport stdio airtable --env AIRTABLE_API_KEY=YOUR_KEY \\\n  -- npx -y airtable-mcp-server\n\n```\n\n**Understanding the ”—” parameter:**\nThe `--` (double dash) separates Claude’s own CLI flags from the command and arguments that get passed to the MCP server. Everything before `--` are options for Claude (like `--env`, `--scope`), and everything after `--` is the actual command to run the MCP server.For example:\n\n- `claude mcp add --transport stdio myserver -- npx server` → runs `npx server`\n- `claude mcp add --transport stdio myserver --env KEY=value -- python server.py --port 8080` → runs `python server.py --port 8080` with `KEY=value` in environment\n\nThis prevents conflicts between Claude’s flags and the server’s flags.\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#managing-your-servers)  Managing your servers\n\nOnce configured, you can manage your MCP servers with these commands:\n\nCopy\n\n```\n# List all configured servers\nclaude mcp list\n\n# Get details for a specific server\nclaude mcp get github\n\n# Remove a server\nclaude mcp remove github\n\n# (within Claude Code) Check server status\n/mcp\n\n```\n\nTips:\n\n- Use the `--scope` flag to specify where the configuration is stored:\n\n  - `local` (default): Available only to you in the current project (was called `project` in older versions)\n  - `project`: Shared with everyone in the project via `.mcp.json` file\n  - `user`: Available to you across all projects (was called `global` in older versions)\n- Set environment variables with `--env` flags (e.g., `--env KEY=value`)\n- Configure MCP server startup timeout using the MCP\\_TIMEOUT environment variable (e.g., `MCP_TIMEOUT=10000 claude` sets a 10-second timeout)\n- Claude Code will display a warning when MCP tool output exceeds 10,000 tokens. To increase this limit, set the `MAX_MCP_OUTPUT_TOKENS` environment variable (e.g., `MAX_MCP_OUTPUT_TOKENS=50000`)\n- Use `/mcp` to authenticate with remote servers that require OAuth 2.0 authentication\n\n**Windows Users**: On native Windows (not WSL), local MCP servers that use `npx` require the `cmd /c` wrapper to ensure proper execution.\n\nCopy\n\n```\n# This creates command=\"cmd\" which Windows can execute\nclaude mcp add --transport stdio my-server -- cmd /c npx -y @some/package\n\n```\n\nWithout the `cmd /c` wrapper, you’ll encounter “Connection closed” errors because Windows cannot directly execute `npx`. (See the note above for an explanation of the `--` parameter.)\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#plugin-provided-mcp-servers)  Plugin-provided MCP servers\n\n[Plugins](https://docs.claude.com/en/docs/claude-code/plugins) can bundle MCP servers, automatically providing tools and integrations when the plugin is enabled. Plugin MCP servers work identically to user-configured servers.**How plugin MCP servers work**:\n\n- Plugins define MCP servers in `.mcp.json` at the plugin root or inline in `plugin.json`\n- When a plugin is enabled, its MCP servers start automatically\n- Plugin MCP tools appear alongside manually configured MCP tools\n- Plugin servers are managed through plugin installation (not `/mcp` commands)\n\n**Example plugin MCP configuration**:In `.mcp.json` at plugin root:\n\nCopy\n\n```\n{\n  \"database-tools\": {\n    \"command\": \"${CLAUDE_PLUGIN_ROOT}/servers/db-server\",\n    \"args\": [\"--config\", \"${CLAUDE_PLUGIN_ROOT}/config.json\"],\n    \"env\": {\n      \"DB_URL\": \"${DB_URL}\"\n    }\n  }\n}\n\n```\n\nOr inline in `plugin.json`:\n\nCopy\n\n```\n{\n  \"name\": \"my-plugin\",\n  \"mcpServers\": {\n    \"plugin-api\": {\n      \"command\": \"${CLAUDE_PLUGIN_ROOT}/servers/api-server\",\n      \"args\": [\"--port\", \"8080\"]\n    }\n  }\n}\n\n```\n\n**Plugin MCP features**:\n\n- **Automatic lifecycle**: Servers start when plugin enables, but you must restart Claude Code to apply MCP server changes (enabling or disabling)\n- **Environment variables**: Use `${CLAUDE_PLUGIN_ROOT}` for plugin-relative paths\n- **User environment access**: Access to same environment variables as manually configured servers\n- **Multiple transport types**: Support stdio, SSE, and HTTP transports (transport support may vary by server)\n\n**Viewing plugin MCP servers**:\n\nCopy\n\n```\n# Within Claude Code, see all MCP servers including plugin ones\n/mcp\n\n```\n\nPlugin servers appear in the list with indicators showing they come from plugins.**Benefits of plugin MCP servers**:\n\n- **Bundled distribution**: Tools and servers packaged together\n- **Automatic setup**: No manual MCP configuration needed\n- **Team consistency**: Everyone gets the same tools when plugin is installed\n\nSee the [plugin components reference](https://docs.claude.com/en/docs/claude-code/plugins-reference#mcp-servers) for details on bundling MCP servers with plugins.\n\n## [​](https://docs.claude.com/en/docs/claude-code/mcp\\#mcp-installation-scopes)  MCP installation scopes\n\nMCP servers can be configured at three different scope levels, each serving distinct purposes for managing server accessibility and sharing. Understanding these scopes helps you determine the best way to configure servers for your specific needs.\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#local-scope)  Local scope\n\nLocal-scoped servers represent the default configuration level and are stored in your project-specific user settings. These servers remain private to you and are only accessible when working within the current project directory. This scope is ideal for personal development servers, experimental configurations, or servers containing sensitive credentials that shouldn’t be shared.\n\nCopy\n\n```\n# Add a local-scoped server (default)\nclaude mcp add --transport http stripe https://mcp.stripe.com\n\n# Explicitly specify local scope\nclaude mcp add --transport http stripe --scope local https://mcp.stripe.com\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#project-scope)  Project scope\n\nProject-scoped servers enable team collaboration by storing configurations in a `.mcp.json` file at your project’s root directory. This file is designed to be checked into version control, ensuring all team members have access to the same MCP tools and services. When you add a project-scoped server, Claude Code automatically creates or updates this file with the appropriate configuration structure.\n\nCopy\n\n```\n# Add a project-scoped server\nclaude mcp add --transport http paypal --scope project https://mcp.paypal.com/mcp\n\n```\n\nThe resulting `.mcp.json` file follows a standardized format:\n\nCopy\n\n```\n{\n  \"mcpServers\": {\n    \"shared-server\": {\n      \"command\": \"/path/to/server\",\n      \"args\": [],\n      \"env\": {}\n    }\n  }\n}\n\n```\n\nFor security reasons, Claude Code prompts for approval before using project-scoped servers from `.mcp.json` files. If you need to reset these approval choices, use the `claude mcp reset-project-choices` command.\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#user-scope)  User scope\n\nUser-scoped servers provide cross-project accessibility, making them available across all projects on your machine while remaining private to your user account. This scope works well for personal utility servers, development tools, or services you frequently use across different projects.\n\nCopy\n\n```\n# Add a user server\nclaude mcp add --transport http hubspot --scope user https://mcp.hubspot.com/anthropic\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#choosing-the-right-scope)  Choosing the right scope\n\nSelect your scope based on:\n\n- **Local scope**: Personal servers, experimental configurations, or sensitive credentials specific to one project\n- **Project scope**: Team-shared servers, project-specific tools, or services required for collaboration\n- **User scope**: Personal utilities needed across multiple projects, development tools, or frequently-used services\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#scope-hierarchy-and-precedence)  Scope hierarchy and precedence\n\nMCP server configurations follow a clear precedence hierarchy. When servers with the same name exist at multiple scopes, the system resolves conflicts by prioritizing local-scoped servers first, followed by project-scoped servers, and finally user-scoped servers. This design ensures that personal configurations can override shared ones when needed.\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#environment-variable-expansion-in-mcp-json)  Environment variable expansion in `.mcp.json`\n\nClaude Code supports environment variable expansion in `.mcp.json` files, allowing teams to share configurations while maintaining flexibility for machine-specific paths and sensitive values like API keys.**Supported syntax:**\n\n- `${VAR}` \\- Expands to the value of environment variable `VAR`\n- `${VAR:-default}` \\- Expands to `VAR` if set, otherwise uses `default`\n\n**Expansion locations:**\nEnvironment variables can be expanded in:\n\n- `command` \\- The server executable path\n- `args` \\- Command-line arguments\n- `env` \\- Environment variables passed to the server\n- `url` \\- For HTTP server types\n- `headers` \\- For HTTP server authentication\n\n**Example with variable expansion:**\n\nCopy\n\n```\n{\n  \"mcpServers\": {\n    \"api-server\": {\n      \"type\": \"http\",\n      \"url\": \"${API_BASE_URL:-https://api.example.com}/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Bearer ${API_KEY}\"\n      }\n    }\n  }\n}\n\n```\n\nIf a required environment variable is not set and has no default value, Claude Code will fail to parse the config.\n\n## [​](https://docs.claude.com/en/docs/claude-code/mcp\\#practical-examples)  Practical examples\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#example%3A-monitor-errors-with-sentry)  Example: Monitor errors with Sentry\n\nCopy\n\n```\n# 1. Add the Sentry MCP server\nclaude mcp add --transport http sentry https://mcp.sentry.dev/mcp\n\n# 2. Use /mcp to authenticate with your Sentry account\n> /mcp\n\n# 3. Debug production issues\n> \"What are the most common errors in the last 24 hours?\"\n> \"Show me the stack trace for error ID abc123\"\n> \"Which deployment introduced these new errors?\"\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#example%3A-connect-to-github-for-code-reviews)  Example: Connect to GitHub for code reviews\n\nCopy\n\n```\n# 1. Add the GitHub MCP server\nclaude mcp add --transport http github https://api.githubcopilot.com/mcp/\n\n# 2. In Claude Code, authenticate if needed\n> /mcp\n# Select \"Authenticate\" for GitHub\n\n# 3. Now you can ask Claude to work with GitHub\n> \"Review PR #456 and suggest improvements\"\n> \"Create a new issue for the bug we just found\"\n> \"Show me all open PRs assigned to me\"\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#example%3A-query-your-postgresql-database)  Example: Query your PostgreSQL database\n\nCopy\n\n```\n# 1. Add the database server with your connection string\nclaude mcp add --transport stdio db -- npx -y @bytebase/dbhub \\\n  --dsn \"postgresql://readonly:pass@prod.db.com:5432/analytics\"\n\n# 2. Query your database naturally\n> \"What's our total revenue this month?\"\n> \"Show me the schema for the orders table\"\n> \"Find customers who haven't made a purchase in 90 days\"\n\n```\n\n## [​](https://docs.claude.com/en/docs/claude-code/mcp\\#authenticate-with-remote-mcp-servers)  Authenticate with remote MCP servers\n\nMany cloud-based MCP servers require authentication. Claude Code supports OAuth 2.0 for secure connections.\n\n1\n\nAdd the server that requires authentication\n\nFor example:\n\nCopy\n\n```\nclaude mcp add --transport http sentry https://mcp.sentry.dev/mcp\n\n```\n\n2\n\nUse the /mcp command within Claude Code\n\nIn Claude code, use the command:\n\nCopy\n\n```\n> /mcp\n\n```\n\nThen follow the steps in your browser to login.\n\nTips:\n\n- Authentication tokens are stored securely and refreshed automatically\n- Use “Clear authentication” in the `/mcp` menu to revoke access\n- If your browser doesn’t open automatically, copy the provided URL\n- OAuth authentication works with HTTP servers\n\n## [​](https://docs.claude.com/en/docs/claude-code/mcp\\#add-mcp-servers-from-json-configuration)  Add MCP servers from JSON configuration\n\nIf you have a JSON configuration for an MCP server, you can add it directly:\n\n1\n\nAdd an MCP server from JSON\n\nCopy\n\n```\n# Basic syntax\nclaude mcp add-json <name> '<json>'\n\n# Example: Adding an HTTP server with JSON configuration\nclaude mcp add-json weather-api '{\"type\":\"http\",\"url\":\"https://api.weather.com/mcp\",\"headers\":{\"Authorization\":\"Bearer token\"}}'\n\n# Example: Adding a stdio server with JSON configuration\nclaude mcp add-json local-weather '{\"type\":\"stdio\",\"command\":\"/path/to/weather-cli\",\"args\":[\"--api-key\",\"abc123\"],\"env\":{\"CACHE_DIR\":\"/tmp\"}}'\n\n```\n\n2\n\nVerify the server was added\n\nCopy\n\n```\nclaude mcp get weather-api\n\n```\n\nTips:\n\n- Make sure the JSON is properly escaped in your shell\n- The JSON must conform to the MCP server configuration schema\n- You can use `--scope user` to add the server to your user configuration instead of the project-specific one\n\n## [​](https://docs.claude.com/en/docs/claude-code/mcp\\#import-mcp-servers-from-claude-desktop)  Import MCP servers from Claude Desktop\n\nIf you’ve already configured MCP servers in Claude Desktop, you can import them:\n\n1\n\nImport servers from Claude Desktop\n\nCopy\n\n```\n# Basic syntax\nclaude mcp add-from-claude-desktop\n\n```\n\n2\n\nSelect which servers to import\n\nAfter running the command, you’ll see an interactive dialog that allows you to select which servers you want to import.\n\n3\n\nVerify the servers were imported\n\nCopy\n\n```\nclaude mcp list\n\n```\n\nTips:\n\n- This feature only works on macOS and Windows Subsystem for Linux (WSL)\n- It reads the Claude Desktop configuration file from its standard location on those platforms\n- Use the `--scope user` flag to add servers to your user configuration\n- Imported servers will have the same names as in Claude Desktop\n- If servers with the same names already exist, they will get a numerical suffix (e.g., `server_1`)\n\n## [​](https://docs.claude.com/en/docs/claude-code/mcp\\#use-claude-code-as-an-mcp-server)  Use Claude Code as an MCP server\n\nYou can use Claude Code itself as an MCP server that other applications can connect to:\n\nCopy\n\n```\n# Start Claude as a stdio MCP server\nclaude mcp serve\n\n```\n\nYou can use this in Claude Desktop by adding this configuration to claude\\_desktop\\_config.json:\n\nCopy\n\n```\n{\n  \"mcpServers\": {\n    \"claude-code\": {\n      \"type\": \"stdio\",\n      \"command\": \"claude\",\n      \"args\": [\"mcp\", \"serve\"],\n      \"env\": {}\n    }\n  }\n}\n\n```\n\nTips:\n\n- The server provides access to Claude’s tools like View, Edit, LS, etc.\n- In Claude Desktop, try asking Claude to read files in a directory, make edits, and more.\n- Note that this MCP server is simply exposing Claude Code’s tools to your MCP client, so your own client is responsible for implementing user confirmation for individual tool calls.\n\n## [​](https://docs.claude.com/en/docs/claude-code/mcp\\#mcp-output-limits-and-warnings)  MCP output limits and warnings\n\nWhen MCP tools produce large outputs, Claude Code helps manage the token usage to prevent overwhelming your conversation context:\n\n- **Output warning threshold**: Claude Code displays a warning when any MCP tool output exceeds 10,000 tokens\n- **Configurable limit**: You can adjust the maximum allowed MCP output tokens using the `MAX_MCP_OUTPUT_TOKENS` environment variable\n- **Default limit**: The default maximum is 25,000 tokens\n\nTo increase the limit for tools that produce large outputs:\n\nCopy\n\n```\n# Set a higher limit for MCP tool outputs\nexport MAX_MCP_OUTPUT_TOKENS=50000\nclaude\n\n```\n\nThis is particularly useful when working with MCP servers that:\n\n- Query large datasets or databases\n- Generate detailed reports or documentation\n- Process extensive log files or debugging information\n\nIf you frequently encounter output warnings with specific MCP servers, consider increasing the limit or configuring the server to paginate or filter its responses.\n\n## [​](https://docs.claude.com/en/docs/claude-code/mcp\\#use-mcp-resources)  Use MCP resources\n\nMCP servers can expose resources that you can reference using @ mentions, similar to how you reference files.\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#reference-mcp-resources)  Reference MCP resources\n\n1\n\nList available resources\n\nType `@` in your prompt to see available resources from all connected MCP servers. Resources appear alongside files in the autocomplete menu.\n\n2\n\nReference a specific resource\n\nUse the format `@server:protocol://resource/path` to reference a resource:\n\nCopy\n\n```\n> Can you analyze @github:issue://123 and suggest a fix?\n\n```\n\nCopy\n\n```\n> Please review the API documentation at @docs:file://api/authentication\n\n```\n\n3\n\nMultiple resource references\n\nYou can reference multiple resources in a single prompt:\n\nCopy\n\n```\n> Compare @postgres:schema://users with @docs:file://database/user-model\n\n```\n\nTips:\n\n- Resources are automatically fetched and included as attachments when referenced\n- Resource paths are fuzzy-searchable in the @ mention autocomplete\n- Claude Code automatically provides tools to list and read MCP resources when servers support them\n- Resources can contain any type of content that the MCP server provides (text, JSON, structured data, etc.)\n\n## [​](https://docs.claude.com/en/docs/claude-code/mcp\\#use-mcp-prompts-as-slash-commands)  Use MCP prompts as slash commands\n\nMCP servers can expose prompts that become available as slash commands in Claude Code.\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#execute-mcp-prompts)  Execute MCP prompts\n\n1\n\nDiscover available prompts\n\nType `/` to see all available commands, including those from MCP servers. MCP prompts appear with the format `/mcp__servername__promptname`.\n\n2\n\nExecute a prompt without arguments\n\nCopy\n\n```\n> /mcp__github__list_prs\n\n```\n\n3\n\nExecute a prompt with arguments\n\nMany prompts accept arguments. Pass them space-separated after the command:\n\nCopy\n\n```\n> /mcp__github__pr_review 456\n\n```\n\nCopy\n\n```\n> /mcp__jira__create_issue \"Bug in login flow\" high\n\n```\n\nTips:\n\n- MCP prompts are dynamically discovered from connected servers\n- Arguments are parsed based on the prompt’s defined parameters\n- Prompt results are injected directly into the conversation\n- Server and prompt names are normalized (spaces become underscores)\n\n## [​](https://docs.claude.com/en/docs/claude-code/mcp\\#enterprise-mcp-configuration)  Enterprise MCP configuration\n\nFor organizations that need centralized control over MCP servers, Claude Code supports enterprise-managed MCP configurations. This allows IT administrators to:\n\n- **Control which MCP servers employees can access**: Deploy a standardized set of approved MCP servers across the organization\n- **Prevent unauthorized MCP servers**: Optionally restrict users from adding their own MCP servers\n- **Disable MCP entirely**: Remove MCP functionality completely if needed\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#setting-up-enterprise-mcp-configuration)  Setting up enterprise MCP configuration\n\nSystem administrators can deploy an enterprise MCP configuration file alongside the managed settings file:\n\n- **macOS**: `/Library/Application Support/ClaudeCode/managed-mcp.json`\n- **Windows**: `C:\\ProgramData\\ClaudeCode\\managed-mcp.json`\n- **Linux**: `/etc/claude-code/managed-mcp.json`\n\nThe `managed-mcp.json` file uses the same format as a standard `.mcp.json` file:\n\nCopy\n\n```\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"type\": \"http\",\n      \"url\": \"https://api.githubcopilot.com/mcp/\"\n    },\n    \"sentry\": {\n      \"type\": \"http\",\n      \"url\": \"https://mcp.sentry.dev/mcp\"\n    },\n    \"company-internal\": {\n      \"type\": \"stdio\",\n      \"command\": \"/usr/local/bin/company-mcp-server\",\n      \"args\": [\"--config\", \"/etc/company/mcp-config.json\"],\n      \"env\": {\n        \"COMPANY_API_URL\": \"https://internal.company.com\"\n      }\n    }\n  }\n}\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/mcp\\#restricting-mcp-servers-with-allowlists-and-denylists)  Restricting MCP servers with allowlists and denylists\n\nIn addition to providing enterprise-managed servers, administrators can control which MCP servers users are allowed to configure using `allowedMcpServers` and `deniedMcpServers` in the `managed-settings.json` file:\n\n- **macOS**: `/Library/Application Support/ClaudeCode/managed-settings.json`\n- **Windows**: `C:\\ProgramData\\ClaudeCode\\managed-settings.json`\n- **Linux**: `/etc/claude-code/managed-settings.json`\n\nCopy\n\n```\n{\n  \"allowedMcpServers\": [\\\n    { \"serverName\": \"github\" },\\\n    { \"serverName\": \"sentry\" },\\\n    { \"serverName\": \"company-internal\" }\\\n  ],\n  \"deniedMcpServers\": [\\\n    { \"serverName\": \"filesystem\" }\\\n  ]\n}\n\n```\n\n**Allowlist behavior ( `allowedMcpServers`)**:\n\n- `undefined` (default): No restrictions - users can configure any MCP server\n- Empty array `[]`: Complete lockdown - users cannot configure any MCP servers\n- List of server names: Users can only configure the specified servers\n\n**Denylist behavior ( `deniedMcpServers`)**:\n\n- `undefined` (default): No servers are blocked\n- Empty array `[]`: No servers are blocked\n- List of server names: Specified servers are explicitly blocked across all scopes\n\n**Important notes**:\n\n- These restrictions apply to all scopes: user, project, local, and even enterprise servers from `managed-mcp.json`\n- **Denylist takes absolute precedence**: If a server appears in both lists, it will be blocked\n\n**Enterprise configuration precedence**: The enterprise MCP configuration has the highest precedence and cannot be overridden by user, local, or project configurations when `useEnterpriseMcpConfigOnly` is enabled.\n\nWas this page helpful?\n\nYesNo\n\n[GitLab CI/CD](https://docs.claude.com/en/docs/claude-code/gitlab-ci-cd) [Troubleshooting](https://docs.claude.com/en/docs/claude-code/troubleshooting)\n\nAssistant\n\nResponses are generated using AI and may contain mistakes.\n\n[Claude Docs home page![light logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/light.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=c877c45432515ee69194cb19e9f983a2)![dark logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/dark.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=f5bb877be0cb3cba86cf6d7c88185216)](https://docs.claude.com/)\n\n[x](https://x.com/AnthropicAI) [linkedin](https://www.linkedin.com/company/anthropicresearch)\n\nCompany\n\n[Anthropic](https://www.anthropic.com/company) [Careers](https://www.anthropic.com/careers) [Economic Futures](https://www.anthropic.com/economic-futures) [Research](https://www.anthropic.com/research) [News](https://www.anthropic.com/news) [Trust center](https://trust.anthropic.com/) [Transparency](https://www.anthropic.com/transparency)\n\nHelp and security\n\n[Availability](https://www.anthropic.com/supported-countries) [Status](https://status.anthropic.com/) [Support center](https://support.claude.com/)\n\nLearn\n\n[Courses](https://www.anthropic.com/learn) [MCP connectors](https://claude.com/partners/mcp) [Customer stories](https://www.claude.com/customers) [Engineering blog](https://www.anthropic.com/engineering) [Events](https://www.anthropic.com/events) [Powered by Claude](https://claude.com/partners/powered-by-claude) [Service partners](https://claude.com/partners/services) [Startups program](https://claude.com/programs/startups)\n\nTerms and policies\n\n[Privacy policy](https://www.anthropic.com/legal/privacy) [Disclosure policy](https://www.anthropic.com/responsible-disclosure-policy) [Usage policy](https://www.anthropic.com/legal/aup) [Commercial terms](https://www.anthropic.com/legal/commercial-terms) [Consumer terms](https://www.anthropic.com/legal/consumer-terms)\n\nAsk Docs\nAI Avatar",
  "metadata": {
    "ogTitle": "Connect Claude Code to tools via MCP - Claude Docs",
    "charset": "utf-8",
    "twitter:description": "Learn how to connect Claude Code to your tools with the Model Context Protocol.",
    "twitter:image:width": "1200",
    "next-size-adjust": "",
    "twitter:image:height": "630",
    "viewport": "width=device-width, initial-scale=1",
    "og:type": "website",
    "og:description": "Learn how to connect Claude Code to your tools with the Model Context Protocol.",
    "title": "Connect Claude Code to tools via MCP - Claude Docs",
    "application-name": "Claude Docs",
    "ogImage": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DBuild%2Bwith%2BClaude%2BCode%26appearance%3Dlight%26title%3DConnect%2BClaude%2BCode%2Bto%2Btools%2Bvia%2BMCP%26description%3DLearn%2Bhow%2Bto%2Bconnect%2BClaude%2BCode%2Bto%2Byour%2Btools%2Bwith%2Bthe%2BModel%2BContext%2BProtocol.%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "ogDescription": "Learn how to connect Claude Code to your tools with the Model Context Protocol.",
    "favicon": "https://mintcdn.com/anthropic-claude-docs/JaG275Sqw0maE7Ce/_generated/favicon/favicon-16x16.png?fit=max&n=JaG275Sqw0maE7Ce&s=b20efcf65eab17019f139f435bec262e",
    "msapplication-TileColor": "#0E0E0E",
    "og:site_name": "Claude Docs",
    "language": "en",
    "generator": "Mintlify",
    "og:title": "Connect Claude Code to tools via MCP - Claude Docs",
    "msapplication-config": "https://mintcdn.com/anthropic-claude-docs/JaG275Sqw0maE7Ce/_generated/favicon/browserconfig.xml?n=JaG275Sqw0maE7Ce&s=31cc0bae38445be839155997a2084e7e",
    "og:image": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DBuild%2Bwith%2BClaude%2BCode%26appearance%3Dlight%26title%3DConnect%2BClaude%2BCode%2Bto%2Btools%2Bvia%2BMCP%26description%3DLearn%2Bhow%2Bto%2Bconnect%2BClaude%2BCode%2Bto%2Byour%2Btools%2Bwith%2Bthe%2BModel%2BContext%2BProtocol.%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "description": "Learn how to connect Claude Code to your tools with the Model Context Protocol.",
    "og:image:width": "1200",
    "og:image:height": "630",
    "apple-mobile-web-app-title": "Claude Docs",
    "twitter:card": "summary_large_image",
    "twitter:title": "Connect Claude Code to tools via MCP - Claude Docs",
    "twitter:image": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DBuild%2Bwith%2BClaude%2BCode%26appearance%3Dlight%26title%3DConnect%2BClaude%2BCode%2Bto%2Btools%2Bvia%2BMCP%26description%3DLearn%2Bhow%2Bto%2Bconnect%2BClaude%2BCode%2Bto%2Byour%2Btools%2Bwith%2Bthe%2BModel%2BContext%2BProtocol.%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "scrapeId": "0c4a8a73-2eb8-4316-a940-cf940b44494b",
    "sourceURL": "https://docs.claude.com/en/docs/claude-code/mcp",
    "url": "https://docs.claude.com/en/docs/claude-code/mcp",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic",
    "cacheState": "hit",
    "cachedAt": "2025-10-22T00:57:42.792Z",
    "creditsUsed": 1
  }
}