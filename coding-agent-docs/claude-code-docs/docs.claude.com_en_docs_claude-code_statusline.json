{
  "markdown": "[Claude Docs home page![light logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/light.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=c877c45432515ee69194cb19e9f983a2)![dark logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/dark.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=f5bb877be0cb3cba86cf6d7c88185216)](https://docs.claude.com/)\n\n![US](https://d3gk2c5xim1je2.cloudfront.net/flags/US.svg)\n\nEnglish\n\nSearch...\n\nCtrl K\n\n- [Console](https://console.anthropic.com/login)\n- [Support](https://support.claude.com/)\n- [Discord](https://www.anthropic.com/discord)\n- [Sign up](https://console.anthropic.com/login)\n- [Sign up](https://console.anthropic.com/login)\n\nSearch...\n\nNavigation\n\nConfiguration\n\nStatus line configuration\n\n[Welcome](https://docs.claude.com/en/home) [Claude Developer Platform](https://docs.claude.com/en/docs/intro) [Claude Code](https://docs.claude.com/en/docs/claude-code/overview) [Model Context Protocol (MCP)](https://docs.claude.com/en/docs/mcp) [API Reference](https://docs.claude.com/en/api/messages) [Resources](https://docs.claude.com/en/resources/overview) [Release Notes](https://docs.claude.com/en/release-notes/overview)\n\n##### Getting started\n\n- [Overview](https://docs.claude.com/en/docs/claude-code/overview)\n- [Quickstart](https://docs.claude.com/en/docs/claude-code/quickstart)\n- [Common workflows](https://docs.claude.com/en/docs/claude-code/common-workflows)\n- [Claude Code on the web](https://docs.claude.com/en/docs/claude-code/claude-code-on-the-web)\n\n##### Build with Claude Code\n\n- [Subagents](https://docs.claude.com/en/docs/claude-code/sub-agents)\n- [Plugins](https://docs.claude.com/en/docs/claude-code/plugins)\n- [Agent Skills](https://docs.claude.com/en/docs/claude-code/skills)\n- [Output styles](https://docs.claude.com/en/docs/claude-code/output-styles)\n- [Hooks](https://docs.claude.com/en/docs/claude-code/hooks-guide)\n- [Headless mode](https://docs.claude.com/en/docs/claude-code/headless)\n- [GitHub Actions](https://docs.claude.com/en/docs/claude-code/github-actions)\n- [GitLab CI/CD](https://docs.claude.com/en/docs/claude-code/gitlab-ci-cd)\n- [Model Context Protocol (MCP)](https://docs.claude.com/en/docs/claude-code/mcp)\n- [Troubleshooting](https://docs.claude.com/en/docs/claude-code/troubleshooting)\n\n##### Claude Agent SDK\n\n- [Migrate to Claude Agent SDK](https://docs.claude.com/en/docs/claude-code/sdk/migration-guide)\n\n##### Deployment\n\n- [Overview](https://docs.claude.com/en/docs/claude-code/third-party-integrations)\n- [Amazon Bedrock](https://docs.claude.com/en/docs/claude-code/amazon-bedrock)\n- [Google Vertex AI](https://docs.claude.com/en/docs/claude-code/google-vertex-ai)\n- [Network configuration](https://docs.claude.com/en/docs/claude-code/network-config)\n- [LLM gateway](https://docs.claude.com/en/docs/claude-code/llm-gateway)\n- [Development containers](https://docs.claude.com/en/docs/claude-code/devcontainer)\n- [Sandboxing](https://docs.claude.com/en/docs/claude-code/sandboxing)\n\n##### Administration\n\n- [Advanced installation](https://docs.claude.com/en/docs/claude-code/setup)\n- [Identity and Access Management](https://docs.claude.com/en/docs/claude-code/iam)\n- [Security](https://docs.claude.com/en/docs/claude-code/security)\n- [Data usage](https://docs.claude.com/en/docs/claude-code/data-usage)\n- [Monitoring](https://docs.claude.com/en/docs/claude-code/monitoring-usage)\n- [Costs](https://docs.claude.com/en/docs/claude-code/costs)\n- [Analytics](https://docs.claude.com/en/docs/claude-code/analytics)\n- [Plugin marketplaces](https://docs.claude.com/en/docs/claude-code/plugin-marketplaces)\n\n##### Configuration\n\n- [Settings](https://docs.claude.com/en/docs/claude-code/settings)\n- [Visual Studio Code](https://docs.claude.com/en/docs/claude-code/vs-code)\n- [JetBrains IDEs](https://docs.claude.com/en/docs/claude-code/jetbrains)\n- [Terminal configuration](https://docs.claude.com/en/docs/claude-code/terminal-config)\n- [Model configuration](https://docs.claude.com/en/docs/claude-code/model-config)\n- [Memory management](https://docs.claude.com/en/docs/claude-code/memory)\n- [Status line configuration](https://docs.claude.com/en/docs/claude-code/statusline)\n\n##### Reference\n\n- [CLI reference](https://docs.claude.com/en/docs/claude-code/cli-reference)\n- [Interactive mode](https://docs.claude.com/en/docs/claude-code/interactive-mode)\n- [Slash commands](https://docs.claude.com/en/docs/claude-code/slash-commands)\n- [Checkpointing](https://docs.claude.com/en/docs/claude-code/checkpointing)\n- [Hooks reference](https://docs.claude.com/en/docs/claude-code/hooks)\n- [Plugins reference](https://docs.claude.com/en/docs/claude-code/plugins-reference)\n\n##### Resources\n\n- [Legal and compliance](https://docs.claude.com/en/docs/claude-code/legal-and-compliance)\n\nOn this page\n\n- [Create a custom status line](https://docs.claude.com/en/docs/claude-code/statusline#create-a-custom-status-line)\n- [How it Works](https://docs.claude.com/en/docs/claude-code/statusline#how-it-works)\n- [JSON Input Structure](https://docs.claude.com/en/docs/claude-code/statusline#json-input-structure)\n- [Example Scripts](https://docs.claude.com/en/docs/claude-code/statusline#example-scripts)\n- [Simple Status Line](https://docs.claude.com/en/docs/claude-code/statusline#simple-status-line)\n- [Git-Aware Status Line](https://docs.claude.com/en/docs/claude-code/statusline#git-aware-status-line)\n- [Python Example](https://docs.claude.com/en/docs/claude-code/statusline#python-example)\n- [Node.js Example](https://docs.claude.com/en/docs/claude-code/statusline#node-js-example)\n- [Helper Function Approach](https://docs.claude.com/en/docs/claude-code/statusline#helper-function-approach)\n- [Tips](https://docs.claude.com/en/docs/claude-code/statusline#tips)\n- [Troubleshooting](https://docs.claude.com/en/docs/claude-code/statusline#troubleshooting)\n\nConfiguration\n\n# Status line configuration\n\nCopy page\n\nCreate a custom status line for Claude Code to display contextual information\n\nCopy page\n\nMake Claude Code your own with a custom status line that displays at the bottom of the Claude Code interface, similar to how terminal prompts (PS1) work in shells like Oh-my-zsh.\n\n## [‚Äã](https://docs.claude.com/en/docs/claude-code/statusline\\#create-a-custom-status-line)  Create a custom status line\n\nYou can either:\n\n- Run `/statusline` to ask Claude Code to help you set up a custom status line. By default, it will try to reproduce your terminal‚Äôs prompt, but you can provide additional instructions about the behavior you want to Claude Code, such as `/statusline show the model name in orange`\n- Directly add a `statusLine` command to your `.claude/settings.json`:\n\nCopy\n\n```\n{\n  \"statusLine\": {\n    \"type\": \"command\",\n    \"command\": \"~/.claude/statusline.sh\",\n    \"padding\": 0 // Optional: set to 0 to let status line go to edge\n  }\n}\n\n```\n\n## [‚Äã](https://docs.claude.com/en/docs/claude-code/statusline\\#how-it-works)  How it Works\n\n- The status line is updated when the conversation messages update\n- Updates run at most every 300ms\n- The first line of stdout from your command becomes the status line text\n- ANSI color codes are supported for styling your status line\n- Claude Code passes contextual information about the current session (model, directories, etc.) as JSON to your script via stdin\n\n## [‚Äã](https://docs.claude.com/en/docs/claude-code/statusline\\#json-input-structure)  JSON Input Structure\n\nYour status line command receives structured data via stdin in JSON format:\n\nCopy\n\n```\n{\n  \"hook_event_name\": \"Status\",\n  \"session_id\": \"abc123...\",\n  \"transcript_path\": \"/path/to/transcript.json\",\n  \"cwd\": \"/current/working/directory\",\n  \"model\": {\n    \"id\": \"claude-opus-4-1\",\n    \"display_name\": \"Opus\"\n  },\n  \"workspace\": {\n    \"current_dir\": \"/current/working/directory\",\n    \"project_dir\": \"/original/project/directory\"\n  },\n  \"version\": \"1.0.80\",\n  \"output_style\": {\n    \"name\": \"default\"\n  },\n  \"cost\": {\n    \"total_cost_usd\": 0.01234,\n    \"total_duration_ms\": 45000,\n    \"total_api_duration_ms\": 2300,\n    \"total_lines_added\": 156,\n    \"total_lines_removed\": 23\n  }\n}\n\n```\n\n## [‚Äã](https://docs.claude.com/en/docs/claude-code/statusline\\#example-scripts)  Example Scripts\n\n### [‚Äã](https://docs.claude.com/en/docs/claude-code/statusline\\#simple-status-line)  Simple Status Line\n\nCopy\n\n```\n#!/bin/bash\n# Read JSON input from stdin\ninput=$(cat)\n\n# Extract values using jq\nMODEL_DISPLAY=$(echo \"$input\" | jq -r '.model.display_name')\nCURRENT_DIR=$(echo \"$input\" | jq -r '.workspace.current_dir')\n\necho \"[$MODEL_DISPLAY] üìÅ ${CURRENT_DIR##*/}\"\n\n```\n\n### [‚Äã](https://docs.claude.com/en/docs/claude-code/statusline\\#git-aware-status-line)  Git-Aware Status Line\n\nCopy\n\n```\n#!/bin/bash\n# Read JSON input from stdin\ninput=$(cat)\n\n# Extract values using jq\nMODEL_DISPLAY=$(echo \"$input\" | jq -r '.model.display_name')\nCURRENT_DIR=$(echo \"$input\" | jq -r '.workspace.current_dir')\n\n# Show git branch if in a git repo\nGIT_BRANCH=\"\"\nif git rev-parse --git-dir > /dev/null 2>&1; then\n    BRANCH=$(git branch --show-current 2>/dev/null)\n    if [ -n \"$BRANCH\" ]; then\n        GIT_BRANCH=\" | üåø $BRANCH\"\n    fi\nfi\n\necho \"[$MODEL_DISPLAY] üìÅ ${CURRENT_DIR##*/}$GIT_BRANCH\"\n\n```\n\n### [‚Äã](https://docs.claude.com/en/docs/claude-code/statusline\\#python-example)  Python Example\n\nCopy\n\n```\n#!/usr/bin/env python3\nimport json\nimport sys\nimport os\n\n# Read JSON from stdin\ndata = json.load(sys.stdin)\n\n# Extract values\nmodel = data['model']['display_name']\ncurrent_dir = os.path.basename(data['workspace']['current_dir'])\n\n# Check for git branch\ngit_branch = \"\"\nif os.path.exists('.git'):\n    try:\n        with open('.git/HEAD', 'r') as f:\n            ref = f.read().strip()\n            if ref.startswith('ref: refs/heads/'):\n                git_branch = f\" | üåø {ref.replace('ref: refs/heads/', '')}\"\n    except:\n        pass\n\nprint(f\"[{model}] üìÅ {current_dir}{git_branch}\")\n\n```\n\n### [‚Äã](https://docs.claude.com/en/docs/claude-code/statusline\\#node-js-example)  Node.js Example\n\nCopy\n\n```\n#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Read JSON from stdin\nlet input = '';\nprocess.stdin.on('data', chunk => input += chunk);\nprocess.stdin.on('end', () => {\n    const data = JSON.parse(input);\n\n    // Extract values\n    const model = data.model.display_name;\n    const currentDir = path.basename(data.workspace.current_dir);\n\n    // Check for git branch\n    let gitBranch = '';\n    try {\n        const headContent = fs.readFileSync('.git/HEAD', 'utf8').trim();\n        if (headContent.startsWith('ref: refs/heads/')) {\n            gitBranch = ` | üåø ${headContent.replace('ref: refs/heads/', '')}`;\n        }\n    } catch (e) {\n        // Not a git repo or can't read HEAD\n    }\n\n    console.log(`[${model}] üìÅ ${currentDir}${gitBranch}`);\n});\n\n```\n\n### [‚Äã](https://docs.claude.com/en/docs/claude-code/statusline\\#helper-function-approach)  Helper Function Approach\n\nFor more complex bash scripts, you can create helper functions:\n\nCopy\n\n```\n#!/bin/bash\n# Read JSON input once\ninput=$(cat)\n\n# Helper functions for common extractions\nget_model_name() { echo \"$input\" | jq -r '.model.display_name'; }\nget_current_dir() { echo \"$input\" | jq -r '.workspace.current_dir'; }\nget_project_dir() { echo \"$input\" | jq -r '.workspace.project_dir'; }\nget_version() { echo \"$input\" | jq -r '.version'; }\nget_cost() { echo \"$input\" | jq -r '.cost.total_cost_usd'; }\nget_duration() { echo \"$input\" | jq -r '.cost.total_duration_ms'; }\nget_lines_added() { echo \"$input\" | jq -r '.cost.total_lines_added'; }\nget_lines_removed() { echo \"$input\" | jq -r '.cost.total_lines_removed'; }\n\n# Use the helpers\nMODEL=$(get_model_name)\nDIR=$(get_current_dir)\necho \"[$MODEL] üìÅ ${DIR##*/}\"\n\n```\n\n## [‚Äã](https://docs.claude.com/en/docs/claude-code/statusline\\#tips)  Tips\n\n- Keep your status line concise - it should fit on one line\n- Use emojis (if your terminal supports them) and colors to make information scannable\n- Use `jq` for JSON parsing in Bash (see examples above)\n- Test your script by running it manually with mock JSON input: `echo '{\"model\":{\"display_name\":\"Test\"},\"workspace\":{\"current_dir\":\"/test\"}}' | ./statusline.sh`\n- Consider caching expensive operations (like git status) if needed\n\n## [‚Äã](https://docs.claude.com/en/docs/claude-code/statusline\\#troubleshooting)  Troubleshooting\n\n- If your status line doesn‚Äôt appear, check that your script is executable ( `chmod +x`)\n- Ensure your script outputs to stdout (not stderr)\n\nWas this page helpful?\n\nYesNo\n\n[Memory management](https://docs.claude.com/en/docs/claude-code/memory) [CLI reference](https://docs.claude.com/en/docs/claude-code/cli-reference)\n\nAssistant\n\nResponses are generated using AI and may contain mistakes.\n\n[Claude Docs home page![light logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/light.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=c877c45432515ee69194cb19e9f983a2)![dark logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/dark.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=f5bb877be0cb3cba86cf6d7c88185216)](https://docs.claude.com/)\n\n[x](https://x.com/AnthropicAI) [linkedin](https://www.linkedin.com/company/anthropicresearch)\n\nCompany\n\n[Anthropic](https://www.anthropic.com/company) [Careers](https://www.anthropic.com/careers) [Economic Futures](https://www.anthropic.com/economic-futures) [Research](https://www.anthropic.com/research) [News](https://www.anthropic.com/news) [Trust center](https://trust.anthropic.com/) [Transparency](https://www.anthropic.com/transparency)\n\nHelp and security\n\n[Availability](https://www.anthropic.com/supported-countries) [Status](https://status.anthropic.com/) [Support center](https://support.claude.com/)\n\nLearn\n\n[Courses](https://www.anthropic.com/learn) [MCP connectors](https://claude.com/partners/mcp) [Customer stories](https://www.claude.com/customers) [Engineering blog](https://www.anthropic.com/engineering) [Events](https://www.anthropic.com/events) [Powered by Claude](https://claude.com/partners/powered-by-claude) [Service partners](https://claude.com/partners/services) [Startups program](https://claude.com/programs/startups)\n\nTerms and policies\n\n[Privacy policy](https://www.anthropic.com/legal/privacy) [Disclosure policy](https://www.anthropic.com/responsible-disclosure-policy) [Usage policy](https://www.anthropic.com/legal/aup) [Commercial terms](https://www.anthropic.com/legal/commercial-terms) [Consumer terms](https://www.anthropic.com/legal/consumer-terms)\n\nAsk Docs\nAI Avatar",
  "metadata": {
    "og:type": "website",
    "og:title": "Status line configuration - Claude Docs",
    "twitter:description": "Create a custom status line for Claude Code to display contextual information",
    "ogDescription": "Create a custom status line for Claude Code to display contextual information",
    "og:image:height": "630",
    "og:image": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DConfiguration%26appearance%3Dlight%26title%3DStatus%2Bline%2Bconfiguration%26description%3DCreate%2Ba%2Bcustom%2Bstatus%2Bline%2Bfor%2BClaude%2BCode%2Bto%2Bdisplay%2Bcontextual%2Binformation%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "twitter:image:height": "630",
    "ogTitle": "Status line configuration - Claude Docs",
    "viewport": "width=device-width, initial-scale=1",
    "description": "Create a custom status line for Claude Code to display contextual information",
    "og:site_name": "Claude Docs",
    "og:description": "Create a custom status line for Claude Code to display contextual information",
    "twitter:card": "summary_large_image",
    "language": "en",
    "next-size-adjust": "",
    "favicon": "https://mintcdn.com/anthropic-claude-docs/JaG275Sqw0maE7Ce/_generated/favicon/favicon-16x16.png?fit=max&n=JaG275Sqw0maE7Ce&s=b20efcf65eab17019f139f435bec262e",
    "title": "Status line configuration - Claude Docs",
    "application-name": "Claude Docs",
    "generator": "Mintlify",
    "og:image:width": "1200",
    "apple-mobile-web-app-title": "Claude Docs",
    "twitter:image": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DConfiguration%26appearance%3Dlight%26title%3DStatus%2Bline%2Bconfiguration%26description%3DCreate%2Ba%2Bcustom%2Bstatus%2Bline%2Bfor%2BClaude%2BCode%2Bto%2Bdisplay%2Bcontextual%2Binformation%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "charset": "utf-8",
    "twitter:title": "Status line configuration - Claude Docs",
    "ogImage": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DConfiguration%26appearance%3Dlight%26title%3DStatus%2Bline%2Bconfiguration%26description%3DCreate%2Ba%2Bcustom%2Bstatus%2Bline%2Bfor%2BClaude%2BCode%2Bto%2Bdisplay%2Bcontextual%2Binformation%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "twitter:image:width": "1200",
    "msapplication-config": "https://mintcdn.com/anthropic-claude-docs/JaG275Sqw0maE7Ce/_generated/favicon/browserconfig.xml?n=JaG275Sqw0maE7Ce&s=31cc0bae38445be839155997a2084e7e",
    "msapplication-TileColor": "#0E0E0E",
    "scrapeId": "6725a89e-db1e-4870-a5d6-9d7bde970c40",
    "sourceURL": "https://docs.claude.com/en/docs/claude-code/statusline",
    "url": "https://docs.claude.com/en/docs/claude-code/statusline",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic",
    "cacheState": "hit",
    "cachedAt": "2025-10-21T20:00:48.709Z",
    "creditsUsed": 1
  }
}