{
  "markdown": "[Claude Docs home page![light logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/light.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=c877c45432515ee69194cb19e9f983a2)![dark logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/dark.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=f5bb877be0cb3cba86cf6d7c88185216)](https://docs.claude.com/)\n\n![US](https://d3gk2c5xim1je2.cloudfront.net/flags/US.svg)\n\nEnglish\n\nSearch...\n\nCtrl K\n\n- [Console](https://console.anthropic.com/login)\n- [Support](https://support.claude.com/)\n- [Discord](https://www.anthropic.com/discord)\n- [Sign up](https://console.anthropic.com/login)\n- [Sign up](https://console.anthropic.com/login)\n\nSearch...\n\nNavigation\n\nReference\n\nHooks reference\n\n[Welcome](https://docs.claude.com/en/home) [Claude Developer Platform](https://docs.claude.com/en/docs/intro) [Claude Code](https://docs.claude.com/en/docs/claude-code/overview) [Model Context Protocol (MCP)](https://docs.claude.com/en/docs/mcp) [API Reference](https://docs.claude.com/en/api/messages) [Resources](https://docs.claude.com/en/resources/overview) [Release Notes](https://docs.claude.com/en/release-notes/overview)\n\n##### Getting started\n\n- [Overview](https://docs.claude.com/en/docs/claude-code/overview)\n- [Quickstart](https://docs.claude.com/en/docs/claude-code/quickstart)\n- [Common workflows](https://docs.claude.com/en/docs/claude-code/common-workflows)\n- [Claude Code on the web](https://docs.claude.com/en/docs/claude-code/claude-code-on-the-web)\n\n##### Build with Claude Code\n\n- [Subagents](https://docs.claude.com/en/docs/claude-code/sub-agents)\n- [Plugins](https://docs.claude.com/en/docs/claude-code/plugins)\n- [Agent Skills](https://docs.claude.com/en/docs/claude-code/skills)\n- [Output styles](https://docs.claude.com/en/docs/claude-code/output-styles)\n- [Hooks](https://docs.claude.com/en/docs/claude-code/hooks-guide)\n- [Headless mode](https://docs.claude.com/en/docs/claude-code/headless)\n- [GitHub Actions](https://docs.claude.com/en/docs/claude-code/github-actions)\n- [GitLab CI/CD](https://docs.claude.com/en/docs/claude-code/gitlab-ci-cd)\n- [Model Context Protocol (MCP)](https://docs.claude.com/en/docs/claude-code/mcp)\n- [Troubleshooting](https://docs.claude.com/en/docs/claude-code/troubleshooting)\n\n##### Claude Agent SDK\n\n- [Migrate to Claude Agent SDK](https://docs.claude.com/en/docs/claude-code/sdk/migration-guide)\n\n##### Deployment\n\n- [Overview](https://docs.claude.com/en/docs/claude-code/third-party-integrations)\n- [Amazon Bedrock](https://docs.claude.com/en/docs/claude-code/amazon-bedrock)\n- [Google Vertex AI](https://docs.claude.com/en/docs/claude-code/google-vertex-ai)\n- [Network configuration](https://docs.claude.com/en/docs/claude-code/network-config)\n- [LLM gateway](https://docs.claude.com/en/docs/claude-code/llm-gateway)\n- [Development containers](https://docs.claude.com/en/docs/claude-code/devcontainer)\n- [Sandboxing](https://docs.claude.com/en/docs/claude-code/sandboxing)\n\n##### Administration\n\n- [Advanced installation](https://docs.claude.com/en/docs/claude-code/setup)\n- [Identity and Access Management](https://docs.claude.com/en/docs/claude-code/iam)\n- [Security](https://docs.claude.com/en/docs/claude-code/security)\n- [Data usage](https://docs.claude.com/en/docs/claude-code/data-usage)\n- [Monitoring](https://docs.claude.com/en/docs/claude-code/monitoring-usage)\n- [Costs](https://docs.claude.com/en/docs/claude-code/costs)\n- [Analytics](https://docs.claude.com/en/docs/claude-code/analytics)\n- [Plugin marketplaces](https://docs.claude.com/en/docs/claude-code/plugin-marketplaces)\n\n##### Configuration\n\n- [Settings](https://docs.claude.com/en/docs/claude-code/settings)\n- [Visual Studio Code](https://docs.claude.com/en/docs/claude-code/vs-code)\n- [JetBrains IDEs](https://docs.claude.com/en/docs/claude-code/jetbrains)\n- [Terminal configuration](https://docs.claude.com/en/docs/claude-code/terminal-config)\n- [Model configuration](https://docs.claude.com/en/docs/claude-code/model-config)\n- [Memory management](https://docs.claude.com/en/docs/claude-code/memory)\n- [Status line configuration](https://docs.claude.com/en/docs/claude-code/statusline)\n\n##### Reference\n\n- [CLI reference](https://docs.claude.com/en/docs/claude-code/cli-reference)\n- [Interactive mode](https://docs.claude.com/en/docs/claude-code/interactive-mode)\n- [Slash commands](https://docs.claude.com/en/docs/claude-code/slash-commands)\n- [Checkpointing](https://docs.claude.com/en/docs/claude-code/checkpointing)\n- [Hooks reference](https://docs.claude.com/en/docs/claude-code/hooks)\n- [Plugins reference](https://docs.claude.com/en/docs/claude-code/plugins-reference)\n\n##### Resources\n\n- [Legal and compliance](https://docs.claude.com/en/docs/claude-code/legal-and-compliance)\n\nOn this page\n\n- [Configuration](https://docs.claude.com/en/docs/claude-code/hooks#configuration)\n- [Structure](https://docs.claude.com/en/docs/claude-code/hooks#structure)\n- [Project-Specific Hook Scripts](https://docs.claude.com/en/docs/claude-code/hooks#project-specific-hook-scripts)\n- [Plugin hooks](https://docs.claude.com/en/docs/claude-code/hooks#plugin-hooks)\n- [Hook Events](https://docs.claude.com/en/docs/claude-code/hooks#hook-events)\n- [PreToolUse](https://docs.claude.com/en/docs/claude-code/hooks#pretooluse)\n- [PostToolUse](https://docs.claude.com/en/docs/claude-code/hooks#posttooluse)\n- [Notification](https://docs.claude.com/en/docs/claude-code/hooks#notification)\n- [UserPromptSubmit](https://docs.claude.com/en/docs/claude-code/hooks#userpromptsubmit)\n- [Stop](https://docs.claude.com/en/docs/claude-code/hooks#stop)\n- [SubagentStop](https://docs.claude.com/en/docs/claude-code/hooks#subagentstop)\n- [PreCompact](https://docs.claude.com/en/docs/claude-code/hooks#precompact)\n- [SessionStart](https://docs.claude.com/en/docs/claude-code/hooks#sessionstart)\n- [Persisting environment variables](https://docs.claude.com/en/docs/claude-code/hooks#persisting-environment-variables)\n- [SessionEnd](https://docs.claude.com/en/docs/claude-code/hooks#sessionend)\n- [Hook Input](https://docs.claude.com/en/docs/claude-code/hooks#hook-input)\n- [PreToolUse Input](https://docs.claude.com/en/docs/claude-code/hooks#pretooluse-input)\n- [PostToolUse Input](https://docs.claude.com/en/docs/claude-code/hooks#posttooluse-input)\n- [Notification Input](https://docs.claude.com/en/docs/claude-code/hooks#notification-input)\n- [UserPromptSubmit Input](https://docs.claude.com/en/docs/claude-code/hooks#userpromptsubmit-input)\n- [Stop and SubagentStop Input](https://docs.claude.com/en/docs/claude-code/hooks#stop-and-subagentstop-input)\n- [PreCompact Input](https://docs.claude.com/en/docs/claude-code/hooks#precompact-input)\n- [SessionStart Input](https://docs.claude.com/en/docs/claude-code/hooks#sessionstart-input)\n- [SessionEnd Input](https://docs.claude.com/en/docs/claude-code/hooks#sessionend-input)\n- [Hook Output](https://docs.claude.com/en/docs/claude-code/hooks#hook-output)\n- [Simple: Exit Code](https://docs.claude.com/en/docs/claude-code/hooks#simple%3A-exit-code)\n- [Exit Code 2 Behavior](https://docs.claude.com/en/docs/claude-code/hooks#exit-code-2-behavior)\n- [Advanced: JSON Output](https://docs.claude.com/en/docs/claude-code/hooks#advanced%3A-json-output)\n- [Common JSON Fields](https://docs.claude.com/en/docs/claude-code/hooks#common-json-fields)\n- [PreToolUse Decision Control](https://docs.claude.com/en/docs/claude-code/hooks#pretooluse-decision-control)\n- [PostToolUse Decision Control](https://docs.claude.com/en/docs/claude-code/hooks#posttooluse-decision-control)\n- [UserPromptSubmit Decision Control](https://docs.claude.com/en/docs/claude-code/hooks#userpromptsubmit-decision-control)\n- [Stop/SubagentStop Decision Control](https://docs.claude.com/en/docs/claude-code/hooks#stop%2Fsubagentstop-decision-control)\n- [SessionStart Decision Control](https://docs.claude.com/en/docs/claude-code/hooks#sessionstart-decision-control)\n- [SessionEnd Decision Control](https://docs.claude.com/en/docs/claude-code/hooks#sessionend-decision-control)\n- [Exit Code Example: Bash Command Validation](https://docs.claude.com/en/docs/claude-code/hooks#exit-code-example%3A-bash-command-validation)\n- [JSON Output Example: UserPromptSubmit to Add Context and Validation](https://docs.claude.com/en/docs/claude-code/hooks#json-output-example%3A-userpromptsubmit-to-add-context-and-validation)\n- [JSON Output Example: PreToolUse with Approval](https://docs.claude.com/en/docs/claude-code/hooks#json-output-example%3A-pretooluse-with-approval)\n- [Working with MCP Tools](https://docs.claude.com/en/docs/claude-code/hooks#working-with-mcp-tools)\n- [MCP Tool Naming](https://docs.claude.com/en/docs/claude-code/hooks#mcp-tool-naming)\n- [Configuring Hooks for MCP Tools](https://docs.claude.com/en/docs/claude-code/hooks#configuring-hooks-for-mcp-tools)\n- [Examples](https://docs.claude.com/en/docs/claude-code/hooks#examples)\n- [Security Considerations](https://docs.claude.com/en/docs/claude-code/hooks#security-considerations)\n- [Disclaimer](https://docs.claude.com/en/docs/claude-code/hooks#disclaimer)\n- [Security Best Practices](https://docs.claude.com/en/docs/claude-code/hooks#security-best-practices)\n- [Configuration Safety](https://docs.claude.com/en/docs/claude-code/hooks#configuration-safety)\n- [Hook Execution Details](https://docs.claude.com/en/docs/claude-code/hooks#hook-execution-details)\n- [Debugging](https://docs.claude.com/en/docs/claude-code/hooks#debugging)\n- [Basic Troubleshooting](https://docs.claude.com/en/docs/claude-code/hooks#basic-troubleshooting)\n- [Advanced Debugging](https://docs.claude.com/en/docs/claude-code/hooks#advanced-debugging)\n- [Debug Output Example](https://docs.claude.com/en/docs/claude-code/hooks#debug-output-example)\n\nReference\n\n# Hooks reference\n\nCopy page\n\nThis page provides reference documentation for implementing hooks in Claude Code.\n\nCopy page\n\nFor a quickstart guide with examples, see [Get started with Claude Code hooks](https://docs.claude.com/en/docs/claude-code/hooks-guide).\n\n## [​](https://docs.claude.com/en/docs/claude-code/hooks\\#configuration)  Configuration\n\nClaude Code hooks are configured in your [settings files](https://docs.claude.com/en/docs/claude-code/settings):\n\n- `~/.claude/settings.json` \\- User settings\n- `.claude/settings.json` \\- Project settings\n- `.claude/settings.local.json` \\- Local project settings (not committed)\n- Enterprise managed policy settings\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#structure)  Structure\n\nHooks are organized by matchers, where each matcher can have multiple hooks:\n\nCopy\n\n```\n{\n  \"hooks\": {\n    \"EventName\": [\\\n      {\\\n        \"matcher\": \"ToolPattern\",\\\n        \"hooks\": [\\\n          {\\\n            \"type\": \"command\",\\\n            \"command\": \"your-command-here\"\\\n          }\\\n        ]\\\n      }\\\n    ]\n  }\n}\n\n```\n\n- **matcher**: Pattern to match tool names, case-sensitive (only applicable for\n`PreToolUse` and `PostToolUse`)\n\n  - Simple strings match exactly: `Write` matches only the Write tool\n  - Supports regex: `Edit|Write` or `Notebook.*`\n  - Use `*` to match all tools. You can also use empty string ( `\"\"`) or leave\n    `matcher` blank.\n- **hooks**: Array of commands to execute when the pattern matches\n\n  - `type`: Currently only `\"command\"` is supported\n  - `command`: The bash command to execute (can use `$CLAUDE_PROJECT_DIR`\n    environment variable)\n  - `timeout`: (Optional) How long a command should run, in seconds, before\n    canceling that specific command.\n\nFor events like `UserPromptSubmit`, `Notification`, `Stop`, and `SubagentStop`\nthat don’t use matchers, you can omit the matcher field:\n\nCopy\n\n```\n{\n  \"hooks\": {\n    \"UserPromptSubmit\": [\\\n      {\\\n        \"hooks\": [\\\n          {\\\n            \"type\": \"command\",\\\n            \"command\": \"/path/to/prompt-validator.py\"\\\n          }\\\n        ]\\\n      }\\\n    ]\n  }\n}\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#project-specific-hook-scripts)  Project-Specific Hook Scripts\n\nYou can use the environment variable `CLAUDE_PROJECT_DIR` (only available when\nClaude Code spawns the hook command) to reference scripts stored in your project,\nensuring they work regardless of Claude’s current directory:\n\nCopy\n\n```\n{\n  \"hooks\": {\n    \"PostToolUse\": [\\\n      {\\\n        \"matcher\": \"Write|Edit\",\\\n        \"hooks\": [\\\n          {\\\n            \"type\": \"command\",\\\n            \"command\": \"\\\"$CLAUDE_PROJECT_DIR\\\"/.claude/hooks/check-style.sh\"\\\n          }\\\n        ]\\\n      }\\\n    ]\n  }\n}\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#plugin-hooks)  Plugin hooks\n\n[Plugins](https://docs.claude.com/en/docs/claude-code/plugins) can provide hooks that integrate seamlessly with your user and project hooks. Plugin hooks are automatically merged with your configuration when plugins are enabled.**How plugin hooks work**:\n\n- Plugin hooks are defined in the plugin’s `hooks/hooks.json` file or in a file given by a custom path to the `hooks` field.\n- When a plugin is enabled, its hooks are merged with user and project hooks\n- Multiple hooks from different sources can respond to the same event\n- Plugin hooks use the `${CLAUDE_PLUGIN_ROOT}` environment variable to reference plugin files\n\n**Example plugin hook configuration**:\n\nCopy\n\n```\n{\n  \"description\": \"Automatic code formatting\",\n  \"hooks\": {\n    \"PostToolUse\": [\\\n      {\\\n        \"matcher\": \"Write|Edit\",\\\n        \"hooks\": [\\\n          {\\\n            \"type\": \"command\",\\\n            \"command\": \"${CLAUDE_PLUGIN_ROOT}/scripts/format.sh\",\\\n            \"timeout\": 30\\\n          }\\\n        ]\\\n      }\\\n    ]\n  }\n}\n\n```\n\nPlugin hooks use the same format as regular hooks with an optional `description` field to explain the hook’s purpose.\n\nPlugin hooks run alongside your custom hooks. If multiple hooks match an event, they all execute in parallel.\n\n**Environment variables for plugins**:\n\n- `${CLAUDE_PLUGIN_ROOT}`: Absolute path to the plugin directory\n- `${CLAUDE_PROJECT_DIR}`: Project root directory (same as for project hooks)\n- All standard environment variables are available\n\nSee the [plugin components reference](https://docs.claude.com/en/docs/claude-code/plugins-reference#hooks) for details on creating plugin hooks.\n\n## [​](https://docs.claude.com/en/docs/claude-code/hooks\\#hook-events)  Hook Events\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#pretooluse)  PreToolUse\n\nRuns after Claude creates tool parameters and before processing the tool call.**Common matchers:**\n\n- `Task` \\- Subagent tasks (see [subagents documentation](https://docs.claude.com/en/docs/claude-code/sub-agents))\n- `Bash` \\- Shell commands\n- `Glob` \\- File pattern matching\n- `Grep` \\- Content search\n- `Read` \\- File reading\n- `Edit` \\- File editing\n- `Write` \\- File writing\n- `WebFetch`, `WebSearch` \\- Web operations\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#posttooluse)  PostToolUse\n\nRuns immediately after a tool completes successfully.Recognizes the same matcher values as PreToolUse.\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#notification)  Notification\n\nRuns when Claude Code sends notifications. Notifications are sent when:\n\n1. Claude needs your permission to use a tool. Example: “Claude needs your\npermission to use Bash”\n2. The prompt input has been idle for at least 60 seconds. “Claude is waiting\nfor your input”\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#userpromptsubmit)  UserPromptSubmit\n\nRuns when the user submits a prompt, before Claude processes it. This allows you\nto add additional context based on the prompt/conversation, validate prompts, or\nblock certain types of prompts.\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#stop)  Stop\n\nRuns when the main Claude Code agent has finished responding. Does not run if\nthe stoppage occurred due to a user interrupt.\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#subagentstop)  SubagentStop\n\nRuns when a Claude Code subagent (Task tool call) has finished responding.\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#precompact)  PreCompact\n\nRuns before Claude Code is about to run a compact operation.**Matchers:**\n\n- `manual` \\- Invoked from `/compact`\n- `auto` \\- Invoked from auto-compact (due to full context window)\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#sessionstart)  SessionStart\n\nRuns when Claude Code starts a new session or resumes an existing session (which\ncurrently does start a new session under the hood). Useful for loading in\ndevelopment context like existing issues or recent changes to your codebase, installing dependencies, or setting up environment variables.**Matchers:**\n\n- `startup` \\- Invoked from startup\n- `resume` \\- Invoked from `--resume`, `--continue`, or `/resume`\n- `clear` \\- Invoked from `/clear`\n- `compact` \\- Invoked from auto or manual compact.\n\n#### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#persisting-environment-variables)  Persisting environment variables\n\nSessionStart hooks have access to the `CLAUDE_ENV_FILE` environment variable, which provides a file path where you can persist environment variables for subsequent bash commands.**Example: Setting individual environment variables**\n\nCopy\n\n```\n#!/bin/bash\n\nif [ -n \"$CLAUDE_ENV_FILE\" ]; then\n  echo 'export NODE_ENV=production' >> \"$CLAUDE_ENV_FILE\"\n  echo 'export API_KEY=your-api-key' >> \"$CLAUDE_ENV_FILE\"\n  echo 'export PATH=\"$PATH:./node_modules/.bin\"' >> \"$CLAUDE_ENV_FILE\"\nfi\n\nexit 0\n\n```\n\n**Example: Persisting all environment changes from the hook**When your setup modifies the environment (e.g., `nvm use`), capture and persist all changes by diffing the environment:\n\nCopy\n\n```\n#!/bin/bash\n\nENV_BEFORE=$(export -p | sort)\n\n# Run your setup commands that modify the environment\nsource ~/.nvm/nvm.sh\nnvm use 20\n\nif [ -n \"$CLAUDE_ENV_FILE\" ]; then\n  ENV_AFTER=$(export -p | sort)\n  comm -13 <(echo \"$ENV_BEFORE\") <(echo \"$ENV_AFTER\") >> \"$CLAUDE_ENV_FILE\"\nfi\n\nexit 0\n\n```\n\nAny variables written to this file will be available in all subsequent bash commands that Claude Code executes during the session.\n\n`CLAUDE_ENV_FILE` is only available for SessionStart hooks. Other hook types do not have access to this variable.\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#sessionend)  SessionEnd\n\nRuns when a Claude Code session ends. Useful for cleanup tasks, logging session\nstatistics, or saving session state.The `reason` field in the hook input will be one of:\n\n- `clear` \\- Session cleared with /clear command\n- `logout` \\- User logged out\n- `prompt_input_exit` \\- User exited while prompt input was visible\n- `other` \\- Other exit reasons\n\n## [​](https://docs.claude.com/en/docs/claude-code/hooks\\#hook-input)  Hook Input\n\nHooks receive JSON data via stdin containing session information and\nevent-specific data:\n\nCopy\n\n```\n{\n  // Common fields\n  session_id: string\n  transcript_path: string  // Path to conversation JSON\n  cwd: string              // The current working directory when the hook is invoked\n\n  // Event-specific fields\n  hook_event_name: string\n  ...\n}\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#pretooluse-input)  PreToolUse Input\n\nThe exact schema for `tool_input` depends on the tool.\n\nCopy\n\n```\n{\n  \"session_id\": \"abc123\",\n  \"transcript_path\": \"/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl\",\n  \"cwd\": \"/Users/...\",\n  \"hook_event_name\": \"PreToolUse\",\n  \"tool_name\": \"Write\",\n  \"tool_input\": {\n    \"file_path\": \"/path/to/file.txt\",\n    \"content\": \"file content\"\n  }\n}\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#posttooluse-input)  PostToolUse Input\n\nThe exact schema for `tool_input` and `tool_response` depends on the tool.\n\nCopy\n\n```\n{\n  \"session_id\": \"abc123\",\n  \"transcript_path\": \"/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl\",\n  \"cwd\": \"/Users/...\",\n  \"hook_event_name\": \"PostToolUse\",\n  \"tool_name\": \"Write\",\n  \"tool_input\": {\n    \"file_path\": \"/path/to/file.txt\",\n    \"content\": \"file content\"\n  },\n  \"tool_response\": {\n    \"filePath\": \"/path/to/file.txt\",\n    \"success\": true\n  }\n}\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#notification-input)  Notification Input\n\nCopy\n\n```\n{\n  \"session_id\": \"abc123\",\n  \"transcript_path\": \"/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl\",\n  \"cwd\": \"/Users/...\",\n  \"hook_event_name\": \"Notification\",\n  \"message\": \"Task completed successfully\"\n}\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#userpromptsubmit-input)  UserPromptSubmit Input\n\nCopy\n\n```\n{\n  \"session_id\": \"abc123\",\n  \"transcript_path\": \"/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl\",\n  \"cwd\": \"/Users/...\",\n  \"hook_event_name\": \"UserPromptSubmit\",\n  \"prompt\": \"Write a function to calculate the factorial of a number\"\n}\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#stop-and-subagentstop-input)  Stop and SubagentStop Input\n\n`stop_hook_active` is true when Claude Code is already continuing as a result of\na stop hook. Check this value or process the transcript to prevent Claude Code\nfrom running indefinitely.\n\nCopy\n\n```\n{\n  \"session_id\": \"abc123\",\n  \"transcript_path\": \"~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl\",\n  \"hook_event_name\": \"Stop\",\n  \"stop_hook_active\": true\n}\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#precompact-input)  PreCompact Input\n\nFor `manual`, `custom_instructions` comes from what the user passes into\n`/compact`. For `auto`, `custom_instructions` is empty.\n\nCopy\n\n```\n{\n  \"session_id\": \"abc123\",\n  \"transcript_path\": \"~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl\",\n  \"hook_event_name\": \"PreCompact\",\n  \"trigger\": \"manual\",\n  \"custom_instructions\": \"\"\n}\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#sessionstart-input)  SessionStart Input\n\nCopy\n\n```\n{\n  \"session_id\": \"abc123\",\n  \"transcript_path\": \"~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl\",\n  \"hook_event_name\": \"SessionStart\",\n  \"source\": \"startup\"\n}\n\n```\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#sessionend-input)  SessionEnd Input\n\nCopy\n\n```\n{\n  \"session_id\": \"abc123\",\n  \"transcript_path\": \"~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl\",\n  \"cwd\": \"/Users/...\",\n  \"hook_event_name\": \"SessionEnd\",\n  \"reason\": \"exit\"\n}\n\n```\n\n## [​](https://docs.claude.com/en/docs/claude-code/hooks\\#hook-output)  Hook Output\n\nThere are two ways for hooks to return output back to Claude Code. The output\ncommunicates whether to block and any feedback that should be shown to Claude\nand the user.\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#simple%3A-exit-code)  Simple: Exit Code\n\nHooks communicate status through exit codes, stdout, and stderr:\n\n- **Exit code 0**: Success. `stdout` is shown to the user in transcript mode\n(CTRL-R), except for `UserPromptSubmit` and `SessionStart`, where stdout is\nadded to the context.\n- **Exit code 2**: Blocking error. `stderr` is fed back to Claude to process\nautomatically. See per-hook-event behavior below.\n- **Other exit codes**: Non-blocking error. `stderr` is shown to the user and\nexecution continues.\n\nReminder: Claude Code does not see stdout if the exit code is 0, except for\nthe `UserPromptSubmit` hook where stdout is injected as context.\n\n#### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#exit-code-2-behavior)  Exit Code 2 Behavior\n\n| Hook Event | Behavior |\n| --- | --- |\n| `PreToolUse` | Blocks the tool call, shows stderr to Claude |\n| `PostToolUse` | Shows stderr to Claude (tool already ran) |\n| `Notification` | N/A, shows stderr to user only |\n| `UserPromptSubmit` | Blocks prompt processing, erases prompt, shows stderr to user only |\n| `Stop` | Blocks stoppage, shows stderr to Claude |\n| `SubagentStop` | Blocks stoppage, shows stderr to Claude subagent |\n| `PreCompact` | N/A, shows stderr to user only |\n| `SessionStart` | N/A, shows stderr to user only |\n| `SessionEnd` | N/A, shows stderr to user only |\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#advanced%3A-json-output)  Advanced: JSON Output\n\nHooks can return structured JSON in `stdout` for more sophisticated control:\n\n#### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#common-json-fields)  Common JSON Fields\n\nAll hook types can include these optional fields:\n\nCopy\n\n```\n{\n  \"continue\": true, // Whether Claude should continue after hook execution (default: true)\n  \"stopReason\": \"string\", // Message shown when continue is false\n\n  \"suppressOutput\": true, // Hide stdout from transcript mode (default: false)\n  \"systemMessage\": \"string\" // Optional warning message shown to the user\n}\n\n```\n\nIf `continue` is false, Claude stops processing after the hooks run.\n\n- For `PreToolUse`, this is different from `\"permissionDecision\": \"deny\"`, which\nonly blocks a specific tool call and provides automatic feedback to Claude.\n- For `PostToolUse`, this is different from `\"decision\": \"block\"`, which\nprovides automated feedback to Claude.\n- For `UserPromptSubmit`, this prevents the prompt from being processed.\n- For `Stop` and `SubagentStop`, this takes precedence over any\n`\"decision\": \"block\"` output.\n- In all cases, `\"continue\" = false` takes precedence over any\n`\"decision\": \"block\"` output.\n\n`stopReason` accompanies `continue` with a reason shown to the user, not shown\nto Claude.\n\n#### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#pretooluse-decision-control)  `PreToolUse` Decision Control\n\n`PreToolUse` hooks can control whether a tool call proceeds.\n\n- `\"allow\"` bypasses the permission system. `permissionDecisionReason` is shown\nto the user but not to Claude.\n- `\"deny\"` prevents the tool call from executing. `permissionDecisionReason` is\nshown to Claude.\n- `\"ask\"` asks the user to confirm the tool call in the UI.\n`permissionDecisionReason` is shown to the user but not to Claude.\n\nCopy\n\n```\n{\n  \"hookSpecificOutput\": {\n    \"hookEventName\": \"PreToolUse\",\n    \"permissionDecision\": \"allow\" | \"deny\" | \"ask\",\n    \"permissionDecisionReason\": \"My reason here\"\n  }\n}\n\n```\n\nThe `decision` and `reason` fields are deprecated for PreToolUse hooks.\nUse `hookSpecificOutput.permissionDecision` and\n`hookSpecificOutput.permissionDecisionReason` instead. The deprecated fields\n`\"approve\"` and `\"block\"` map to `\"allow\"` and `\"deny\"` respectively.\n\n#### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#posttooluse-decision-control)  `PostToolUse` Decision Control\n\n`PostToolUse` hooks can provide feedback to Claude after tool execution.\n\n- `\"block\"` automatically prompts Claude with `reason`.\n- `undefined` does nothing. `reason` is ignored.\n- `\"hookSpecificOutput.additionalContext\"` adds context for Claude to consider.\n\nCopy\n\n```\n{\n  \"decision\": \"block\" | undefined,\n  \"reason\": \"Explanation for decision\",\n  \"hookSpecificOutput\": {\n    \"hookEventName\": \"PostToolUse\",\n    \"additionalContext\": \"Additional information for Claude\"\n  }\n}\n\n```\n\n#### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#userpromptsubmit-decision-control)  `UserPromptSubmit` Decision Control\n\n`UserPromptSubmit` hooks can control whether a user prompt is processed.\n\n- `\"block\"` prevents the prompt from being processed. The submitted prompt is\nerased from context. `\"reason\"` is shown to the user but not added to context.\n- `undefined` allows the prompt to proceed normally. `\"reason\"` is ignored.\n- `\"hookSpecificOutput.additionalContext\"` adds the string to the context if not\nblocked.\n\nCopy\n\n```\n{\n  \"decision\": \"block\" | undefined,\n  \"reason\": \"Explanation for decision\",\n  \"hookSpecificOutput\": {\n    \"hookEventName\": \"UserPromptSubmit\",\n    \"additionalContext\": \"My additional context here\"\n  }\n}\n\n```\n\n#### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#stop%2Fsubagentstop-decision-control)  `Stop`/ `SubagentStop` Decision Control\n\n`Stop` and `SubagentStop` hooks can control whether Claude must continue.\n\n- `\"block\"` prevents Claude from stopping. You must populate `reason` for Claude\nto know how to proceed.\n- `undefined` allows Claude to stop. `reason` is ignored.\n\nCopy\n\n```\n{\n  \"decision\": \"block\" | undefined,\n  \"reason\": \"Must be provided when Claude is blocked from stopping\"\n}\n\n```\n\n#### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#sessionstart-decision-control)  `SessionStart` Decision Control\n\n`SessionStart` hooks allow you to load in context at the start of a session.\n\n- `\"hookSpecificOutput.additionalContext\"` adds the string to the context.\n- Multiple hooks’ `additionalContext` values are concatenated.\n\nCopy\n\n```\n{\n  \"hookSpecificOutput\": {\n    \"hookEventName\": \"SessionStart\",\n    \"additionalContext\": \"My additional context here\"\n  }\n}\n\n```\n\n#### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#sessionend-decision-control)  `SessionEnd` Decision Control\n\n`SessionEnd` hooks run when a session ends. They cannot block session termination\nbut can perform cleanup tasks.\n\n#### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#exit-code-example%3A-bash-command-validation)  Exit Code Example: Bash Command Validation\n\nCopy\n\n```\n#!/usr/bin/env python3\nimport json\nimport re\nimport sys\n\n# Define validation rules as a list of (regex pattern, message) tuples\nVALIDATION_RULES = [\\\n    (\\\n        r\"\\bgrep\\b(?!.*\\|)\",\\\n        \"Use 'rg' (ripgrep) instead of 'grep' for better performance and features\",\\\n    ),\\\n    (\\\n        r\"\\bfind\\s+\\S+\\s+-name\\b\",\\\n        \"Use 'rg --files | rg pattern' or 'rg --files -g pattern' instead of 'find -name' for better performance\",\\\n    ),\\\n]\n\ndef validate_command(command: str) -> list[str]:\n    issues = []\n    for pattern, message in VALIDATION_RULES:\n        if re.search(pattern, command):\n            issues.append(message)\n    return issues\n\ntry:\n    input_data = json.load(sys.stdin)\nexcept json.JSONDecodeError as e:\n    print(f\"Error: Invalid JSON input: {e}\", file=sys.stderr)\n    sys.exit(1)\n\ntool_name = input_data.get(\"tool_name\", \"\")\ntool_input = input_data.get(\"tool_input\", {})\ncommand = tool_input.get(\"command\", \"\")\n\nif tool_name != \"Bash\" or not command:\n    sys.exit(1)\n\n# Validate the command\nissues = validate_command(command)\n\nif issues:\n    for message in issues:\n        print(f\"• {message}\", file=sys.stderr)\n    # Exit code 2 blocks tool call and shows stderr to Claude\n    sys.exit(2)\n\n```\n\n#### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#json-output-example%3A-userpromptsubmit-to-add-context-and-validation)  JSON Output Example: UserPromptSubmit to Add Context and Validation\n\nFor `UserPromptSubmit` hooks, you can inject context using either method:\n\n- Exit code 0 with stdout: Claude sees the context (special case for `UserPromptSubmit`)\n- JSON output: Provides more control over the behavior\n\nCopy\n\n```\n#!/usr/bin/env python3\nimport json\nimport sys\nimport re\nimport datetime\n\n# Load input from stdin\ntry:\n    input_data = json.load(sys.stdin)\nexcept json.JSONDecodeError as e:\n    print(f\"Error: Invalid JSON input: {e}\", file=sys.stderr)\n    sys.exit(1)\n\nprompt = input_data.get(\"prompt\", \"\")\n\n# Check for sensitive patterns\nsensitive_patterns = [\\\n    (r\"(?i)\\b(password|secret|key|token)\\s*[:=]\", \"Prompt contains potential secrets\"),\\\n]\n\nfor pattern, message in sensitive_patterns:\n    if re.search(pattern, prompt):\n        # Use JSON output to block with a specific reason\n        output = {\n            \"decision\": \"block\",\n            \"reason\": f\"Security policy violation: {message}. Please rephrase your request without sensitive information.\"\n        }\n        print(json.dumps(output))\n        sys.exit(0)\n\n# Add current time to context\ncontext = f\"Current time: {datetime.datetime.now()}\"\nprint(context)\n\n\"\"\"\nThe following is also equivalent:\nprint(json.dumps({\n  \"hookSpecificOutput\": {\n    \"hookEventName\": \"UserPromptSubmit\",\n    \"additionalContext\": context,\n  },\n}))\n\"\"\"\n\n# Allow the prompt to proceed with the additional context\nsys.exit(0)\n\n```\n\n#### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#json-output-example%3A-pretooluse-with-approval)  JSON Output Example: PreToolUse with Approval\n\nCopy\n\n```\n#!/usr/bin/env python3\nimport json\nimport sys\n\n# Load input from stdin\ntry:\n    input_data = json.load(sys.stdin)\nexcept json.JSONDecodeError as e:\n    print(f\"Error: Invalid JSON input: {e}\", file=sys.stderr)\n    sys.exit(1)\n\ntool_name = input_data.get(\"tool_name\", \"\")\ntool_input = input_data.get(\"tool_input\", {})\n\n# Example: Auto-approve file reads for documentation files\nif tool_name == \"Read\":\n    file_path = tool_input.get(\"file_path\", \"\")\n    if file_path.endswith((\".md\", \".mdx\", \".txt\", \".json\")):\n        # Use JSON output to auto-approve the tool call\n        output = {\n            \"decision\": \"approve\",\n            \"reason\": \"Documentation file auto-approved\",\n            \"suppressOutput\": True  # Don't show in transcript mode\n        }\n        print(json.dumps(output))\n        sys.exit(0)\n\n# For other cases, let the normal permission flow proceed\nsys.exit(0)\n\n```\n\n## [​](https://docs.claude.com/en/docs/claude-code/hooks\\#working-with-mcp-tools)  Working with MCP Tools\n\nClaude Code hooks work seamlessly with\n[Model Context Protocol (MCP) tools](https://docs.claude.com/en/docs/claude-code/mcp). When MCP servers\nprovide tools, they appear with a special naming pattern that you can match in\nyour hooks.\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#mcp-tool-naming)  MCP Tool Naming\n\nMCP tools follow the pattern `mcp__<server>__<tool>`, for example:\n\n- `mcp__memory__create_entities` \\- Memory server’s create entities tool\n- `mcp__filesystem__read_file` \\- Filesystem server’s read file tool\n- `mcp__github__search_repositories` \\- GitHub server’s search tool\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#configuring-hooks-for-mcp-tools)  Configuring Hooks for MCP Tools\n\nYou can target specific MCP tools or entire MCP servers:\n\nCopy\n\n```\n{\n  \"hooks\": {\n    \"PreToolUse\": [\\\n      {\\\n        \"matcher\": \"mcp__memory__.*\",\\\n        \"hooks\": [\\\n          {\\\n            \"type\": \"command\",\\\n            \"command\": \"echo 'Memory operation initiated' >> ~/mcp-operations.log\"\\\n          }\\\n        ]\\\n      },\\\n      {\\\n        \"matcher\": \"mcp__.*__write.*\",\\\n        \"hooks\": [\\\n          {\\\n            \"type\": \"command\",\\\n            \"command\": \"/home/user/scripts/validate-mcp-write.py\"\\\n          }\\\n        ]\\\n      }\\\n    ]\n  }\n}\n\n```\n\n## [​](https://docs.claude.com/en/docs/claude-code/hooks\\#examples)  Examples\n\nFor practical examples including code formatting, notifications, and file protection, see [More Examples](https://docs.claude.com/en/docs/claude-code/hooks-guide#more-examples) in the get started guide.\n\n## [​](https://docs.claude.com/en/docs/claude-code/hooks\\#security-considerations)  Security Considerations\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#disclaimer)  Disclaimer\n\n**USE AT YOUR OWN RISK**: Claude Code hooks execute arbitrary shell commands on\nyour system automatically. By using hooks, you acknowledge that:\n\n- You are solely responsible for the commands you configure\n- Hooks can modify, delete, or access any files your user account can access\n- Malicious or poorly written hooks can cause data loss or system damage\n- Anthropic provides no warranty and assumes no liability for any damages\nresulting from hook usage\n- You should thoroughly test hooks in a safe environment before production use\n\nAlways review and understand any hook commands before adding them to your\nconfiguration.\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#security-best-practices)  Security Best Practices\n\nHere are some key practices for writing more secure hooks:\n\n1. **Validate and sanitize inputs** \\- Never trust input data blindly\n2. **Always quote shell variables** \\- Use `\"$VAR\"` not `$VAR`\n3. **Block path traversal** \\- Check for `..` in file paths\n4. **Use absolute paths** \\- Specify full paths for scripts (use\n“$CLAUDE\\_PROJECT\\_DIR” for the project path)\n5. **Skip sensitive files** \\- Avoid `.env`, `.git/`, keys, etc.\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#configuration-safety)  Configuration Safety\n\nDirect edits to hooks in settings files don’t take effect immediately. Claude\nCode:\n\n1. Captures a snapshot of hooks at startup\n2. Uses this snapshot throughout the session\n3. Warns if hooks are modified externally\n4. Requires review in `/hooks` menu for changes to apply\n\nThis prevents malicious hook modifications from affecting your current session.\n\n## [​](https://docs.claude.com/en/docs/claude-code/hooks\\#hook-execution-details)  Hook Execution Details\n\n- **Timeout**: 60-second execution limit by default, configurable per command.\n\n  - A timeout for an individual command does not affect the other commands.\n- **Parallelization**: All matching hooks run in parallel\n- **Deduplication**: Multiple identical hook commands are deduplicated automatically\n- **Environment**: Runs in current directory with Claude Code’s environment\n\n  - The `CLAUDE_PROJECT_DIR` environment variable is available and contains the\n    absolute path to the project root directory (where Claude Code was started)\n  - The `CLAUDE_CODE_REMOTE` environment variable indicates whether the hook is running in a remote (web) environment ( `\"true\"`) or local CLI environment (not set or empty). Use this to run different logic based on execution context.\n- **Input**: JSON via stdin\n- **Output**:\n\n  - PreToolUse/PostToolUse/Stop/SubagentStop: Progress shown in transcript (Ctrl-R)\n  - Notification/SessionEnd: Logged to debug only ( `--debug`)\n  - UserPromptSubmit/SessionStart: stdout added as context for Claude\n\n## [​](https://docs.claude.com/en/docs/claude-code/hooks\\#debugging)  Debugging\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#basic-troubleshooting)  Basic Troubleshooting\n\nIf your hooks aren’t working:\n\n1. **Check configuration** \\- Run `/hooks` to see if your hook is registered\n2. **Verify syntax** \\- Ensure your JSON settings are valid\n3. **Test commands** \\- Run hook commands manually first\n4. **Check permissions** \\- Make sure scripts are executable\n5. **Review logs** \\- Use `claude --debug` to see hook execution details\n\nCommon issues:\n\n- **Quotes not escaped** \\- Use `\\\"` inside JSON strings\n- **Wrong matcher** \\- Check tool names match exactly (case-sensitive)\n- **Command not found** \\- Use full paths for scripts\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#advanced-debugging)  Advanced Debugging\n\nFor complex hook issues:\n\n1. **Inspect hook execution** \\- Use `claude --debug` to see detailed hook\nexecution\n2. **Validate JSON schemas** \\- Test hook input/output with external tools\n3. **Check environment variables** \\- Verify Claude Code’s environment is correct\n4. **Test edge cases** \\- Try hooks with unusual file paths or inputs\n5. **Monitor system resources** \\- Check for resource exhaustion during hook\nexecution\n6. **Use structured logging** \\- Implement logging in your hook scripts\n\n### [​](https://docs.claude.com/en/docs/claude-code/hooks\\#debug-output-example)  Debug Output Example\n\nUse `claude --debug` to see hook execution details:\n\nCopy\n\n```\n[DEBUG] Executing hooks for PostToolUse:Write\n[DEBUG] Getting matching hook commands for PostToolUse with query: Write\n[DEBUG] Found 1 hook matchers in settings\n[DEBUG] Matched 1 hooks for query \"Write\"\n[DEBUG] Found 1 hook commands to execute\n[DEBUG] Executing hook command: <Your command> with timeout 60000ms\n[DEBUG] Hook command completed with status 0: <Your stdout>\n\n```\n\nProgress messages appear in transcript mode (Ctrl-R) showing:\n\n- Which hook is running\n- Command being executed\n- Success/failure status\n- Output or error messages\n\nWas this page helpful?\n\nYesNo\n\n[Checkpointing](https://docs.claude.com/en/docs/claude-code/checkpointing) [Plugins reference](https://docs.claude.com/en/docs/claude-code/plugins-reference)\n\nAssistant\n\nResponses are generated using AI and may contain mistakes.\n\n[Claude Docs home page![light logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/light.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=c877c45432515ee69194cb19e9f983a2)![dark logo](https://mintcdn.com/anthropic-claude-docs/DcI2Ybid7ZEnFaf0/logo/dark.svg?fit=max&auto=format&n=DcI2Ybid7ZEnFaf0&q=85&s=f5bb877be0cb3cba86cf6d7c88185216)](https://docs.claude.com/)\n\n[x](https://x.com/AnthropicAI) [linkedin](https://www.linkedin.com/company/anthropicresearch)\n\nCompany\n\n[Anthropic](https://www.anthropic.com/company) [Careers](https://www.anthropic.com/careers) [Economic Futures](https://www.anthropic.com/economic-futures) [Research](https://www.anthropic.com/research) [News](https://www.anthropic.com/news) [Trust center](https://trust.anthropic.com/) [Transparency](https://www.anthropic.com/transparency)\n\nHelp and security\n\n[Availability](https://www.anthropic.com/supported-countries) [Status](https://status.anthropic.com/) [Support center](https://support.claude.com/)\n\nLearn\n\n[Courses](https://www.anthropic.com/learn) [MCP connectors](https://claude.com/partners/mcp) [Customer stories](https://www.claude.com/customers) [Engineering blog](https://www.anthropic.com/engineering) [Events](https://www.anthropic.com/events) [Powered by Claude](https://claude.com/partners/powered-by-claude) [Service partners](https://claude.com/partners/services) [Startups program](https://claude.com/programs/startups)\n\nTerms and policies\n\n[Privacy policy](https://www.anthropic.com/legal/privacy) [Disclosure policy](https://www.anthropic.com/responsible-disclosure-policy) [Usage policy](https://www.anthropic.com/legal/aup) [Commercial terms](https://www.anthropic.com/legal/commercial-terms) [Consumer terms](https://www.anthropic.com/legal/consumer-terms)\n\nAsk Docs\nAI Avatar",
  "metadata": {
    "favicon": "https://mintcdn.com/anthropic-claude-docs/JaG275Sqw0maE7Ce/_generated/favicon/favicon-16x16.png?fit=max&n=JaG275Sqw0maE7Ce&s=b20efcf65eab17019f139f435bec262e",
    "og:image": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DReference%26appearance%3Dlight%26title%3DHooks%2Breference%26description%3DThis%2Bpage%2Bprovides%2Breference%2Bdocumentation%2Bfor%2Bimplementing%2Bhooks%2Bin%2BClaude%2BCode.%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "og:image:height": "630",
    "twitter:title": "Hooks reference - Claude Docs",
    "description": "This page provides reference documentation for implementing hooks in Claude Code.",
    "title": "Hooks reference - Claude Docs",
    "next-size-adjust": "",
    "twitter:card": "summary_large_image",
    "twitter:description": "This page provides reference documentation for implementing hooks in Claude Code.",
    "og:image:width": "1200",
    "viewport": "width=device-width, initial-scale=1",
    "ogTitle": "Hooks reference - Claude Docs",
    "msapplication-config": "https://mintcdn.com/anthropic-claude-docs/JaG275Sqw0maE7Ce/_generated/favicon/browserconfig.xml?n=JaG275Sqw0maE7Ce&s=31cc0bae38445be839155997a2084e7e",
    "generator": "Mintlify",
    "charset": "utf-8",
    "language": "en",
    "ogImage": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DReference%26appearance%3Dlight%26title%3DHooks%2Breference%26description%3DThis%2Bpage%2Bprovides%2Breference%2Bdocumentation%2Bfor%2Bimplementing%2Bhooks%2Bin%2BClaude%2BCode.%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "og:site_name": "Claude Docs",
    "apple-mobile-web-app-title": "Claude Docs",
    "msapplication-TileColor": "#0E0E0E",
    "og:description": "This page provides reference documentation for implementing hooks in Claude Code.",
    "og:type": "website",
    "ogDescription": "This page provides reference documentation for implementing hooks in Claude Code.",
    "application-name": "Claude Docs",
    "og:title": "Hooks reference - Claude Docs",
    "twitter:image": "https://anthropic-claude-docs.mintlify.app/_next/image?url=%2F_mintlify%2Fapi%2Fog%3Fdivision%3DReference%26appearance%3Dlight%26title%3DHooks%2Breference%26description%3DThis%2Bpage%2Bprovides%2Breference%2Bdocumentation%2Bfor%2Bimplementing%2Bhooks%2Bin%2BClaude%2BCode.%26logoLight%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Flight.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Dc877c45432515ee69194cb19e9f983a2%26logoDark%3Dhttps%253A%252F%252Fmintcdn.com%252Fanthropic-claude-docs%252FDcI2Ybid7ZEnFaf0%252Flogo%252Fdark.svg%253Ffit%253Dmax%2526auto%253Dformat%2526n%253DDcI2Ybid7ZEnFaf0%2526q%253D85%2526s%253Df5bb877be0cb3cba86cf6d7c88185216%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E%26backgroundLight%3D%2523FDFDF7%26backgroundDark%3D%252309090B&w=1200&q=100",
    "twitter:image:width": "1200",
    "twitter:image:height": "630",
    "scrapeId": "3a6c6474-db46-4b4e-865f-94ed5120d2b1",
    "sourceURL": "https://docs.claude.com/en/docs/claude-code/hooks",
    "url": "https://docs.claude.com/en/docs/claude-code/hooks",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic",
    "cacheState": "hit",
    "cachedAt": "2025-10-22T01:39:32.260Z",
    "creditsUsed": 1
  }
}