{
  "markdown": "Get comprehensive, actionable reviews directly in your PRs. [Try Roo's PR Reviewer](https://roocode.com/reviewer?utm_source=docs&utm_medium=banner&utm_campaign=reviewer_promo)\n\n[Skip to main content](https://docs.roocode.com/features/slash-commands#__docusaurus_skipToContent_fallback)\n\n[![Roo Code Logo](https://docs.roocode.com/img/roo-code-logo-dark.png)](https://docs.roocode.com/)\n\n`ctrl`  `K`\n\n[Reddit](https://www.reddit.com/r/RooCode/ \"Reddit\")[Discord](https://discord.gg/roocode \"Discord\")\n\n[20.3k](https://github.com/RooCodeInc/Roo-Code \"GitHub Repository\") [Install ·574.1k](https://marketplace.visualstudio.com/items?itemName=RooVeterinaryInc.roo-cline \"Install VS Code Extension\")\n\n- [Welcome](https://docs.roocode.com/)\n- [Getting Started](https://docs.roocode.com/features/slash-commands#)\n\n- [Tutorial Videos](https://docs.roocode.com/features/slash-commands#)\n\n- [Roo Code Cloud](https://docs.roocode.com/features/slash-commands#)\n\n- Features\n\n  - [API Configuration Profiles](https://docs.roocode.com/features/api-configuration-profiles)\n  - [Auto-Approving Actions](https://docs.roocode.com/features/auto-approving-actions)\n  - [Boomerang Tasks](https://docs.roocode.com/features/boomerang-tasks)\n  - [Browser Use](https://docs.roocode.com/features/browser-use)\n  - [Checkpoints](https://docs.roocode.com/features/checkpoints)\n  - [Code Actions](https://docs.roocode.com/features/code-actions)\n  - [Codebase Indexing](https://docs.roocode.com/features/codebase-indexing)\n  - [Custom Instructions](https://docs.roocode.com/features/custom-instructions)\n  - [Diagnostics Integration](https://docs.roocode.com/features/diagnostics-integration)\n  - [Customizing Modes](https://docs.roocode.com/features/custom-modes)\n  - [Diff/Fast Edits](https://docs.roocode.com/features/fast-edits)\n  - [Enhance Prompt](https://docs.roocode.com/features/enhance-prompt)\n  - [Import/Export/Reset Settings](https://docs.roocode.com/features/settings-management)\n  - [Intelligent Context Condensing](https://docs.roocode.com/features/intelligent-context-condensing)\n  - [Keyboard Navigation](https://docs.roocode.com/features/keyboard-shortcuts)\n  - [Roo Code Marketplace](https://docs.roocode.com/features/marketplace)\n  - [Message Queueing](https://docs.roocode.com/features/message-queueing)\n  - [Model Temperature](https://docs.roocode.com/features/model-temperature)\n  - [Multi-File Reads](https://docs.roocode.com/features/concurrent-file-reads)\n  - [.rooignore](https://docs.roocode.com/features/rooignore)\n  - [Slash Commands](https://docs.roocode.com/features/slash-commands)\n  - [Suggested Responses](https://docs.roocode.com/features/suggested-responses)\n  - [Task Todo List](https://docs.roocode.com/features/task-todo-list)\n  - [Terminal Shell Integration](https://docs.roocode.com/features/shell-integration)\n  - [MCP](https://docs.roocode.com/features/slash-commands#)\n\n  - [Experimental](https://docs.roocode.com/features/slash-commands#)\n\n  - [Additional Features](https://docs.roocode.com/features/more-features)\n- [Advanced Usage](https://docs.roocode.com/features/slash-commands#)\n\n- [Model Providers](https://docs.roocode.com/features/slash-commands#)\n\n- [FAQ](https://docs.roocode.com/features/slash-commands#)\n\n- [Contributing (GitHub)](https://github.com/RooCodeInc/Roo-Code/blob/main/CONTRIBUTING.md)\n- [Roocabulary (GitHub)](https://github.com/cannuri/Roocabulary)\n- [Update Notes](https://docs.roocode.com/features/slash-commands#)\n\n\n- [Home page](https://docs.roocode.com/)\n- Features\n- Slash Commands\n\nCopy Page\n\nOn this page\n\n# Slash Commands\n\nCreate custom slash commands to automate repetitive tasks and extend Roo Code's functionality with simple markdown files.\n\nSlash Commands in Roo Code - YouTube\n\n[Photo image of Roo Code](https://www.youtube.com/channel/UCfCnIRjGVRzwy8YqelcV13w?embeds_referring_euri=https%3A%2F%2Fdocs.roocode.com%2F)\n\nRoo Code\n\n3.81K subscribers\n\n[Slash Commands in Roo Code](https://www.youtube.com/watch?v=IOpmeUGLpg0)\n\nRoo Code\n\nSearch\n\nWatch later\n\nShare\n\nCopy link\n\nInfo\n\nShopping\n\nTap to unmute\n\nIf playback doesn't begin shortly, try restarting your device.\n\nMore videos\n\n## More videos\n\nYou're signed out\n\nVideos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.\n\nCancelConfirm\n\nShare\n\nInclude playlist\n\nAn error occurred while retrieving sharing information. Please try again later.\n\n[Watch on](https://www.youtube.com/watch?v=IOpmeUGLpg0&embeds_referring_euri=https%3A%2F%2Fdocs.roocode.com%2F)\n\n0:00\n\n0:00 / 1:57\n•Live\n\n•\n\nQuick Start\n\nType `/` in chat to select a command. To create or manage commands, open Settings > Slash Commands. You can still store commands in `.roo/commands/` (project) or `~/.roo/commands/` (global).\n\n* * *\n\n## Overview [​](https://docs.roocode.com/features/slash-commands\\#overview \"Direct link to Overview\")\n\nSlash commands let you create reusable prompts and workflows that can be triggered instantly. Turn complex multi-step processes into single commands, standardize team practices, and automate repetitive tasks with simple markdown files.\n\n![Slash commands menu showing available commands](https://docs.roocode.com/img/slash-commands/slash-commands-5.png)\n\n**Key Benefits:**\n\n- **Workflow Automation**: Turn complex multi-step processes into single commands\n- **Team Standardization**: Share commands across your team for consistent practices\n- **Context Preservation**: Include project-specific context in every command\n- **Quick Access**: Fuzzy search and autocomplete for instant command discovery\n\n* * *\n\n## Creating Custom Commands [​](https://docs.roocode.com/features/slash-commands\\#creating-custom-commands \"Direct link to Creating Custom Commands\")\n\nCustom commands extend Roo Code's functionality by adding markdown files to specific directories:\n\n- **Project-specific**: `.roo/commands/` in your workspace root\n- **Global**: `~/.roo/commands/` in your home directory\n\nThe filename becomes the command name. For example:\n\n- `review.md` → `/review`\n- `test-api.md` → `/test-api`\n- `deploy-check.md` → `/deploy-check`\n\nCommand Name Processing\n\nWhen creating commands in Settings > Slash Commands, command names are automatically processed:\n\n- Converted to lowercase\n- Spaces replaced with dashes\n- Special characters removed (except dashes)\n- Multiple consecutive dashes replaced with single dash\n- Leading/trailing dashes removed\n\nExample: \"My Cool Command!\" becomes `my-cool-command`\n\n**Basic Command Format**\n\nCreate a simple command by adding a markdown file:\n\n```codeBlockLines_e6Vv\n# review.md\nPlease review this code for:\n- Performance issues\n- Security vulnerabilities\n- Code style violations\n- Potential bugs\n\n```\n\n**Advanced Command with Frontmatter**\n\nAdd metadata using frontmatter for enhanced functionality:\n\n```codeBlockLines_e6Vv\n---\ndescription: Comprehensive code review focusing on security and performance\nargument-hint: <file or directory to review>\n---\n\n# Security-First Code Review\n\nPlease perform a thorough security review of the selected code:\n\n1. **Authentication & Authorization**\n   - Check for proper access controls\n   - Verify token validation\n   - Review permission checks\n\n2. **Input Validation**\n   - Identify potential injection points\n   - Check for proper sanitization\n   - Review data type validation\n\n3. **Security Best Practices**\n   - Look for hardcoded secrets\n   - Check for secure communication\n   - Review error handling for information leakage\n\n```\n\n**Frontmatter Fields:**\n\n- **`description`**: Appears in the command menu to help users understand the command's purpose\n- **`argument-hint`**: (Optional) Provides a hint about expected arguments when using the command. See [Argument Hints](https://docs.roocode.com/features/slash-commands#argument-hints) for detailed information\n\n* * *\n\n## Command Management [​](https://docs.roocode.com/features/slash-commands\\#command-management \"Direct link to Command Management\")\n\nCreate and maintain commands from Settings.\n\n1. Click the gear icon in Roo Code and open Settings\n2. Go to the Slash Commands tab\n3. Click \"New Command\", name it, and choose location (Project or Global)\n4. The command file opens with starter template content\n\n![Settings > Slash Commands tab for creating and managing commands](https://docs.roocode.com/img/slash-commands/slash-commands-6.png)\n\n* * *\n\n## Using Slash Commands [​](https://docs.roocode.com/features/slash-commands\\#using-slash-commands \"Direct link to Using Slash Commands\")\n\nType `/` in the chat to open the selection-only command menu. Use the gear icon to open Settings > Slash Commands for creating and editing commands.\n\n![Slash command popover with gear icon that opens Settings > Slash Commands](https://docs.roocode.com/img/slash-commands/slash-commands-5.png)\n\n1. Selection-only: Pick from existing commands; creation and editing live in Settings\n2. Autocomplete: Start typing to filter commands (e.g., `/sam` shows `sample-command-name`)\n3. Description Preview: See command descriptions in the menu\n4. Command Priority: Project commands override global commands with the same name\n\n* * *\n\n## Argument Hints [​](https://docs.roocode.com/features/slash-commands\\#argument-hints \"Direct link to Argument Hints\")\n\nArgument hints provide instant help for slash commands, showing you what kind of information to provide when a command expects additional input.\n\nWhen you type `/` to bring up the command menu, commands that expect arguments will display a light gray hint next to them. This hint tells you what kind of argument the command is expecting.\n\nFor example:\n\n- `/mode <mode_slug>` \\- The hint `<mode_slug>` indicates you should provide a mode name like `code` or `debug`\n- `/api-endpoint <endpoint-name> <http-method>` \\- Shows you need both an endpoint name and HTTP method\n\nAfter selecting the command, it will be inserted into the chat input followed by a space. The hint is not inserted; it is only a visual guide to help you know what to type next. You must then manually type the argument after the command.\n\n**Adding Argument Hints to Custom Commands**\n\nYou can add argument hints to your custom commands using the `argument-hint` field in the frontmatter:\n\n```codeBlockLines_e6Vv\n---\ndescription: Generate a new REST API endpoint with best practices\nargument-hint: <endpoint-name> <http-method>\n---\n\n```\n\nThis will display as `/api-endpoint <endpoint-name> <http-method>` in the command menu.\n\n**Best Practices for Argument Hints:**\n\n- **Be Specific**: Use descriptive placeholders like `<file-path>` instead of generic ones like `<arg>`\n- **Show Multiple Arguments**: If your command needs multiple inputs, show them all: `<source> <destination>`\n- **Use Consistent Format**: Always wrap placeholders in angle brackets: `<placeholder>`\n- **Keep It Concise**: Hints should be brief and clear\n\n**Common Questions:**\n\n- **\"What if I don't provide the argument?\"** The command might not work as expected, or it might prompt you for more information. The hint is there to help you get it right the first time.\n- **\"Do all commands have hints?\"** No, only commands that are designed to take arguments will have hints. Commands that work without additional input won't show hints.\n- **\"Can I use a command without replacing the hint?\"** The hint text (like `<mode_slug>`) needs to be replaced with actual values. Leaving the hint text will likely cause the command to fail or behave unexpectedly.\n\n* * *\n\n## Examples and Use Cases [​](https://docs.roocode.com/features/slash-commands\\#examples-and-use-cases \"Direct link to Examples and Use Cases\")\n\n**Development Workflows**\n\n**API Endpoint Generator**\n\n```codeBlockLines_e6Vv\n---\ndescription: Generate a new REST API endpoint with best practices\nargument-hint: <endpoint-name> <http-method>\n---\n\nCreate a new REST API endpoint with the following specifications:\n- Proper error handling\n- Input validation\n- Authentication middleware\n- OpenAPI documentation\n- Unit tests\n- Integration tests\n\nFollow our project's API conventions and patterns.\n\n```\n\n**Database Migration Helper**\n\n```codeBlockLines_e6Vv\n---\ndescription: Create a database migration with rollback support\n---\n\nGenerate a database migration that:\n1. Includes both up and down migrations\n2. Has proper transaction handling\n3. Includes data validation\n4. Provides clear migration descriptions\n5. Follows our naming conventions\n\nRemember to check for dependent migrations and data integrity.\n\n```\n\n**Code Quality**\n\n**Performance Analyzer**\n\n```codeBlockLines_e6Vv\n---\ndescription: Analyze code for performance bottlenecks\n---\n\nAnalyze the selected code for performance issues:\n- Identify O(n²) or worse algorithms\n- Find unnecessary database queries\n- Detect memory leaks\n- Suggest caching opportunities\n- Recommend async/await optimizations\n- Check for proper resource cleanup\n\n```\n\n**Refactoring Assistant**\n\n```codeBlockLines_e6Vv\n---\ndescription: Suggest refactoring improvements for cleaner code\n---\n\nReview this code and suggest refactoring improvements:\n- Extract repeated code into functions\n- Improve variable and function names\n- Simplify complex conditionals\n- Apply SOLID principles\n- Reduce coupling between components\n- Improve testability\n\n```\n\n**Documentation**\n\n**README Generator**\n\n```codeBlockLines_e6Vv\n---\ndescription: Create a comprehensive README for the current project\n---\n\nGenerate a README.md file that includes:\n1. Project title and description\n2. Installation instructions\n3. Usage examples\n4. API documentation\n5. Configuration options\n6. Contributing guidelines\n7. License information\n\nBase it on the current project structure and existing code.\n\n```\n\n**API Documentation**\n\n```codeBlockLines_e6Vv\n---\ndescription: Generate OpenAPI/Swagger documentation\n---\n\nCreate OpenAPI 3.0 documentation for the API endpoints in this file:\n- Include all HTTP methods\n- Document request/response schemas\n- Add example requests and responses\n- Include authentication requirements\n- Document error responses\n- Add descriptive summaries\n\n```\n\n**Testing**\n\n**Test Generator**\n\n```codeBlockLines_e6Vv\n---\ndescription: Generate comprehensive test suites\n---\n\nCreate tests for the selected code:\n1. Unit tests for all public methods\n2. Edge case testing\n3. Error handling tests\n4. Mock external dependencies\n5. Performance benchmarks\n6. Integration tests where applicable\n\nUse our project's testing framework and conventions.\n\n```\n\n**Test Coverage Analyzer**\n\n```codeBlockLines_e6Vv\n---\ndescription: Identify missing test coverage\n---\n\nAnalyze the current test coverage and:\n- Identify untested code paths\n- Suggest additional test cases\n- Find edge cases not covered\n- Recommend integration tests\n- Check for proper error testing\n\n```\n\n* * *\n\n## Best Practices [​](https://docs.roocode.com/features/slash-commands\\#best-practices \"Direct link to Best Practices\")\n\n**Command Naming:**\n\n- Use descriptive, action-oriented names\n- Keep names concise but clear\n- Use hyphens for multi-word commands\n- Avoid generic names like `help` or `test`\n- Note: Names are automatically slugified (lowercase, special characters removed)\n- The `.md` extension is automatically added/removed as needed\n\n**Command Content:**\n\n- Start with a clear directive\n- Use structured formats (lists, sections)\n- Include specific requirements\n- Reference project conventions\n- Keep commands focused on a single task\n\n**Organization:**\n\n- Group related commands in subdirectories\n- Use consistent naming patterns\n- Document complex commands\n- Version control your commands\n- Share team commands in the project repository\n\n* * *\n\n## Built-in Commands [​](https://docs.roocode.com/features/slash-commands\\#built-in-commands \"Direct link to Built-in Commands\")\n\nRoo Code includes powerful built-in commands that provide specialized functionality:\n\n### The `init` Command [​](https://docs.roocode.com/features/slash-commands\\#the-init-command \"Direct link to the-init-command\")\n\nThe `/init` command is a comprehensive AI assistant setup tool that analyzes your codebase and creates tailored configuration files. This powerful command:\n\n**Performs Multi-Phase Analysis:**\n\n- **Discovery Phase**: Scans your project structure and identifies key technologies\n- **Project Identification**: Determines project type, frameworks, and dependencies\n- **Architecture Mapping**: Analyzes code organization and patterns\n- **Build/Test Detection**: Identifies build tools, test frameworks, and scripts\n- **Code Style Extraction**: Captures coding conventions and patterns\n\n**Creates AI Assistant Configuration:**\n\n- Generates mode-specific `AGENTS.md` files in `.roo/rules-*` directories\n- Creates detailed rules for different AI assistant modes (Code, Architect, Debug, etc.)\n- Produces concise, high-signal documentation following the \"non-obvious-only\" principle\n- Supports multiple AI assistant formats (Claude, Cursor, Copilot)\n\n**Manages Project Setup:**\n\n- Creates comprehensive todo lists for project initialization\n- Identifies security and performance considerations\n- Documents project-specific conventions and patterns\n- Enforces quality criteria for generated documentation\n\n**Usage:**\nSimply type `/init` in the chat to analyze your codebase and set up AI assistant configuration files tailored to your project.\n\ntip\n\nThe `init` command is especially useful when starting work on a new project or when you want to establish consistent AI assistant behavior across your team.\n\n## Troubleshooting [​](https://docs.roocode.com/features/slash-commands\\#troubleshooting \"Direct link to Troubleshooting\")\n\n**Commands Not Appearing:**\n\n- **Check file location**: Ensure custom command files are in `.roo/commands/` or `~/.roo/commands/`\n- **Verify file extension**: Custom commands must be `.md` files\n- **Reload window**: Sometimes VS Code needs to be reloaded to detect new command files\n\n**Command Not Found:**\nWhen a slash command isn't found, the LLM will see an error message indicating where commands should be located. This helps guide you to create the command in the right place.\n\n**Command Template Content:**\nNew commands created through the UI receive template content to help you get started. This template includes basic structure and examples that you can customize.\n\n**Command Conflicts:**\n\n- Project commands ( `.roo/commands/`) override global commands ( `~/.roo/commands/`) with the same name\n- Built-in commands cannot be overridden\n- When creating duplicate names through the UI, numbers are appended (e.g., `new-command-1`, `new-command-2`)\n\n**File System Errors:**\n\n- **Permission Issues**: Ensure you have write permissions to the `.roo/commands/` directory\n- **Directory Creation**: The system will attempt to create the commands directory if it doesn't exist\n- **Symbolic Links**: Command directories support symbolic links for sharing commands across projects\n\nAbout Mode Commands\n\nThe slash menu includes mode-switching commands (like `/code`, `/ask`) that fundamentally change the AI's operational mode - they don't just inject text but switch the entire AI context. Custom modes you create also appear as slash commands (e.g., a mode with slug `reviewer` becomes `/reviewer`). These mode commands cannot be overridden by custom workflow commands. Learn more in [Using Modes](https://docs.roocode.com/basic-usage/using-modes) and [Custom Modes](https://docs.roocode.com/features/custom-modes).\n\n* * *\n\n## See Also [​](https://docs.roocode.com/features/slash-commands\\#see-also \"Direct link to See Also\")\n\n- [Using Modes](https://docs.roocode.com/basic-usage/using-modes) \\- Learn about Roo Code's different operational modes\n- [Custom Instructions](https://docs.roocode.com/features/custom-instructions) \\- Set persistent instructions for Roo Code\n- [Keyboard Shortcuts](https://docs.roocode.com/features/keyboard-shortcuts) \\- Quick access to commands\n- [Task Management](https://docs.roocode.com/features/task-todo-list) \\- Manage complex workflows\n\n[Edit this page](https://github.com/RooCodeInc/Roo-Code-Docs/edit/main/docs/features/slash-commands.mdx)\n\nLast updated on **Oct 3, 2025**\n\n[Previous\\\\\n\\\\\n.rooignore](https://docs.roocode.com/features/rooignore) [Next\\\\\n\\\\\nSuggested Responses](https://docs.roocode.com/features/suggested-responses)\n\n- [Overview](https://docs.roocode.com/features/slash-commands#overview)\n- [Creating Custom Commands](https://docs.roocode.com/features/slash-commands#creating-custom-commands)\n- [Command Management](https://docs.roocode.com/features/slash-commands#command-management)\n- [Using Slash Commands](https://docs.roocode.com/features/slash-commands#using-slash-commands)\n- [Argument Hints](https://docs.roocode.com/features/slash-commands#argument-hints)\n- [Examples and Use Cases](https://docs.roocode.com/features/slash-commands#examples-and-use-cases)\n- [Best Practices](https://docs.roocode.com/features/slash-commands#best-practices)\n- [Built-in Commands](https://docs.roocode.com/features/slash-commands#built-in-commands)\n  - [The `init` Command](https://docs.roocode.com/features/slash-commands#the-init-command)\n- [Troubleshooting](https://docs.roocode.com/features/slash-commands#troubleshooting)\n- [See Also](https://docs.roocode.com/features/slash-commands#see-also)\n\n![Roo Code Logo](https://docs.roocode.com/img/roo-code-logo-dark.png)\n\nEmpowering developers to build better software faster with AI-powered tools and insights.\n\n[GitHub](https://github.com/RooCodeInc/Roo-Code)[Discord](https://discord.gg/roocode)[Reddit](https://www.reddit.com/r/RooCode/)[X (Twitter)](https://x.com/roo_code)[LinkedIn](https://www.linkedin.com/company/roo-code)[TikTok](https://www.tiktok.com/@roo.code)[Bluesky](https://bsky.app/profile/roocode.bsky.social)\n\nGitHub\n\n- [Issues](https://github.com/RooCodeInc/Roo-Code/issues)\n- [Feature Requests](https://github.com/RooCodeInc/Roo-Code/discussions/categories/feature-requests?discussions_q=is%3Aopen+category%3A%22Feature+Requests%22+sort%3Atop)\n\nDownload\n\n- [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=RooVeterinaryInc.roo-cline)\n- [Open VSX Registry](https://open-vsx.org/extension/RooVeterinaryInc/roo-cline)\n\nCompany\n\n- [Contact](mailto:support@roocode.com)\n- [Careers](https://careers.roocode.com/)\n- [Website Privacy Policy](https://roocode.com/privacy)\n- [Extension Privacy Policy](https://github.com/RooCodeInc/Roo-Code/blob/main/PRIVACY.md)\n\nLike most of the internet, we use cookies. Are you OK with that?\n\nDeclineAccept",
  "metadata": {
    "og:image": "https://docs.roocode.com/img/social-share.jpg",
    "docusaurus_version": "current",
    "twitter:site": "@roo_code",
    "twitter:creator": "@roo_code",
    "docsearch:language": "en",
    "ogImage": "https://docs.roocode.com/img/social-share.jpg",
    "docusaurus_locale": "en",
    "language": "en",
    "og:type": "website",
    "viewport": [
      "width=device-width, initial-scale=1.0",
      "width=device-width, initial-scale=1"
    ],
    "generator": "Docusaurus v3.9.2",
    "twitter:image": "https://docs.roocode.com/img/social-share.jpg",
    "docsearch:version": "current",
    "og:url": "https://docs.roocode.com/features/slash-commands",
    "docusaurus_tag": "docs-default-current",
    "docsearch:docusaurus_tag": "docs-default-current",
    "og:locale": "en_US",
    "twitter:card": "summary_large_image",
    "ogLocale": "en_US",
    "ogUrl": "https://docs.roocode.com/features/slash-commands",
    "favicon": "https://docs.roocode.com/img/favicon.ico",
    "description": "Learn how to create and use custom slash commands in Roo Code to automate workflows and extend functionality with markdown-based definitions.",
    "og:description": "Learn how to create and use custom slash commands in Roo Code to automate workflows and extend functionality with markdown-based definitions.",
    "keywords": "slash commands,custom commands,Roo Code commands,command automation,workflow automation,markdown commands,.roo/commands",
    "title": "Slash Commands | Roo Code Documentation",
    "ogTitle": "Slash Commands | Roo Code Documentation",
    "ogDescription": "Learn how to create and use custom slash commands in Roo Code to automate workflows and extend functionality with markdown-based definitions.",
    "og:title": "Slash Commands | Roo Code Documentation",
    "scrapeId": "e8656636-550c-44a1-be56-93708e617157",
    "sourceURL": "https://docs.roocode.com/features/slash-commands",
    "url": "https://docs.roocode.com/features/slash-commands",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic",
    "cacheState": "miss",
    "creditsUsed": 1
  }
}