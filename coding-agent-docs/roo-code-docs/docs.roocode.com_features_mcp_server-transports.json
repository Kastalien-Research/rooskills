{
  "markdown": "Get comprehensive, actionable reviews directly in your PRs. [Try Roo's PR Reviewer](https://roocode.com/reviewer?utm_source=docs&utm_medium=banner&utm_campaign=reviewer_promo)\n\n[Skip to main content](https://docs.roocode.com/features/mcp/server-transports#__docusaurus_skipToContent_fallback)\n\n[![Roo Code Logo](https://docs.roocode.com/img/roo-code-logo-dark.png)](https://docs.roocode.com/)\n\n`ctrl`  `K`\n\n[Reddit](https://www.reddit.com/r/RooCode/ \"Reddit\")[Discord](https://discord.gg/roocode \"Discord\")\n\n[20.3k](https://github.com/RooCodeInc/Roo-Code \"GitHub Repository\") [Install ·936.3k](https://marketplace.visualstudio.com/items?itemName=RooVeterinaryInc.roo-cline \"Install VS Code Extension\")\n\n- [Welcome](https://docs.roocode.com/)\n- [Getting Started](https://docs.roocode.com/features/mcp/server-transports#)\n\n- [Tutorial Videos](https://docs.roocode.com/features/mcp/server-transports#)\n\n- [Roo Code Cloud](https://docs.roocode.com/features/mcp/server-transports#)\n\n- Features\n\n  - [API Configuration Profiles](https://docs.roocode.com/features/api-configuration-profiles)\n  - [Auto-Approving Actions](https://docs.roocode.com/features/auto-approving-actions)\n  - [Boomerang Tasks](https://docs.roocode.com/features/boomerang-tasks)\n  - [Browser Use](https://docs.roocode.com/features/browser-use)\n  - [Checkpoints](https://docs.roocode.com/features/checkpoints)\n  - [Code Actions](https://docs.roocode.com/features/code-actions)\n  - [Codebase Indexing](https://docs.roocode.com/features/codebase-indexing)\n  - [Custom Instructions](https://docs.roocode.com/features/custom-instructions)\n  - [Diagnostics Integration](https://docs.roocode.com/features/diagnostics-integration)\n  - [Customizing Modes](https://docs.roocode.com/features/custom-modes)\n  - [Diff/Fast Edits](https://docs.roocode.com/features/fast-edits)\n  - [Enhance Prompt](https://docs.roocode.com/features/enhance-prompt)\n  - [Import/Export/Reset Settings](https://docs.roocode.com/features/settings-management)\n  - [Intelligent Context Condensing](https://docs.roocode.com/features/intelligent-context-condensing)\n  - [Keyboard Navigation](https://docs.roocode.com/features/keyboard-shortcuts)\n  - [Roo Code Marketplace](https://docs.roocode.com/features/marketplace)\n  - [Message Queueing](https://docs.roocode.com/features/message-queueing)\n  - [Model Temperature](https://docs.roocode.com/features/model-temperature)\n  - [Multi-File Reads](https://docs.roocode.com/features/concurrent-file-reads)\n  - [.rooignore](https://docs.roocode.com/features/rooignore)\n  - [Slash Commands](https://docs.roocode.com/features/slash-commands)\n  - [Suggested Responses](https://docs.roocode.com/features/suggested-responses)\n  - [Task Todo List](https://docs.roocode.com/features/task-todo-list)\n  - [Terminal Shell Integration](https://docs.roocode.com/features/shell-integration)\n  - [MCP](https://docs.roocode.com/features/mcp/server-transports#)\n\n    - [MCP Overview](https://docs.roocode.com/features/mcp/overview)\n    - [Using MCP in Roo Code](https://docs.roocode.com/features/mcp/using-mcp-in-roo)\n    - [What is MCP?](https://docs.roocode.com/features/mcp/what-is-mcp)\n    - [STDIO, Streamable HTTP & SSE Transports](https://docs.roocode.com/features/mcp/server-transports)\n    - [MCP vs API](https://docs.roocode.com/features/mcp/mcp-vs-api)\n    - [Recommended MCP Servers](https://docs.roocode.com/features/mcp/recommended-mcp-servers)\n  - [Experimental](https://docs.roocode.com/features/mcp/server-transports#)\n\n  - [Additional Features](https://docs.roocode.com/features/more-features)\n- [Advanced Usage](https://docs.roocode.com/features/mcp/server-transports#)\n\n- [Model Providers](https://docs.roocode.com/features/mcp/server-transports#)\n\n- [FAQ](https://docs.roocode.com/features/mcp/server-transports#)\n\n- [Contributing (GitHub)](https://github.com/RooCodeInc/Roo-Code/blob/main/CONTRIBUTING.md)\n- [Roocabulary (GitHub)](https://github.com/cannuri/Roocabulary)\n- [Update Notes](https://docs.roocode.com/features/mcp/server-transports#)\n\n\n- [Home page](https://docs.roocode.com/)\n- Features\n- MCP\n- STDIO, Streamable HTTP & SSE Transports\n\nCopy Page\n\nOn this page\n\n# MCP Server Transports: STDIO, Streamable HTTP & SSE\n\nModel Context Protocol (MCP) supports three primary transport mechanisms for communication between Roo Code and MCP servers: Standard Input/Output (STDIO), Streamable HTTP (the modern standard), and Server-Sent Events (SSE) (for legacy use). Each has distinct characteristics, advantages, and use cases.\n\n* * *\n\n## STDIO Transport [​](https://docs.roocode.com/features/mcp/server-transports\\#stdio-transport \"Direct link to STDIO Transport\")\n\nSTDIO transport runs locally on your machine and communicates via standard input/output streams.\n\n### How STDIO Transport Works [​](https://docs.roocode.com/features/mcp/server-transports\\#how-stdio-transport-works \"Direct link to How STDIO Transport Works\")\n\n1. The client (Roo Code) spawns an MCP server as a child process\n2. Communication happens through process streams: client writes to server's STDIN, server responds to STDOUT\n3. Each message is delimited by a newline character\n4. Messages are formatted as JSON-RPC 2.0\n\n```codeBlockLines_e6Vv\nClient                    Server\n  |                         |\n  |---- JSON message ------>| (via STDIN)\n  |                         | (processes request)\n  |<---- JSON message ------| (via STDOUT)\n  |                         |\n\n```\n\n### STDIO Characteristics [​](https://docs.roocode.com/features/mcp/server-transports\\#stdio-characteristics \"Direct link to STDIO Characteristics\")\n\n- **Locality**: Runs on the same machine as Roo Code\n- **Performance**: Very low latency and overhead (no network stack involved)\n- **Simplicity**: Direct process communication without network configuration\n- **Relationship**: One-to-one relationship between client and server\n- **Security**: Inherently more secure as no network exposure\n\n### When to Use STDIO [​](https://docs.roocode.com/features/mcp/server-transports\\#when-to-use-stdio \"Direct link to When to Use STDIO\")\n\nSTDIO transport is ideal for:\n\n- Local integrations and tools running on the same machine\n- Security-sensitive operations\n- Low-latency requirements\n- Single-client scenarios (one Roo Code instance per server)\n- Command-line tools or IDE extensions\n\n### STDIO Implementation Example [​](https://docs.roocode.com/features/mcp/server-transports\\#stdio-implementation-example \"Direct link to STDIO Implementation Example\")\n\n```codeBlockLines_e6Vv\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\n\nconst server = new Server({name: 'local-server', version: '1.0.0'});\n// Register tools...\n\n// Use STDIO transport\nconst transport = new StdioServerTransport(server);\ntransport.listen();\n\n```\n\n* * *\n\n## Streamable HTTP Transport [​](https://docs.roocode.com/features/mcp/server-transports\\#streamable-http-transport \"Direct link to Streamable HTTP Transport\")\n\nStreamable HTTP transport is the modern standard for remote MCP server communication, replacing the older HTTP+SSE transport. It operates over HTTP/HTTPS and allows for more flexible server implementations.\n\n### How Streamable HTTP Transport Works [​](https://docs.roocode.com/features/mcp/server-transports\\#how-streamable-http-transport-works \"Direct link to How Streamable HTTP Transport Works\")\n\n1. The server provides a single HTTP endpoint (MCP endpoint) that supports both POST and GET methods.\n2. The client (Roo Code) sends requests to this MCP endpoint using HTTP POST.\n3. The server processes the request and sends back a response.\n4. Optionally, the server can use Server-Sent Events (SSE) over the same connection to stream multiple messages or notifications to the client. This allows for basic request-response interactions as well as more advanced streaming and server-initiated communication.\n\n```codeBlockLines_e6Vv\nClient                             Server\n  |                                  |\n  |---- HTTP POST /mcp_endpoint ---->| (client request)\n  |                                  | (processes request)\n  |<--- HTTP Response / SSE Stream --| (server response / stream)\n  |                                  |\n\n```\n\n### Streamable HTTP Characteristics [​](https://docs.roocode.com/features/mcp/server-transports\\#streamable-http-characteristics \"Direct link to Streamable HTTP Characteristics\")\n\n- **Modern Standard**: Preferred method for new remote MCP server implementations.\n- **Remote Access**: Can be hosted on a different machine from Roo Code.\n- **Scalability**: Can handle multiple client connections concurrently.\n- **Protocol**: Works over standard HTTP/HTTPS.\n- **Flexibility**: Supports simple request-response and advanced streaming.\n- **Single Endpoint**: Uses a single URL path for all MCP communication.\n- **Authentication**: Can use standard HTTP authentication mechanisms.\n- **Backwards Compatibility**: Servers can maintain compatibility with older HTTP+SSE clients.\n\n### When to Use Streamable HTTP [​](https://docs.roocode.com/features/mcp/server-transports\\#when-to-use-streamable-http \"Direct link to When to Use Streamable HTTP\")\n\nStreamable HTTP transport is ideal for:\n\n- All new remote MCP server developments.\n- Servers requiring robust, scalable, and flexible communication.\n- Integrations that might involve streaming data or server-sent notifications.\n- Public services or centralized tools.\n- Replacing legacy SSE transport implementations.\n\n### Streamable HTTP Implementation Example [​](https://docs.roocode.com/features/mcp/server-transports\\#streamable-http-implementation-example \"Direct link to Streamable HTTP Implementation Example\")\n\nConfiguration in `settings.json`:\n\n```codeBlockLines_e6Vv\n\"mcp.servers\": {\n  \"StreamableHTTPMCPName\": {\n    \"type\": \"streamable-http\",\n    \"url\": \"http://localhost:8080/mcp\"\n  }\n}\n\n```\n\nFor server-side implementation, refer to the MCP SDK documentation for `StreamableHTTPClientTransport`.\n\n### Backwards Compatibility with HTTP+SSE [​](https://docs.roocode.com/features/mcp/server-transports\\#backwards-compatibility-with-httpsse \"Direct link to Backwards Compatibility with HTTP+SSE\")\n\nClients and servers can maintain backwards compatibility with the deprecated HTTP+SSE transport (from protocol version 2024-11-05).\n\nServers wanting to support older clients should:\n\n- Continue to host both the SSE ( `/events`) and POST ( `/message`) endpoints of the old transport, alongside the new “MCP endpoint” defined for the Streamable HTTP transport.\n\n* * *\n\n## SSE Transport (Legacy) [​](https://docs.roocode.com/features/mcp/server-transports\\#sse-transport-legacy \"Direct link to SSE Transport (Legacy)\")\n\nServer-Sent Events (SSE) transport is a legacy method for remote server communication over HTTP/HTTPS. For new implementations, **Streamable HTTP transport is recommended.** SSE remains available for compatibility with older MCP servers.\n\n### How SSE Transport Works [​](https://docs.roocode.com/features/mcp/server-transports\\#how-sse-transport-works \"Direct link to How SSE Transport Works\")\n\n1. The client (Roo Code) connects to the server's SSE endpoint via HTTP GET request\n2. This establishes a persistent connection where the server can push events to the client\n3. For client-to-server communication, the client makes HTTP POST requests to a separate endpoint\n4. Communication happens over two channels:\n   - Event Stream (GET): Server-to-client updates\n   - Message Endpoint (POST): Client-to-server requests\n\n```codeBlockLines_e6Vv\nClient                             Server\n  |                                  |\n  |---- HTTP GET /events ----------->| (establish SSE connection)\n  |<---- SSE event stream -----------| (persistent connection)\n  |                                  |\n  |---- HTTP POST /message --------->| (client request)\n  |<---- SSE event with response ----| (server response)\n  |                                  |\n\n```\n\n### SSE Characteristics [​](https://docs.roocode.com/features/mcp/server-transports\\#sse-characteristics \"Direct link to SSE Characteristics\")\n\n- **Remote Access**: Can be hosted on a different machine from Roo Code\n- **Scalability**: Can handle multiple client connections concurrently\n- **Protocol**: Works over standard HTTP (no special protocols needed)\n- **Persistence**: Maintains a persistent connection for server-to-client messages\n- **Authentication**: Can use standard HTTP authentication mechanisms\n\n### When to Use SSE [​](https://docs.roocode.com/features/mcp/server-transports\\#when-to-use-sse \"Direct link to When to Use SSE\")\n\nSSE transport is better for:\n\n- Remote access across networks\n- Multi-client scenarios\n- Public services\n- Centralized tools that many users need to access\n- Integration with web services\n\n### SSE Implementation Example [​](https://docs.roocode.com/features/mcp/server-transports\\#sse-implementation-example \"Direct link to SSE Implementation Example\")\n\n```codeBlockLines_e6Vv\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';\nimport express from 'express';\n\nconst app = express();\nconst server = new Server({name: 'remote-server', version: '1.0.0'});\n// Register tools...\n\n// Use SSE transport\nconst transport = new SSEServerTransport(server);\napp.use('/mcp', transport.requestHandler());\napp.listen(3000, () => {\n  console.log('MCP server listening on port 3000');\n});\n\n```\n\n* * *\n\n## Local vs. Hosted: Deployment Aspects [​](https://docs.roocode.com/features/mcp/server-transports\\#local-vs-hosted-deployment-aspects \"Direct link to Local vs. Hosted: Deployment Aspects\")\n\nThe choice between STDIO and SSE transports directly impacts how you'll deploy and manage your MCP servers.\n\n### STDIO: Local Deployment Model [​](https://docs.roocode.com/features/mcp/server-transports\\#stdio-local-deployment-model \"Direct link to STDIO: Local Deployment Model\")\n\nSTDIO servers run locally on the same machine as Roo Code, which has several important implications:\n\n- **Installation**: The server executable must be installed on each user's machine\n- **Distribution**: You need to provide installation packages for different operating systems\n- **Updates**: Each instance must be updated separately\n- **Resources**: Uses the local machine's CPU, memory, and disk\n- **Access Control**: Relies on the local machine's filesystem permissions\n- **Integration**: Easy integration with local system resources (files, processes)\n- **Execution**: Starts and stops with Roo Code (child process lifecycle)\n- **Dependencies**: Any dependencies must be installed on the user's machine\n\n#### Practical Example [​](https://docs.roocode.com/features/mcp/server-transports\\#practical-example \"Direct link to Practical Example\")\n\nA local file search tool using STDIO would:\n\n- Run on the user's machine\n- Have direct access to the local filesystem\n- Start when needed by Roo Code\n- Not require network configuration\n- Need to be installed alongside Roo Code or via a package manager\n\n### Streamable HTTP / SSE (Legacy): Hosted Deployment Model [​](https://docs.roocode.com/features/mcp/server-transports\\#streamable-http--sse-legacy-hosted-deployment-model \"Direct link to Streamable HTTP / SSE (Legacy): Hosted Deployment Model\")\n\nStreamable HTTP (recommended) and legacy SSE servers can be deployed to remote servers and accessed over the network:\n\n- **Installation**: Installed once on a server, accessed by many users\n- **Distribution**: Single deployment serves multiple clients\n- **Updates**: Centralized updates affect all users immediately\n- **Resources**: Uses server resources, not local machine resources\n- **Access Control**: Managed through authentication and authorization systems\n- **Integration**: More complex integration with user-specific resources\n- **Execution**: Runs as an independent service (often continuously)\n- **Dependencies**: Managed on the server, not on user machines\n\n#### Practical Example [​](https://docs.roocode.com/features/mcp/server-transports\\#practical-example-1 \"Direct link to Practical Example\")\n\nA database query tool using SSE would:\n\n- Run on a central server\n- Connect to databases with server-side credentials\n- Be continuously available for multiple users\n- Require proper network security configuration\n- Be deployed using container or cloud technologies\n\n### Hybrid Approaches [​](https://docs.roocode.com/features/mcp/server-transports\\#hybrid-approaches \"Direct link to Hybrid Approaches\")\n\nSome scenarios benefit from a hybrid approach:\n\n1. **STDIO with Network Access**: A local STDIO server that acts as a proxy to remote services\n2. **SSE with Local Commands**: A remote SSE server that can trigger operations on the client machine through callbacks\n3. **Gateway Pattern**: STDIO servers for local operations that connect to SSE servers for specialized functions\n\n* * *\n\n## Choosing Between Transports [​](https://docs.roocode.com/features/mcp/server-transports\\#choosing-between-transports \"Direct link to Choosing Between Transports\")\n\n| Consideration | STDIO | Streamable HTTP | SSE (Legacy) |\n| --- | --- | --- | --- |\n| **Location** | Local machine only | Local or remote | Local or remote |\n| **Clients** | Single client | Multiple clients | Multiple clients |\n| **Performance** | Lower latency | Higher latency (network overhead) | Higher latency (network overhead) |\n| **Setup Complexity** | Simpler | More complex (requires HTTP server) | More complex (requires HTTP server, potentially two endpoints) |\n| **Security** | Inherently secure | Requires explicit security measures | Requires explicit security measures |\n| **Network Access** | Not needed | Required | Required |\n| **Scalability** | Limited to local machine | Can distribute across network | Can distribute across network |\n| **Deployment** | Per-user installation | Centralized installation | Centralized installation |\n| **Updates** | Distributed updates | Centralized updates | Centralized updates |\n| **Resource Usage** | Uses client resources | Uses server resources | Uses server resources |\n| **Dependencies** | Client-side dependencies | Server-side dependencies | Server-side dependencies |\n| **Recommendation** | Ideal for local, secure, single-client tools | **Modern standard for all new remote servers** | Legacy, for existing older servers |\n\n* * *\n\n## Configuring Transports in Roo Code [​](https://docs.roocode.com/features/mcp/server-transports\\#configuring-transports-in-roo-code \"Direct link to Configuring Transports in Roo Code\")\n\nFor detailed information on configuring STDIO, Streamable HTTP, and SSE (Legacy) transports in Roo Code, including example configurations, see the [Understanding Transport Types](https://docs.roocode.com/features/mcp/using-mcp-in-roo#understanding-transport-types) section in the Using MCP in Roo Code guide.\n\n[Edit this page](https://github.com/RooCodeInc/Roo-Code-Docs/edit/main/docs/features/mcp/server-transports.md)\n\nLast updated on **Oct 3, 2025**\n\n[Previous\\\\\n\\\\\nWhat is MCP?](https://docs.roocode.com/features/mcp/what-is-mcp) [Next\\\\\n\\\\\nMCP vs API](https://docs.roocode.com/features/mcp/mcp-vs-api)\n\n- [STDIO Transport](https://docs.roocode.com/features/mcp/server-transports#stdio-transport)\n  - [How STDIO Transport Works](https://docs.roocode.com/features/mcp/server-transports#how-stdio-transport-works)\n  - [STDIO Characteristics](https://docs.roocode.com/features/mcp/server-transports#stdio-characteristics)\n  - [When to Use STDIO](https://docs.roocode.com/features/mcp/server-transports#when-to-use-stdio)\n  - [STDIO Implementation Example](https://docs.roocode.com/features/mcp/server-transports#stdio-implementation-example)\n- [Streamable HTTP Transport](https://docs.roocode.com/features/mcp/server-transports#streamable-http-transport)\n  - [How Streamable HTTP Transport Works](https://docs.roocode.com/features/mcp/server-transports#how-streamable-http-transport-works)\n  - [Streamable HTTP Characteristics](https://docs.roocode.com/features/mcp/server-transports#streamable-http-characteristics)\n  - [When to Use Streamable HTTP](https://docs.roocode.com/features/mcp/server-transports#when-to-use-streamable-http)\n  - [Streamable HTTP Implementation Example](https://docs.roocode.com/features/mcp/server-transports#streamable-http-implementation-example)\n  - [Backwards Compatibility with HTTP+SSE](https://docs.roocode.com/features/mcp/server-transports#backwards-compatibility-with-httpsse)\n- [SSE Transport (Legacy)](https://docs.roocode.com/features/mcp/server-transports#sse-transport-legacy)\n  - [How SSE Transport Works](https://docs.roocode.com/features/mcp/server-transports#how-sse-transport-works)\n  - [SSE Characteristics](https://docs.roocode.com/features/mcp/server-transports#sse-characteristics)\n  - [When to Use SSE](https://docs.roocode.com/features/mcp/server-transports#when-to-use-sse)\n  - [SSE Implementation Example](https://docs.roocode.com/features/mcp/server-transports#sse-implementation-example)\n- [Local vs. Hosted: Deployment Aspects](https://docs.roocode.com/features/mcp/server-transports#local-vs-hosted-deployment-aspects)\n  - [STDIO: Local Deployment Model](https://docs.roocode.com/features/mcp/server-transports#stdio-local-deployment-model)\n  - [Streamable HTTP / SSE (Legacy): Hosted Deployment Model](https://docs.roocode.com/features/mcp/server-transports#streamable-http--sse-legacy-hosted-deployment-model)\n  - [Hybrid Approaches](https://docs.roocode.com/features/mcp/server-transports#hybrid-approaches)\n- [Choosing Between Transports](https://docs.roocode.com/features/mcp/server-transports#choosing-between-transports)\n- [Configuring Transports in Roo Code](https://docs.roocode.com/features/mcp/server-transports#configuring-transports-in-roo-code)\n\n![Roo Code Logo](https://docs.roocode.com/img/roo-code-logo-dark.png)\n\nEmpowering developers to build better software faster with AI-powered tools and insights.\n\n[GitHub](https://github.com/RooCodeInc/Roo-Code)[Discord](https://discord.gg/roocode)[Reddit](https://www.reddit.com/r/RooCode/)[X (Twitter)](https://x.com/roo_code)[LinkedIn](https://www.linkedin.com/company/roo-code)[TikTok](https://www.tiktok.com/@roo.code)[Bluesky](https://bsky.app/profile/roocode.bsky.social)\n\nGitHub\n\n- [Issues](https://github.com/RooCodeInc/Roo-Code/issues)\n- [Feature Requests](https://github.com/RooCodeInc/Roo-Code/discussions/categories/feature-requests?discussions_q=is%3Aopen+category%3A%22Feature+Requests%22+sort%3Atop)\n\nDownload\n\n- [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=RooVeterinaryInc.roo-cline)\n- [Open VSX Registry](https://open-vsx.org/extension/RooVeterinaryInc/roo-cline)\n\nCompany\n\n- [Contact](mailto:support@roocode.com)\n- [Careers](https://careers.roocode.com/)\n- [Website Privacy Policy](https://roocode.com/privacy)\n- [Extension Privacy Policy](https://github.com/RooCodeInc/Roo-Code/blob/main/PRIVACY.md)\n\nLike most of the internet, we use cookies. Are you OK with that?\n\nDeclineAccept",
  "metadata": {
    "ogTitle": "MCP Server Transports: STDIO, Streamable HTTP & SSE | Roo Code Documentation",
    "docsearch:docusaurus_tag": "docs-default-current",
    "ogImage": "https://docs.roocode.com/img/social-share.jpg",
    "twitter:image": "https://docs.roocode.com/img/social-share.jpg",
    "og:type": "website",
    "docusaurus_locale": "en",
    "twitter:creator": "@roo_code",
    "viewport": "width=device-width, initial-scale=1.0",
    "og:title": "MCP Server Transports: STDIO, Streamable HTTP & SSE | Roo Code Documentation",
    "docsearch:language": "en",
    "twitter:card": "summary_large_image",
    "ogUrl": "https://docs.roocode.com/features/mcp/server-transports",
    "ogDescription": "Comprehensive guide to MCP transport mechanisms in Roo Code. Compare STDIO, Streamable HTTP, and SSE transports for local and remote server deployments.",
    "favicon": "https://docs.roocode.com/img/favicon.ico",
    "generator": "Docusaurus v3.9.2",
    "title": "MCP Server Transports: STDIO, Streamable HTTP & SSE | Roo Code Documentation",
    "og:locale": "en_US",
    "docusaurus_version": "current",
    "docusaurus_tag": "docs-default-current",
    "og:image": "https://docs.roocode.com/img/social-share.jpg",
    "description": "Comprehensive guide to MCP transport mechanisms in Roo Code. Compare STDIO, Streamable HTTP, and SSE transports for local and remote server deployments.",
    "og:description": "Comprehensive guide to MCP transport mechanisms in Roo Code. Compare STDIO, Streamable HTTP, and SSE transports for local and remote server deployments.",
    "og:url": "https://docs.roocode.com/features/mcp/server-transports",
    "docsearch:version": "current",
    "keywords": "MCP transports,STDIO transport,Streamable HTTP,SSE transport,MCP deployment,local vs remote MCP",
    "twitter:site": "@roo_code",
    "language": "en",
    "ogLocale": "en_US",
    "scrapeId": "2151a135-ea27-43f3-89fc-0cb1beda7982",
    "sourceURL": "https://docs.roocode.com/features/mcp/server-transports",
    "url": "https://docs.roocode.com/features/mcp/server-transports",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic",
    "cacheState": "miss",
    "indexId": "dec452d1-78a4-4c7e-ae87-69368bca4e13",
    "creditsUsed": 1
  }
}