{
  "markdown": "Get comprehensive, actionable reviews directly in your PRs. [Try Roo's PR Reviewer](https://roocode.com/reviewer?utm_source=docs&utm_medium=banner&utm_campaign=reviewer_promo)\n\n[Skip to main content](https://docs.roocode.com/features/mcp/mcp-vs-api#__docusaurus_skipToContent_fallback)\n\n[![Roo Code Logo](https://docs.roocode.com/img/roo-code-logo-dark.png)](https://docs.roocode.com/)\n\n`ctrl`  `K`\n\n[Reddit](https://www.reddit.com/r/RooCode/ \"Reddit\")[Discord](https://discord.gg/roocode \"Discord\")\n\n[20.3k](https://github.com/RooCodeInc/Roo-Code \"GitHub Repository\") [Install ·935.8k](https://marketplace.visualstudio.com/items?itemName=RooVeterinaryInc.roo-cline \"Install VS Code Extension\")\n\n- [Welcome](https://docs.roocode.com/)\n- [Getting Started](https://docs.roocode.com/features/mcp/mcp-vs-api#)\n\n- [Tutorial Videos](https://docs.roocode.com/features/mcp/mcp-vs-api#)\n\n- [Roo Code Cloud](https://docs.roocode.com/features/mcp/mcp-vs-api#)\n\n- Features\n\n  - [API Configuration Profiles](https://docs.roocode.com/features/api-configuration-profiles)\n  - [Auto-Approving Actions](https://docs.roocode.com/features/auto-approving-actions)\n  - [Boomerang Tasks](https://docs.roocode.com/features/boomerang-tasks)\n  - [Browser Use](https://docs.roocode.com/features/browser-use)\n  - [Checkpoints](https://docs.roocode.com/features/checkpoints)\n  - [Code Actions](https://docs.roocode.com/features/code-actions)\n  - [Codebase Indexing](https://docs.roocode.com/features/codebase-indexing)\n  - [Custom Instructions](https://docs.roocode.com/features/custom-instructions)\n  - [Diagnostics Integration](https://docs.roocode.com/features/diagnostics-integration)\n  - [Customizing Modes](https://docs.roocode.com/features/custom-modes)\n  - [Diff/Fast Edits](https://docs.roocode.com/features/fast-edits)\n  - [Enhance Prompt](https://docs.roocode.com/features/enhance-prompt)\n  - [Import/Export/Reset Settings](https://docs.roocode.com/features/settings-management)\n  - [Intelligent Context Condensing](https://docs.roocode.com/features/intelligent-context-condensing)\n  - [Keyboard Navigation](https://docs.roocode.com/features/keyboard-shortcuts)\n  - [Roo Code Marketplace](https://docs.roocode.com/features/marketplace)\n  - [Message Queueing](https://docs.roocode.com/features/message-queueing)\n  - [Model Temperature](https://docs.roocode.com/features/model-temperature)\n  - [Multi-File Reads](https://docs.roocode.com/features/concurrent-file-reads)\n  - [.rooignore](https://docs.roocode.com/features/rooignore)\n  - [Slash Commands](https://docs.roocode.com/features/slash-commands)\n  - [Suggested Responses](https://docs.roocode.com/features/suggested-responses)\n  - [Task Todo List](https://docs.roocode.com/features/task-todo-list)\n  - [Terminal Shell Integration](https://docs.roocode.com/features/shell-integration)\n  - [MCP](https://docs.roocode.com/features/mcp/mcp-vs-api#)\n\n    - [MCP Overview](https://docs.roocode.com/features/mcp/overview)\n    - [Using MCP in Roo Code](https://docs.roocode.com/features/mcp/using-mcp-in-roo)\n    - [What is MCP?](https://docs.roocode.com/features/mcp/what-is-mcp)\n    - [STDIO, Streamable HTTP & SSE Transports](https://docs.roocode.com/features/mcp/server-transports)\n    - [MCP vs API](https://docs.roocode.com/features/mcp/mcp-vs-api)\n    - [Recommended MCP Servers](https://docs.roocode.com/features/mcp/recommended-mcp-servers)\n  - [Experimental](https://docs.roocode.com/features/mcp/mcp-vs-api#)\n\n  - [Additional Features](https://docs.roocode.com/features/more-features)\n- [Advanced Usage](https://docs.roocode.com/features/mcp/mcp-vs-api#)\n\n- [Model Providers](https://docs.roocode.com/features/mcp/mcp-vs-api#)\n\n- [FAQ](https://docs.roocode.com/features/mcp/mcp-vs-api#)\n\n- [Contributing (GitHub)](https://github.com/RooCodeInc/Roo-Code/blob/main/CONTRIBUTING.md)\n- [Roocabulary (GitHub)](https://github.com/cannuri/Roocabulary)\n- [Update Notes](https://docs.roocode.com/features/mcp/mcp-vs-api#)\n\n\n- [Home page](https://docs.roocode.com/)\n- Features\n- MCP\n- MCP vs API\n\nCopy Page\n\nOn this page\n\n# MCP vs REST APIs: A Fundamental Distinction\n\nComparing REST APIs to the Model Context Protocol (MCP) is a category error. They operate at different layers of abstraction and serve fundamentally different purposes in AI systems.\n\n* * *\n\n## Architectural Differences [​](https://docs.roocode.com/features/mcp/mcp-vs-api\\#architectural-differences \"Direct link to Architectural Differences\")\n\n| Feature | MCP | REST APIs |\n| --- | --- | --- |\n| State Management | **Stateful** \\- maintains context across interactions | **Stateless** \\- each request is independent |\n| Connection Type | Persistent, bidirectional connections | One-way request/response |\n| Communication Style | JSON-RPC based with ongoing sessions | HTTP-based with discrete requests |\n| Context Handling | Context is intrinsic to the protocol | Context must be manually managed |\n| Tool Discovery | Runtime discovery of available tools | Design-time integration requiring prior knowledge |\n| Integration Approach | Runtime integration with dynamic capabilities | Design-time integration requiring code changes |\n\n* * *\n\n## Different Layers, Different Purposes [​](https://docs.roocode.com/features/mcp/mcp-vs-api\\#different-layers-different-purposes \"Direct link to Different Layers, Different Purposes\")\n\nREST APIs and MCP serve different tiers in the technology stack:\n\n1. **REST**: Low-level web communication pattern that exposes operations on resources\n2. **MCP**: High-level AI protocol that orchestrates tool usage and maintains context\n\nMCP often uses REST APIs internally, but abstracts them away for the AI. Think of MCP as middleware that turns discrete web services into a cohesive environment the AI can operate within.\n\n* * *\n\n## Context Preservation: Critical for AI Workflows [​](https://docs.roocode.com/features/mcp/mcp-vs-api\\#context-preservation-critical-for-ai-workflows \"Direct link to Context Preservation: Critical for AI Workflows\")\n\nMCP's stateful design solves a key limitation of REST in AI applications:\n\n- **REST Approach**: Each call is isolated, requiring manual context passing between steps\n- **MCP Approach**: One conversation context persists across multiple tool uses\n\nFor example, an AI debugging a codebase can open a file, run tests, and identify errors without losing context between steps. The MCP session maintains awareness of previous actions and results.\n\n* * *\n\n## Dynamic Tool Discovery [​](https://docs.roocode.com/features/mcp/mcp-vs-api\\#dynamic-tool-discovery \"Direct link to Dynamic Tool Discovery\")\n\nMCP enables an AI to discover and use tools at runtime:\n\n```codeBlockLines_e6Vv\n// AI discovers available tools\n{\n  \"tools\": [\\\n    {\\\n      \"name\": \"readFile\",\\\n      \"description\": \"Reads content from a file\",\\\n      \"parameters\": {\\\n        \"path\": { \"type\": \"string\", \"description\": \"File path\" }\\\n      }\\\n    },\\\n    {\\\n      \"name\": \"createTicket\",\\\n      \"description\": \"Creates a ticket in issue tracker\",\\\n      \"parameters\": {\\\n        \"title\": { \"type\": \"string\" },\\\n        \"description\": { \"type\": \"string\" }\\\n      }\\\n    }\\\n  ]\n}\n\n```\n\nThis \"plug-and-play\" capability allows new tools to be added without redeploying or modifying the AI itself.\n\n* * *\n\n## Real-World Example: Multi-Tool Workflow [​](https://docs.roocode.com/features/mcp/mcp-vs-api\\#real-world-example-multi-tool-workflow \"Direct link to Real-World Example: Multi-Tool Workflow\")\n\nConsider a task requiring multiple services: \"Check recent commits, create a JIRA ticket for the bug fix, and post to Slack.\"\n\n**REST-based approach**:\n\n- Requires separate integrations for Git, JIRA, and Slack APIs\n- Needs custom code to manage context between calls\n- Breaks if any service changes its API\n\n**MCP-based approach**:\n\n- One unified protocol for all tools\n- Maintains context across the entire workflow\n- New tools can be swapped in without code changes\n\n* * *\n\n## Why Roo Code Uses MCP [​](https://docs.roocode.com/features/mcp/mcp-vs-api\\#why-roo-code-uses-mcp \"Direct link to Why Roo Code Uses MCP\")\n\nRoo Code leverages MCP to provide:\n\n1. **Extensibility**: Add unlimited custom tools without waiting for official integration\n2. **Contextual awareness**: Tools can access conversation history and project context\n3. **Simplified integration**: One standard protocol rather than numerous API patterns\n4. **Runtime flexibility**: Discover and use new capabilities on-the-fly\n\nMCP creates a universal connector between Roo Code and external services, with REST APIs often powering those services behind the scenes.\n\n* * *\n\n## Conclusion: Complementary, Not Competing Technologies [​](https://docs.roocode.com/features/mcp/mcp-vs-api\\#conclusion-complementary-not-competing-technologies \"Direct link to Conclusion: Complementary, Not Competing Technologies\")\n\nMCP doesn't replace REST APIs - it builds upon them. REST excels at providing discrete services, while MCP excels at orchestrating those services for AI agents.\n\nThe critical distinction is that MCP is AI-native: it treats the model as a first-class user, providing the contextual, stateful interaction layer that AI agents need to function effectively in complex environments.\n\n[Edit this page](https://github.com/RooCodeInc/Roo-Code-Docs/edit/main/docs/features/mcp/mcp-vs-api.md)\n\nLast updated on **Oct 3, 2025**\n\n[Previous\\\\\n\\\\\nSTDIO, Streamable HTTP & SSE Transports](https://docs.roocode.com/features/mcp/server-transports) [Next\\\\\n\\\\\nRecommended MCP Servers](https://docs.roocode.com/features/mcp/recommended-mcp-servers)\n\n- [Architectural Differences](https://docs.roocode.com/features/mcp/mcp-vs-api#architectural-differences)\n- [Different Layers, Different Purposes](https://docs.roocode.com/features/mcp/mcp-vs-api#different-layers-different-purposes)\n- [Context Preservation: Critical for AI Workflows](https://docs.roocode.com/features/mcp/mcp-vs-api#context-preservation-critical-for-ai-workflows)\n- [Dynamic Tool Discovery](https://docs.roocode.com/features/mcp/mcp-vs-api#dynamic-tool-discovery)\n- [Real-World Example: Multi-Tool Workflow](https://docs.roocode.com/features/mcp/mcp-vs-api#real-world-example-multi-tool-workflow)\n- [Why Roo Code Uses MCP](https://docs.roocode.com/features/mcp/mcp-vs-api#why-roo-code-uses-mcp)\n- [Conclusion: Complementary, Not Competing Technologies](https://docs.roocode.com/features/mcp/mcp-vs-api#conclusion-complementary-not-competing-technologies)\n\n![Roo Code Logo](https://docs.roocode.com/img/roo-code-logo-dark.png)\n\nEmpowering developers to build better software faster with AI-powered tools and insights.\n\n[GitHub](https://github.com/RooCodeInc/Roo-Code)[Discord](https://discord.gg/roocode)[Reddit](https://www.reddit.com/r/RooCode/)[X (Twitter)](https://x.com/roo_code)[LinkedIn](https://www.linkedin.com/company/roo-code)[TikTok](https://www.tiktok.com/@roo.code)[Bluesky](https://bsky.app/profile/roocode.bsky.social)\n\nGitHub\n\n- [Issues](https://github.com/RooCodeInc/Roo-Code/issues)\n- [Feature Requests](https://github.com/RooCodeInc/Roo-Code/discussions/categories/feature-requests?discussions_q=is%3Aopen+category%3A%22Feature+Requests%22+sort%3Atop)\n\nDownload\n\n- [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=RooVeterinaryInc.roo-cline)\n- [Open VSX Registry](https://open-vsx.org/extension/RooVeterinaryInc/roo-cline)\n\nCompany\n\n- [Contact](mailto:support@roocode.com)\n- [Careers](https://careers.roocode.com/)\n- [Website Privacy Policy](https://roocode.com/privacy)\n- [Extension Privacy Policy](https://github.com/RooCodeInc/Roo-Code/blob/main/PRIVACY.md)\n\nLike most of the internet, we use cookies. Are you OK with that?\n\nDeclineAccept",
  "metadata": {
    "og:locale": "en_US",
    "og:title": "MCP vs REST APIs: A Fundamental Distinction | Roo Code Documentation",
    "description": "Learn the key differences between Model Context Protocol (MCP) and REST APIs. Understand why MCP is AI-native and how it enables stateful, contextual interactions.",
    "ogTitle": "MCP vs REST APIs: A Fundamental Distinction | Roo Code Documentation",
    "twitter:site": "@roo_code",
    "og:type": "website",
    "docsearch:docusaurus_tag": "docs-default-current",
    "og:description": "Learn the key differences between Model Context Protocol (MCP) and REST APIs. Understand why MCP is AI-native and how it enables stateful, contextual interactions.",
    "keywords": "MCP vs API,Model Context Protocol,REST API comparison,AI protocols,stateful connections,tool discovery",
    "ogDescription": "Learn the key differences between Model Context Protocol (MCP) and REST APIs. Understand why MCP is AI-native and how it enables stateful, contextual interactions.",
    "ogImage": "https://docs.roocode.com/img/social-share.jpg",
    "generator": "Docusaurus v3.9.2",
    "og:url": "https://docs.roocode.com/features/mcp/mcp-vs-api",
    "viewport": "width=device-width, initial-scale=1.0",
    "language": "en",
    "favicon": "https://docs.roocode.com/img/favicon.ico",
    "docusaurus_locale": "en",
    "ogUrl": "https://docs.roocode.com/features/mcp/mcp-vs-api",
    "docsearch:language": "en",
    "twitter:card": "summary_large_image",
    "twitter:creator": "@roo_code",
    "ogLocale": "en_US",
    "og:image": "https://docs.roocode.com/img/social-share.jpg",
    "twitter:image": "https://docs.roocode.com/img/social-share.jpg",
    "docusaurus_version": "current",
    "title": "MCP vs REST APIs: A Fundamental Distinction | Roo Code Documentation",
    "docusaurus_tag": "docs-default-current",
    "docsearch:version": "current",
    "scrapeId": "2134d30a-1da7-4d82-b770-179a91ceea76",
    "sourceURL": "https://docs.roocode.com/features/mcp/mcp-vs-api",
    "url": "https://docs.roocode.com/features/mcp/mcp-vs-api",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic",
    "cacheState": "miss",
    "creditsUsed": 1
  }
}