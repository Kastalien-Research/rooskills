{
  "markdown": "Get comprehensive, actionable reviews directly in your PRs. [Try Roo's PR Reviewer](https://roocode.com/reviewer?utm_source=docs&utm_medium=banner&utm_campaign=reviewer_promo)\n\n[Skip to main content](https://docs.roocode.com/features/custom-modes#__docusaurus_skipToContent_fallback)\n\n[![Roo Code Logo](https://docs.roocode.com/img/roo-code-logo-dark.png)](https://docs.roocode.com/)\n\n`ctrl`  `K`\n\n[Reddit](https://www.reddit.com/r/RooCode/ \"Reddit\")[Discord](https://discord.gg/roocode \"Discord\")\n\n[20.3k](https://github.com/RooCodeInc/Roo-Code \"GitHub Repository\") [Install ·574.1k](https://marketplace.visualstudio.com/items?itemName=RooVeterinaryInc.roo-cline \"Install VS Code Extension\")\n\n- [Welcome](https://docs.roocode.com/)\n- [Getting Started](https://docs.roocode.com/features/custom-modes#)\n\n- [Tutorial Videos](https://docs.roocode.com/features/custom-modes#)\n\n- [Roo Code Cloud](https://docs.roocode.com/features/custom-modes#)\n\n- Features\n\n  - [API Configuration Profiles](https://docs.roocode.com/features/api-configuration-profiles)\n  - [Auto-Approving Actions](https://docs.roocode.com/features/auto-approving-actions)\n  - [Boomerang Tasks](https://docs.roocode.com/features/boomerang-tasks)\n  - [Browser Use](https://docs.roocode.com/features/browser-use)\n  - [Checkpoints](https://docs.roocode.com/features/checkpoints)\n  - [Code Actions](https://docs.roocode.com/features/code-actions)\n  - [Codebase Indexing](https://docs.roocode.com/features/codebase-indexing)\n  - [Custom Instructions](https://docs.roocode.com/features/custom-instructions)\n  - [Diagnostics Integration](https://docs.roocode.com/features/diagnostics-integration)\n  - [Customizing Modes](https://docs.roocode.com/features/custom-modes)\n  - [Diff/Fast Edits](https://docs.roocode.com/features/fast-edits)\n  - [Enhance Prompt](https://docs.roocode.com/features/enhance-prompt)\n  - [Import/Export/Reset Settings](https://docs.roocode.com/features/settings-management)\n  - [Intelligent Context Condensing](https://docs.roocode.com/features/intelligent-context-condensing)\n  - [Keyboard Navigation](https://docs.roocode.com/features/keyboard-shortcuts)\n  - [Roo Code Marketplace](https://docs.roocode.com/features/marketplace)\n  - [Message Queueing](https://docs.roocode.com/features/message-queueing)\n  - [Model Temperature](https://docs.roocode.com/features/model-temperature)\n  - [Multi-File Reads](https://docs.roocode.com/features/concurrent-file-reads)\n  - [.rooignore](https://docs.roocode.com/features/rooignore)\n  - [Slash Commands](https://docs.roocode.com/features/slash-commands)\n  - [Suggested Responses](https://docs.roocode.com/features/suggested-responses)\n  - [Task Todo List](https://docs.roocode.com/features/task-todo-list)\n  - [Terminal Shell Integration](https://docs.roocode.com/features/shell-integration)\n  - [MCP](https://docs.roocode.com/features/custom-modes#)\n\n  - [Experimental](https://docs.roocode.com/features/custom-modes#)\n\n  - [Additional Features](https://docs.roocode.com/features/more-features)\n- [Advanced Usage](https://docs.roocode.com/features/custom-modes#)\n\n- [Model Providers](https://docs.roocode.com/features/custom-modes#)\n\n- [FAQ](https://docs.roocode.com/features/custom-modes#)\n\n- [Contributing (GitHub)](https://github.com/RooCodeInc/Roo-Code/blob/main/CONTRIBUTING.md)\n- [Roocabulary (GitHub)](https://github.com/cannuri/Roocabulary)\n- [Update Notes](https://docs.roocode.com/features/custom-modes#)\n\n\n- [Home page](https://docs.roocode.com/)\n- Features\n- Customizing Modes\n\nCopy Page\n\nOn this page\n\n# Customizing Modes\n\nRoo Code allows you to create **custom modes** to tailor Roo's behavior to specific tasks or workflows. Custom modes can be either **global** (available across all projects) or **project-specific** (defined within a single project).\n\nHow to make Custom Modes in Roo Code \\| Detailed Tutorial - YouTube\n\n[Photo image of Roo Code](https://www.youtube.com/channel/UCfCnIRjGVRzwy8YqelcV13w?embeds_referring_euri=https%3A%2F%2Fdocs.roocode.com%2F)\n\nRoo Code\n\n3.81K subscribers\n\n[How to make Custom Modes in Roo Code \\| Detailed Tutorial](https://www.youtube.com/watch?v=qgqceCuhlRA)\n\nRoo Code\n\nSearch\n\nWatch later\n\nShare\n\nCopy link\n\nInfo\n\nShopping\n\nTap to unmute\n\nIf playback doesn't begin shortly, try restarting your device.\n\nMore videos\n\n## More videos\n\nYou're signed out\n\nVideos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.\n\nCancelConfirm\n\nShare\n\nInclude playlist\n\nAn error occurred while retrieving sharing information. Please try again later.\n\n[Watch on](https://www.youtube.com/watch?v=qgqceCuhlRA&embeds_referring_euri=https%3A%2F%2Fdocs.roocode.com%2F)\n\n0:00\n\n0:00 / 4:15\n•Live\n\n•\n\nSticky Models for Efficient Workflow\n\nEach mode—including custom ones—features **Sticky Models**. This means Roo Code automatically remembers and selects the last model you used with a particular mode. This lets you assign different preferred models to different tasks without constant reconfiguration, as Roo switches between models when you change modes.\n\nDiscover Community Modes\n\nLooking for ready-to-use custom modes? Visit the [Roo Code Marketplace](https://docs.roocode.com/features/marketplace) to browse and install community-contributed modes with a single click. The marketplace offers specialized modes for various tasks like React development, documentation writing, testing, and more—all created and shared by the Roo Code community.\n\n* * *\n\n## Why Use Custom Modes? [​](https://docs.roocode.com/features/custom-modes\\#why-use-custom-modes \"Direct link to Why Use Custom Modes?\")\n\n- **Specialization:** Create modes optimized for specific tasks, like \"Documentation Writer,\" \"Test Engineer,\" or \"Refactoring Expert.\"\n- **Safety:** Restrict a mode's access to sensitive files or commands. For example, a \"Review Mode\" could be limited to read-only operations.\n- **Experimentation:** Safely experiment with different prompts and configurations without affecting other modes.\n- **Team Collaboration:** Share custom modes with your team to standardize workflows.\n\n![Overview of custom modes interface](https://docs.roocode.com/img/custom-modes/custom-modes-3.png)\n\n_Roo Code's interface for creating and managing custom modes._\n\n* * *\n\n## What's Included in a Custom Mode? [​](https://docs.roocode.com/features/custom-modes\\#whats-included-in-a-custom-mode \"Direct link to What's Included in a Custom Mode?\")\n\nCustom modes are defined by several key properties. Understanding these concepts will help you tailor Roo's behavior effectively.\n\n| UI Field / YAML Property | Conceptual Description |\n| --- | --- |\n| Slug ( `slug`) | A **unique internal identifier** for the mode. It's used by Roo Code to reference the mode, especially for associating [mode-specific instruction files](https://docs.roocode.com/features/custom-modes#mode-specific-instructions-via-filesdirectories). |\n| Name ( `name`) | The **display name** for the mode as it appears in the Roo Code user interface. This should be human-readable and descriptive. |\n| Description ( `description`) | A **short, user-friendly summary** of the mode's purpose displayed in the mode selector UI.<br>\\- This text appears below the mode's name in the redesigned mode selector, offering users a quick understanding of the mode's function.<br>\\- Keep this concise and focused on what the mode does for the user. |\n| Role Definition ( `roleDefinition`) | Defines the **core identity and expertise** of the mode. This text is placed at the beginning of the system prompt.<br>\\- Its primary function is to define Roo's personality and behavior when this mode is active.<br>\\- With the introduction of the `description` field, the `roleDefinition` should provide a detailed description of the mode's identity, while the `description` field handles the short summary for the UI.<br>\\- The `whenToUse` property now takes precedence for summarization in automated contexts like task orchestration. |\n| Available Tools ( `groups`) | Defines the **allowed toolsets and file access permissions** for the mode.<br>\\- In the UI, this corresponds to selecting which general categories of tools (like reading files, editing files, browsing, or executing commands) the mode can use.<br>\\- The UI shows which files can be edited in the 'Allowed files' section under each mode.<br>\\- File type restrictions for the \"edit\" group are typically managed via manual YAML/JSON configuration or by asking Roo to set them up, as detailed in the [Property Details for `groups`](https://docs.roocode.com/features/custom-modes#groups). |\n| When to Use (optional) ( `whenToUse`) | (Optional) Provides **guidance for Roo's automated decision-making**, particularly for mode selection and task orchestration.<br>\\- This text is used by Roo, particularly the [`🪃 Orchestrator`](https://docs.roocode.com/basic-usage/using-modes#orchestrator-mode-aka-boomerang-mode) mode, for [orchestrating tasks](https://docs.roocode.com/features/boomerang-tasks) (e.g., via the [`new_task`](https://docs.roocode.com/advanced-usage/available-tools/new-task) tool).<br>\\- It also helps Roo decide which mode is appropriate when [switching modes](https://docs.roocode.com/basic-usage/using-modes#switching-between-modes) (e.g., via the [`switch_mode`](https://docs.roocode.com/advanced-usage/available-tools/switch-mode) tool).<br>\\- This field is **not displayed in the mode selector UI** \\- that's handled by the `description` field. |\n| Custom Instructions (optional) ( `customInstructions`) | **Specific behavioral guidelines** or rules for the mode.<br>\\- These instructions are added near the end of the system prompt to further refine Roo's behavior beyond the `roleDefinition`.<br>\\- This can be provided directly in the configuration or via separate instruction files. |\n\n* * *\n\n## Import/Export Modes [​](https://docs.roocode.com/features/custom-modes\\#importexport-modes \"Direct link to Import/Export Modes\")\n\nEasily share, back up, and template your custom modes. This feature lets you export any mode—and its associated rules—into a single, portable YAML file that you can import into any project.\n\n### Key Features [​](https://docs.roocode.com/features/custom-modes\\#key-features \"Direct link to Key Features\")\n\n- **Shareable Setups**: Package a mode and its rules into one file to easily share with your team.\n- **Easy Backups**: Save your custom mode configurations so you never lose them.\n- **Project Templates**: Create standardized mode templates for different types of projects.\n- **Simple Migration**: Move modes between your global settings and specific projects effortlessly.\n- **Flexible Slug Changes**: Change mode slugs in exported files without manual path editing.\n\n* * *\n\n### Use Case [​](https://docs.roocode.com/features/custom-modes\\#use-case \"Direct link to Use Case\")\n\n**Before**: Manually recreating custom modes and copying `.roo/rules-{slug}/` folders for each new project or team member. Changing slugs required manual path updates in the YAML file.\n\n**With this feature**: A single click exports a mode and all its rules to a YAML file. Another click imports it, setting everything up automatically. You can now change the slug in the exported file and the import process handles all path updates automatically.\n\n### How it Works [​](https://docs.roocode.com/features/custom-modes\\#how-it-works \"Direct link to How it Works\")\n\nThe import/export functionality is managed from the **Modes** view.\n\n![Mode Export and Import Buttons](<Base64-Image-Removed>)\n\n#### Exporting a Mode [​](https://docs.roocode.com/features/custom-modes\\#exporting-a-mode \"Direct link to Exporting a Mode\")\n\n1. Navigate to the **Modes** view.\n2. Select the mode you wish to export.\n3. Click the **Export Mode** button (the download icon).\n4. Choose a location to save the `.yaml` file.\n\nRoo packages the mode's configuration and any rules found in the project's `.roo/rules-{slug}/` directory into the YAML file.\n\n#### Importing a Mode [​](https://docs.roocode.com/features/custom-modes\\#importing-a-mode \"Direct link to Importing a Mode\")\n\n1. Click the **Import Mode** button (the upload icon) in the **Modes** view.\n2. Select the mode's YAML file.\n3. Choose the import level in the dialog that appears:\n![Import Level Dialog](https://docs.roocode.com/assets/images/custom-modes-6-1a121f08843d96f72a957aa34e561cc6.png)   - **Project**: The mode is available only in the current workspace. It's added to the `.roomodes` file, and its rules are saved to the `.roo/rules-{slug}/` directory within the project.\n   - **Global**: The mode is available in all your projects. It's added to your global settings, and its rules are stored in your system's global Roo configuration directory (e.g., `~/.roo/rules-{slug}/`).\n\n**Note:** When exporting modes with rules, all file paths are normalized to use forward slashes for cross-platform compatibility. This ensures modes can be shared between team members using different operating systems.\n\n* * *\n\n### Exported YAML file format: [​](https://docs.roocode.com/features/custom-modes\\#exported-yaml-file-format \"Direct link to Exported YAML file format:\")\n\n```codeBlockLines_e6Vv\ncustomModes:\n  - slug: \"my-custom-mode\"\n    name: \"My Custom Mode\"\n    roleDefinition: \"You are a helpful assistant.\"\n    groups: [\"read\", \"edit\"]\n    rulesFiles:\n      - relativePath: \"rules-my-custom-mode/rules.md\"\n        content: \"These are the rules for my custom mode.\"\n\n```\n\n### Changing Slugs on Import [​](https://docs.roocode.com/features/custom-modes\\#changing-slugs-on-import \"Direct link to Changing Slugs on Import\")\n\nWhen importing modes, you can change the slug in the exported YAML file before importing:\n\n1. **Export a mode** with slug `original-mode`\n2. **Edit the YAML file** and change the slug to `new-mode`\n3. **Import the file** \\- the import process will:\n   - Create the new mode with the updated slug\n   - Update rule file paths to match the new slug\n\nNote: The automatic slug change handling during import ensures that rule file paths are updated correctly when you change the mode slug in the exported file.\n\n* * *\n\n### FAQ [​](https://docs.roocode.com/features/custom-modes\\#faq \"Direct link to FAQ\")\n\n**\"What happens if I import a mode that has the same 'slug' as an existing one?\"**\n\n- The existing mode will be overwritten with the configuration from the imported file.\n\n**\"What's the main difference between a Global and Project import?\"**\n\n- **Global** modes are available across all your VS Code projects. **Project** modes are specific to the workspace where they are imported and are stored in a `.roomodes` file at the root of your project.\n\n**\"Can I export built-in modes like Code or Architect?\"**\n\n- Yes. If you have customized a built-in mode (e.g., by changing its instructions), you can export it to save your customizations.\n\n**\"What if I import a mode with rules at the Global level?\"**\n\n- The rules are still preserved. They are stored in a global `rules-{slug}` folder in your user home directory (e.g., `~/.roo/rules-my-custom-mode/`) instead of the project-specific `.roo` folder.\n\n**\"How does the slug change feature work?\"**\n\n- When you change the slug in an exported YAML file before importing, the import process updates the rule file paths to match the new slug. This ensures the mode works correctly with its new identity.\n\n* * *\n\n## Methods for Creating and Configuring Custom Modes [​](https://docs.roocode.com/features/custom-modes\\#methods-for-creating-and-configuring-custom-modes \"Direct link to Methods for Creating and Configuring Custom Modes\")\n\nYou can create and configure custom modes in several ways:\n\nTo configure modes, open the Roo Code panel, click the Mode menu under the chatbox, then click the . From there, use \"Edit Global Modes\" to open settings/custom\\_modes.yaml, or \"Edit Project Modes (.roomodes)\" to open your workspace-level configuration.\n\n### 1\\. Ask Roo! (Recommended) [​](https://docs.roocode.com/features/custom-modes\\#1-ask-roo-recommended \"Direct link to 1. Ask Roo! (Recommended)\")\n\nYou can quickly create a basic custom mode by asking Roo Code to do it for you. For example:\n\n```codeBlockLines_e6Vv\nCreate a new mode called \"Documentation Writer\". It should only be able to read files and write Markdown files.\n\n```\n\nRoo Code will guide you through the process, prompting for necessary information for the properties described in the [What's Included in a Custom Mode?](https://docs.roocode.com/features/custom-modes#whats-included-in-a-custom-mode) table. Roo will create the mode using the preferred YAML format. For fine-tuning or making specific adjustments later, you can use the Modes page or manual configuration.\n\n### 2\\. Using the Modes Page [​](https://docs.roocode.com/features/custom-modes\\#2-using-the-modes-page \"Direct link to 2. Using the Modes Page\")\n\n1. **Open the Modes page:** Open the Roo Code panel, click the Mode menu under the chatbox, then click the .\n2. **Create New Mode:** Click the  button to the right of the Modes heading.\n3. **Fill in Fields:**\n\n![Custom mode creation interface on the Modes page](https://docs.roocode.com/img/custom-modes/custom-modes-4.png)\n\n_The custom mode creation interface showing fields for name, slug, description, save location, role definition, available tools, custom instructions._\n\nThe interface provides fields for `Name`, `Slug`, `Description`, `Save Location`, `Role Definition`, `When to Use (optional)`, `Available Tools`, and `Custom Instructions`. After filling these, click the \"Create Mode\" button. Roo Code will save the new mode in YAML format.\n\n_Refer to the [What's Included in a Custom Mode?](https://docs.roocode.com/features/custom-modes#whats-included-in-a-custom-mode) table for conceptual explanations of each property. File type restrictions for the \"edit\" tool group can be added by asking Roo or through manual YAML/JSON configuration._\n\n### 3\\. Manual Configuration (YAML & JSON) [​](https://docs.roocode.com/features/custom-modes\\#3-manual-configuration-yaml--json \"Direct link to 3. Manual Configuration (YAML & JSON)\")\n\nYou can directly edit the configuration files to create or modify custom modes. This method offers the most control over all properties. Roo Code now supports both YAML (preferred) and JSON formats.\n\n- **Global Modes:** Edit the `custom_modes.yaml` (preferred) or `custom_modes.json` file. From the Modes page, click \"Edit Global Modes\" to open `settings/custom_modes.yaml`.\n- **Project Modes:** Edit the `.roomodes` file (which can be YAML or JSON) in your project root. From the Modes page, click \"Edit Project Modes (.roomodes)\" to open or create the workspace file.\n\nThese files define an array/list of custom modes.\n\n**YAML Example ( `custom_modes.yaml` or `.roomodes`):**\n\n```codeBlockLines_e6Vv\ncustomModes:\n  - slug: docs-writer\n    name: 📝 Documentation Writer\n    description: A specialized mode for writing and editing technical documentation.\n    roleDefinition: You are a technical writer specializing in clear documentation.\n    whenToUse: Use this mode for writing and editing documentation.\n    customInstructions: Focus on clarity and completeness in documentation.\n    groups:\n      - read\n      - - edit  # First element of tuple\n        - fileRegex: \\.(md|mdx)$  # Second element is the options object\n          description: Markdown files only\n      - browser\n  - slug: another-mode\n    name: Another Mode\n    # ... other properties\n\n```\n\n**JSON Alternative ( `custom_modes.json` or `.roomodes`):**\n\n```codeBlockLines_e6Vv\n{\n  \"customModes\": [\\\n    {\\\n      \"slug\": \"docs-writer\",\\\n      \"name\": \"📝 Documentation Writer\",\\\n      \"description\": \"A specialized mode for writing and editing technical documentation.\",\\\n      \"roleDefinition\": \"You are a technical writer specializing in clear documentation.\",\\\n      \"whenToUse\": \"Use this mode for writing and editing documentation.\",\\\n      \"customInstructions\": \"Focus on clarity and completeness in documentation.\",\\\n      \"groups\": [\\\n        \"read\",\\\n        [\"edit\", { \"fileRegex\": \"\\\\.(md|mdx)$\", \"description\": \"Markdown files only\" }],\\\n        \"browser\"\\\n      ]\\\n    },\\\n    {\\\n      \"slug\": \"another-mode\",\\\n      \"name\": \"Another Mode\"\\\n    }\\\n  ]\n}\n\n```\n\n### YAML/JSON Property Details [​](https://docs.roocode.com/features/custom-modes\\#yamljson-property-details \"Direct link to YAML/JSON Property Details\")\n\n##### `slug` [​](https://docs.roocode.com/features/custom-modes\\#slug \"Direct link to slug\")\n\n- **Purpose:** A unique identifier for the mode.\n- **Format:** Must match the pattern `/^[a-zA-Z0-9-]+$/` (only letters, numbers, and hyphens).\n- **Usage:** Used internally and in file/directory names for mode-specific rules (e.g., `.roo/rules-{slug}/`).\n- **Recommendation:** Keep it short and descriptive.\n- **Note:** The `source` property is automatically added by the system and shouldn't be manually set.\n- _YAML Example:_ `slug: docs-writer`\n- _JSON Example:_ `\"slug\": \"docs-writer\"`\n\n##### `name` [​](https://docs.roocode.com/features/custom-modes\\#name \"Direct link to name\")\n\n- **Purpose:** The display name shown in the Roo Code UI.\n- **Format:** Can include spaces and proper capitalization.\n- _YAML Example:_ `name: 📝 Documentation Writer`\n- _JSON Example:_ `\"name\": \"Documentation Writer\"`\n\n##### `description` [​](https://docs.roocode.com/features/custom-modes\\#description \"Direct link to description\")\n\n- **Purpose:** A short, user-friendly summary displayed below the mode name in the mode selector UI.\n- **Format:** Keep this concise and focused on what the mode does for the user.\n- **UI Display:** This text appears in the redesigned mode selector, offering users a quick understanding of the mode's function.\n- _YAML Example:_ `description: A specialized mode for writing and editing technical documentation.`\n- _JSON Example:_ `\"description\": \"A specialized mode for writing and editing technical documentation.\"`\n\n##### `roleDefinition` [​](https://docs.roocode.com/features/custom-modes\\#roledefinition \"Direct link to roledefinition\")\n\n- **Purpose:** Detailed description of the mode's role, expertise, and personality.\n- **Placement:** This text is placed at the beginning of the system prompt when the mode is active.\n- **Updated Role:** With the introduction of the `description` field, the `roleDefinition` should provide a detailed description of the mode's identity, while the `description` field handles the short summary for the UI. The `whenToUse` property now takes precedence for summarization in automated contexts.\n- _YAML Example (multi-line):_\n\n\n\n\n```codeBlockLines_e6Vv\nroleDefinition: >-\n    You are a test engineer with expertise in:\n  - Writing comprehensive test suites\n  - Test-driven development\n\n```\n\n- _JSON Example:_ `\"roleDefinition\": \"You are a technical writer specializing in clear documentation.\"`\n\n##### `groups` [​](https://docs.roocode.com/features/custom-modes\\#groups \"Direct link to groups\")\n\n- **Purpose:** Array/list defining which tool groups the mode can access and any file restrictions.\n- **Available Tool Groups (Strings):** `\"read\"`, `\"edit\"`, `\"browser\"`, `\"command\"`, `\"mcp\"`.\n- **Structure:** The `groups` property uses a specific structure:\n  - Simple string for unrestricted access: `\"edit\"`\n  - Tuple (two-element array) for restricted access: `[\"edit\", { fileRegex: \"pattern\", description: \"optional\" }]`\n- **File Restrictions for \"edit\" group:**\n  - To apply file restrictions, the \"edit\" entry becomes a tuple (YAML list or JSON array) where the first element is `\"edit\"` and the second is a map/object defining the restrictions.\n  - `fileRegex`: A regular expression string to control which files the mode can edit.\n    - In YAML, typically use single backslashes for regex special characters (e.g., `\\.md$`).\n    - In JSON, backslashes must be double-escaped (e.g., `\\\\.md$`).\n  - `description`: An optional string describing the restriction.\n  - For more complex patterns, see [Understanding Regex in Custom Modes](https://docs.roocode.com/features/custom-modes#understanding-regex-in-custom-modes).\n- _YAML Example:_\n\n\n\n\n```codeBlockLines_e6Vv\ngroups:\n  - read\n  - - edit  # First element of tuple\n    - fileRegex: \\.(js|ts)$  # Second element is the options object\n      description: JS/TS files only\n  - command\n\n```\n\n- _JSON Example:_\n\n\n\n\n```codeBlockLines_e6Vv\n\"groups\": [\\\n    \"read\",\\\n    [\"edit\", { \"fileRegex\": \"\\\\.(js|ts)$\", \"description\": \"JS/TS files only\" }],\\\n    \"command\"\\\n]\n\n```\n\n\n##### `whenToUse` [​](https://docs.roocode.com/features/custom-modes\\#whentouse \"Direct link to whentouse\")\n\n- **Purpose:** (Optional) Provides guidance for Roo's automated decision-making, particularly for mode selection and task orchestration.\n- **Format:** A string describing ideal scenarios or task types for this mode.\n- **Usage:** This field is used by Roo for automated decisions and is **not displayed in the mode selector UI** \\- that's handled by the `description` field. If populated, Roo uses this description for orchestration and mode switching; otherwise, the first sentence of `roleDefinition` is used.\n- _YAML Example:_ `whenToUse: This mode is best for refactoring Python code.`\n- _JSON Example:_ `\"whenToUse\": \"This mode is best for refactoring Python code.\"`\n\n##### `customInstructions` [​](https://docs.roocode.com/features/custom-modes\\#custominstructions \"Direct link to custominstructions\")\n\n- **Purpose:** A string containing additional behavioral guidelines for the mode.\n- **Placement:** This text is added near the end of the system prompt.\n- **Supplementing:** Can be supplemented by [Mode-Specific Instructions via Files/Directories](https://docs.roocode.com/features/custom-modes#mode-specific-instructions-via-filesdirectories).\n- _YAML Example (multi-line):_\n\n\n\n\n```codeBlockLines_e6Vv\ncustomInstructions: |-\n    When writing tests:\n  - Use describe/it blocks\n  - Include meaningful descriptions\n\n```\n\n- _JSON Example:_ `\"customInstructions\": \"Focus on explaining concepts and providing examples.\"`\n\n### Benefits of YAML Format [​](https://docs.roocode.com/features/custom-modes\\#benefits-of-yaml-format \"Direct link to Benefits of YAML Format\")\n\nYAML is now the preferred format for defining custom modes due to several advantages over JSON:\n\n- **Readability:** YAML's indentation-based structure is often easier for humans to read and understand complex configurations.\n- **Comments:** YAML allows for comments (lines starting with `#`), making it possible to annotate your mode definitions.\n\n\n\n\n```codeBlockLines_e6Vv\ncustomModes:\n  - slug: security-review\n    name: 🔒 Security Reviewer\n    # This mode is restricted to read-only access\n    roleDefinition: You are a security specialist reviewing code for vulnerabilities.\n    whenToUse: Use for security reviews and vulnerability assessments.\n    # Only allow reading files, no editing permissions\n    groups:\n      - read\n      - browser\n\n```\n\n- **Multi-line Strings:** YAML provides cleaner syntax for multi-line strings (e.g., for `roleDefinition` or `customInstructions`) using `|` (literal block) or `>` (folded block).\n\n\n\n\n```codeBlockLines_e6Vv\ncustomModes:\n  - slug: test-engineer\n    name: 🧪 Test Engineer\n    roleDefinition: >-\n      You are a test engineer with expertise in:\n      - Writing comprehensive test suites\n      - Test-driven development\n      - Integration testing\n      - Performance testing\n    customInstructions: |-\n      When writing tests:\n      - Use describe/it blocks\n      - Include meaningful descriptions\n      - Test edge cases\n      - Ensure proper coverage\n    # ... other properties\n\n```\n\n- **Less Punctuation:** YAML generally requires less punctuation (like commas and braces) compared to JSON, reducing syntax errors.\n- **Editor Support:** Most modern code editors provide excellent syntax highlighting and validation for YAML files, further enhancing readability and reducing errors.\n\nWhile JSON is still fully supported and won't be deprecated, new modes created via the UI or by asking Roo will default to YAML. Both `.roomodes` files and global configuration files can be either YAML or JSON format.\n\n#### Tips for Working with YAML [​](https://docs.roocode.com/features/custom-modes\\#tips-for-working-with-yaml \"Direct link to Tips for Working with YAML\")\n\nWhen editing YAML manually, keep these points in mind:\n\n- **Indentation is Key:** YAML uses indentation (spaces, not tabs) to define structure. Incorrect indentation is the most common source of errors. Ensure consistent spacing for nested elements.\n- **Colons for Key-Value Pairs:** Keys must be followed by a colon and a space (e.g., `slug: my-mode`).\n- **Hyphens for List Items:** List items start with a hyphen and a space (e.g., `- read`).\n- **Validate Your YAML:** If you encounter issues, use an online YAML validator or your editor's built-in validation to check for syntax errors.\n\n### Migration to YAML Format [​](https://docs.roocode.com/features/custom-modes\\#migration-to-yaml-format \"Direct link to Migration to YAML Format\")\n\n- **Global Modes:** The automatic migration from `custom_modes.json` to `custom_modes.yaml` happens only for global modes when Roo Code starts up, under these conditions:\n1. Roo Code starts up.\n2. A `custom_modes.json` file exists.\n3. No `custom_modes.yaml` file exists yet.\n     The migration process reads the existing JSON file, converts it to YAML format, creates a new `custom_modes.yaml` file, and preserves the original JSON file (e.g., by renaming it) for rollback purposes. If `custom_modes.yaml` already exists, it will be used, and no automatic migration of `custom_modes.json` will occur.\n- **Project Modes ( `.roomodes`):**\n  - **No automatic startup migration:** Unlike global modes, project-specific `.roomodes` files are not automatically converted from JSON to YAML when Roo Code starts. Manual conversion is required for existing JSON `.roomodes` files.\n  - **Format Detection:** Roo Code can read `.roomodes` files in either YAML or JSON format. Roo Code automatically detects the format of `.roomodes` files by attempting to parse them as YAML first.\n  - **Conversion on UI Edit:** If you edit a project-specific mode through the Roo Code UI (e.g., via the Modes page), and the existing `.roomodes` file is in JSON format, Roo Code will save the changes in YAML format. This effectively converts the file to YAML. The original JSON content will be overwritten with YAML.\n  - **Manual Conversion:** If you want to convert an existing `.roomodes` JSON file to YAML without making UI edits, you'll need to do this manually. You can:\n    1. Open your existing JSON `.roomodes` file.\n    2. Convert its content to YAML (you can ask Roo to help with this, or use an online converter).\n    3. Replace the content of your `.roomodes` file with the new YAML content, or rename the old file (e.g., `.roomodes.json.bak`) and save the new content into a file named `.roomodes`.\n       Ensure the resulting YAML is valid.\n\ntip\n\nFor manual conversions of `.roomodes` files, you can use online JSON to YAML converters or ask Roo to help reformat a specific mode configuration from JSON to YAML. Always validate your YAML before saving.\n\n* * *\n\n## Mode-Specific Instructions via Files/Directories [​](https://docs.roocode.com/features/custom-modes\\#mode-specific-instructions-via-filesdirectories \"Direct link to Mode-Specific Instructions via Files/Directories\")\n\nMode-Specific Instruction File Locations\n\nYou can provide instructions for custom modes using dedicated files or directories within your workspace. This allows for better organization and version control compared to only using the `customInstructions` property.\n\n**Preferred Method: Directory ( `.roo/rules-{mode-slug}/`)**\n\n```codeBlockLines_e6Vv\n.\n├── .roo/\n│   └── rules-docs-writer/  # Example for mode slug \"docs-writer\"\n│       ├── 01-style-guide.md\n│       └── 02-formatting.txt\n└── ... (other project files)\n\n```\n\n**Fallback Method: Single File ( `.roorules-{mode-slug}`)**\n\n```codeBlockLines_e6Vv\n.\n├── .roorules-docs-writer  # Example for mode slug \"docs-writer\"\n└── ... (other project files)\n\n```\n\n**Legacy Fallback: `.clinerules-{mode-slug}`**\nFor backward compatibility, the system also checks for `.clinerules-{mode-slug}` files as an additional fallback, though this is not recommended for new projects.\n\nThe directory method takes precedence if it exists and contains files.\n\n**Rules Directory Scope:**\n\n- **Global modes:** Rules are stored in `~/.roo/rules-{slug}/` (note the trailing slash)\n- **Project modes:** Rules are stored in `{workspace}/.roo/rules-{slug}/` (note the trailing slash)\n\nIn addition to the `customInstructions` property, you can provide mode-specific instructions via files in your workspace. This is particularly useful for:\n\n- Organizing lengthy or complex instructions into multiple, manageable files.\n- Managing instructions easily with version control.\n- Allowing non-technical team members to modify instructions without editing YAML/JSON.\n\nThere are two ways Roo Code loads these instructions, with a clear preference for the newer directory-based method:\n\n**1\\. Preferred Method: Directory-Based Instructions ( `.roo/rules-{mode-slug}/`)**\n\n- **Structure:** Create a directory named `.roo/rules-{mode-slug}/` in your workspace root. Replace `{mode-slug}` with your mode's slug (e.g., `.roo/rules-docs-writer/`).\n- **Content:** Place one or more files (e.g., `.md`, `.txt`) containing your instructions inside this directory. You can organize instructions further using subdirectories. Files within the `.roo/rules-{mode-slug}/` directory are read recursively and appended in alphabetical order based on filename (case-insensitive).\n- **Loading:** All instruction files found within this directory structure will be loaded and applied to the specified mode. System files ( `.DS_Store`, `.swp`, etc.) and cache files are automatically excluded.\n- **Advanced Features:** The system supports symbolic links with cycle detection for advanced file organization.\n\n**2\\. Fallback (Backward Compatibility): File-Based Instructions ( `.roorules-{mode-slug}`)**\n\n- **Structure:** If the `.roo/rules-{mode-slug}/` directory **does not exist or is empty**, Roo Code will look for a single file named `.roorules-{mode-slug}` in your workspace root (e.g., `.roorules-docs-writer`).\n- **Loading:** If found, the content of this single file will be loaded as instructions for the mode.\n\n**Precedence:**\n\n- The **directory-based method ( `.roo/rules-{mode-slug}/`) takes precedence**. If this directory exists and contains files, any corresponding root-level `.roorules-{mode-slug}` file will be **ignored** for that mode.\n- This ensures that projects migrated to the new directory structure behave predictably, while older projects using the single-file method remain compatible.\n\n**Combining with `customInstructions`:**\n\n- Instructions loaded from either the directory or the fallback file are combined with the `customInstructions` property defined in the mode's configuration.\n- Typically, the content from the files/directories is appended after the content from the `customInstructions` property.\n\n* * *\n\n## Configuration Precedence [​](https://docs.roocode.com/features/custom-modes\\#configuration-precedence \"Direct link to Configuration Precedence\")\n\nMode configurations are applied in this order:\n\n1. Project-level mode configurations (from `.roomodes` \\- YAML or JSON)\n2. Global mode configurations (from `custom_modes.yaml`, then `custom_modes.json` if YAML not found)\n3. Default mode configurations\n\n**Important:** When modes with the same slug exist in both `.roomodes` and global settings, the `.roomodes` version completely overrides the global one. This applies to ALL properties, not just some. For instance, if you have a global 'code' mode and a project-specific 'code' mode in `.roomodes`, the project version will be used when working in that project, and all properties from the global version are ignored.\n\nYou can override any default mode by including a mode with the same slug in your global or project-specific configuration.\n\n- **Note on Instruction Files:** Within the loading of mode-specific instructions from the filesystem, the directory `.roo/rules-{mode-slug}/` takes precedence over the single file `.roorules-{mode-slug}` found in the workspace root.\n\n* * *\n\n## Overriding Default Modes [​](https://docs.roocode.com/features/custom-modes\\#overriding-default-modes \"Direct link to Overriding Default Modes\")\n\nYou can override Roo Code's built-in modes (like `💻 Code`, `🪲 Debug`, `❓ Ask`, `🏗️ Architect`, `🪃 Orchestrator`) with customized versions. This is done by creating a custom mode with the same slug as a default mode (e.g., `code`, `debug`).\n\n### Overriding Modes Globally [​](https://docs.roocode.com/features/custom-modes\\#overriding-modes-globally \"Direct link to Overriding Modes Globally\")\n\nTo customize a default mode across all your projects:\n\n1. **Open the Modes page:** Open the Roo Code panel, click the Mode menu under the chatbox, then click the .\n2. **Edit Global Modes:** Click \"Edit Global Modes\" to open `settings/custom_modes.yaml` (or `custom_modes.json`).\n3. **Add Your Override:**\n\n**YAML Example:**\n\n```codeBlockLines_e6Vv\ncustomModes:\n  - slug: code # Matches the default 'code' mode slug\n    name: 💻 Code (Global Override) # Custom display name\n    roleDefinition: You are a software engineer with global-specific constraints.\n    whenToUse: This globally overridden code mode is for JS/TS tasks.\n    customInstructions: Focus on project-specific JS/TS development.\n    groups:\n      - read\n      - - edit\n        - fileRegex: \\.(js|ts)$\n          description: JS/TS files only\n\n```\n\n**JSON Alternative:**\n\n```codeBlockLines_e6Vv\n{\n\"customModes\": [{\\\n    \"slug\": \"code\",\\\n    \"name\": \"💻 Code (Global Override)\",\\\n    \"roleDefinition\": \"You are a software engineer with global-specific constraints\",\\\n    \"whenToUse\": \"This globally overridden code mode is for JS/TS tasks.\",\\\n    \"customInstructions\": \"Focus on project-specific JS/TS development\",\\\n    \"groups\": [\\\n      \"read\",\\\n      [\"edit\", { \"fileRegex\": \"\\\\.(js|ts)$\", \"description\": \"JS/TS files only\" }]\\\n    ]\\\n}]\n}\n\n```\n\nThis example replaces the default `💻 Code` mode with a version restricted to JavaScript and TypeScript files.\n\n### Project-Specific Mode Override [​](https://docs.roocode.com/features/custom-modes\\#project-specific-mode-override \"Direct link to Project-Specific Mode Override\")\n\nTo override a default mode for just one project:\n\n1. **Open the Modes page:** Open the Roo Code panel, click the Mode menu under the chatbox, then click the .\n2. **Edit Project Modes (.roomodes):** Click \"Edit Project Modes (.roomodes)\" to open or create the workspace file.\n3. **Add Your Override:**\n\n**YAML Example:**\n\n```codeBlockLines_e6Vv\ncustomModes:\n  - slug: code # Matches the default 'code' mode slug\n    name: 💻 Code (Project-Specific) # Custom display name\n    roleDefinition: You are a software engineer with project-specific constraints for this project.\n    whenToUse: This project-specific code mode is for Python tasks within this project.\n    customInstructions: Adhere to PEP8 and use type hints.\n    groups:\n      - read\n      - - edit\n        - fileRegex: \\.py$\n          description: Python files only\n      - command\n\n```\n\n**JSON Alternative:**\n\n```codeBlockLines_e6Vv\n{\n\"customModes\": [{\\\n    \"slug\": \"code\",\\\n    \"name\": \"💻 Code (Project-Specific)\",\\\n    \"roleDefinition\": \"You are a software engineer with project-specific constraints for this project.\",\\\n    \"whenToUse\": \"This project-specific code mode is for Python tasks within this project.\",\\\n    \"customInstructions\": \"Adhere to PEP8 and use type hints.\",\\\n    \"groups\": [\\\n      \"read\",\\\n      [\"edit\", { \"fileRegex\": \"\\\\.py$\", \"description\": \"Python files only\" }],\\\n      \"command\"\\\n    ]\\\n}]\n}\n\n```\n\nProject-specific overrides take precedence over global overrides.\n\n### Common Use Cases for Overriding Default Modes [​](https://docs.roocode.com/features/custom-modes\\#common-use-cases-for-overriding-default-modes \"Direct link to Common Use Cases for Overriding Default Modes\")\n\n- **Restricting file access:** Limit a mode to specific file types.\n- **Specializing behavior:** Customize expertise for your tech stack.\n- **Adding custom instructions:** Integrate project standards.\n- **Changing available tools:** Remove tools to prevent unwanted operations.\n\ntip\n\nWhen overriding default modes, test carefully. Consider backing up configurations before major changes.\n\n* * *\n\n## Understanding Regex in Custom Modes [​](https://docs.roocode.com/features/custom-modes\\#understanding-regex-in-custom-modes \"Direct link to Understanding Regex in Custom Modes\")\n\nRegular expressions ( `fileRegex`) offer fine-grained control over file editing permissions.\n\ntip\n\n**Let Roo Build Your Regex Patterns**\n\nInstead of writing complex regex manually, ask Roo:\n\n```codeBlockLines_e6Vv\nCreate a regex pattern that matches JavaScript files but excludes test files\n\n```\n\nRoo will generate the pattern. Remember to adapt it for YAML (usually single backslashes) or JSON (double backslashes).\n\nWhen you specify `fileRegex`, you're creating a pattern that file paths must match.\n\n**Important Rules for `fileRegex`:**\n\n- **Escaping in JSON:** In JSON strings, backslashes ( `\\`) must be double-escaped (e.g., `\\\\.md$`).\n- **Escaping in YAML:** In unquoted or single-quoted YAML strings, a single backslash is usually sufficient for regex special characters (e.g., `\\.md$`). However, YAML regex patterns in quoted strings may need double escaping similar to JSON.\n- **Path Matching:** Patterns match against the full relative file path from your workspace root (e.g., `src/components/button.js`).\n- **Case Sensitivity:** Regex patterns are case-sensitive by default.\n- **Validation:** Invalid regex patterns are rejected with an \"Invalid regular expression pattern\" error message.\n\n**Common Pattern Examples:**\nIn the table below, the 'Pattern (Conceptual / YAML-like)' column shows patterns as they would appear in YAML. For JSON, remember to double-escape backslashes.\n\n| Pattern (Conceptual / YAML-like) | JSON `fileRegex` Value | Matches | Doesn't Match |\n| --- | --- | --- | --- |\n| `\\.md$` | `\"\\\\.md$\"` | `readme.md`, `docs/guide.md` | `script.js`, `readme.md.bak` |\n| `^src/.*` | `\"^src/.*\"` | `src/app.js`, `src/components/button.tsx` | `lib/utils.js`, `test/src/mock.js` |\n| \\`.(css | scss)$\\` | \"\\\\.(css | scss)$\" |\n| `docs/.*\\.md$` | `\"docs/.*\\\\.md$\"` | `docs/guide.md`, `docs/api/reference.md` | `guide.md`, `src/docs/notes.md` |\n| `^(?!.*(test|spec))\\.(js|ts)$` | `\"^(?!.*(test|spec))\\\\.(js|ts)$\"` | `app.js`, `utils.ts` | `app.test.js`, `utils.spec.js`, `app.jsx` |\n\n**Key Regex Building Blocks:**\n\n- `\\.`: Matches a literal dot. (YAML: `\\.`, JSON: `\\\\.`)\n- `$`: Matches the end of the string.\n- `^`: Matches the beginning of the string.\n- `.*`: Matches any character (except newline) zero or more times.\n- `(a|b)`: Matches either \"a\" or \"b\". (e.g., `\\.(js|ts)$`)\n- `(?!...)`: Negative lookahead.\n\n**Testing Your Patterns:**\n\n1. Test on sample file paths. Online regex testers are helpful.\n2. Remember the escaping rules for JSON vs. YAML.\n3. Start simple and build complexity.\n\nError Handling\n\nWhen a mode attempts to edit a file that doesn't match its `fileRegex` pattern, you'll see a `FileRestrictionError` that includes:\n\n- The mode name\n- The allowed file pattern\n- The description (if provided)\n- The attempted file path\n- The tool that was blocked\n\nThis information helps you understand why your operation was blocked and what file types are allowed for the current mode.\n\n* * *\n\n## Additional Features [​](https://docs.roocode.com/features/custom-modes\\#additional-features \"Direct link to Additional Features\")\n\n### Built-in Mode Customization [​](https://docs.roocode.com/features/custom-modes\\#built-in-mode-customization \"Direct link to Built-in Mode Customization\")\n\nWhen exporting built-in modes (like Code, Architect, Ask, Debug), any customizations you've made are included in the export. This allows you to share your personalized versions of built-in modes with others.\n\n### Mode Deletion and Rules [​](https://docs.roocode.com/features/custom-modes\\#mode-deletion-and-rules \"Direct link to Mode Deletion and Rules\")\n\nWhen deleting a mode through the UI, Roo Code will prompt you about deleting the associated rules folder, showing the exact path before deletion. This helps prevent accidental loss of custom instructions.\n\n### Global Rules Directory [​](https://docs.roocode.com/features/custom-modes\\#global-rules-directory \"Direct link to Global Rules Directory\")\n\nIn addition to mode-specific rules directories, there's also a generic `.roo/rules/` directory (without mode suffix) that can be used for shared rules across all modes.\n\n### Troubleshooting [​](https://docs.roocode.com/features/custom-modes\\#troubleshooting \"Direct link to Troubleshooting\")\n\n**Common Issues:**\n\n- **Mode not appearing:** After creating or importing a mode, you may need to reload the VS Code window for it to appear in the mode selector.\n- **Invalid regex patterns:** If your `fileRegex` pattern is invalid, you'll receive an error message. Test your patterns using online regex testers before applying them.\n- **Precedence confusion:** Remember that project modes completely override global modes with the same slug - no properties are merged.\n\n[Edit this page](https://github.com/RooCodeInc/Roo-Code-Docs/edit/main/docs/features/custom-modes.mdx)\n\nLast updated on **Oct 3, 2025**\n\n[Previous\\\\\n\\\\\nDiagnostics Integration](https://docs.roocode.com/features/diagnostics-integration) [Next\\\\\n\\\\\nDiff/Fast Edits](https://docs.roocode.com/features/fast-edits)\n\n- [Why Use Custom Modes?](https://docs.roocode.com/features/custom-modes#why-use-custom-modes)\n- [What's Included in a Custom Mode?](https://docs.roocode.com/features/custom-modes#whats-included-in-a-custom-mode)\n- [Import/Export Modes](https://docs.roocode.com/features/custom-modes#importexport-modes)\n  - [Key Features](https://docs.roocode.com/features/custom-modes#key-features)\n  - [Use Case](https://docs.roocode.com/features/custom-modes#use-case)\n  - [How it Works](https://docs.roocode.com/features/custom-modes#how-it-works)\n  - [Exported YAML file format:](https://docs.roocode.com/features/custom-modes#exported-yaml-file-format)\n  - [Changing Slugs on Import](https://docs.roocode.com/features/custom-modes#changing-slugs-on-import)\n  - [FAQ](https://docs.roocode.com/features/custom-modes#faq)\n- [Methods for Creating and Configuring Custom Modes](https://docs.roocode.com/features/custom-modes#methods-for-creating-and-configuring-custom-modes)\n  - [1\\. Ask Roo! (Recommended)](https://docs.roocode.com/features/custom-modes#1-ask-roo-recommended)\n  - [2\\. Using the Modes Page](https://docs.roocode.com/features/custom-modes#2-using-the-modes-page)\n  - [3\\. Manual Configuration (YAML & JSON)](https://docs.roocode.com/features/custom-modes#3-manual-configuration-yaml--json)\n  - [YAML/JSON Property Details](https://docs.roocode.com/features/custom-modes#yamljson-property-details)\n  - [Benefits of YAML Format](https://docs.roocode.com/features/custom-modes#benefits-of-yaml-format)\n  - [Migration to YAML Format](https://docs.roocode.com/features/custom-modes#migration-to-yaml-format)\n- [Mode-Specific Instructions via Files/Directories](https://docs.roocode.com/features/custom-modes#mode-specific-instructions-via-filesdirectories)\n- [Configuration Precedence](https://docs.roocode.com/features/custom-modes#configuration-precedence)\n- [Overriding Default Modes](https://docs.roocode.com/features/custom-modes#overriding-default-modes)\n  - [Overriding Modes Globally](https://docs.roocode.com/features/custom-modes#overriding-modes-globally)\n  - [Project-Specific Mode Override](https://docs.roocode.com/features/custom-modes#project-specific-mode-override)\n  - [Common Use Cases for Overriding Default Modes](https://docs.roocode.com/features/custom-modes#common-use-cases-for-overriding-default-modes)\n- [Understanding Regex in Custom Modes](https://docs.roocode.com/features/custom-modes#understanding-regex-in-custom-modes)\n- [Additional Features](https://docs.roocode.com/features/custom-modes#additional-features)\n  - [Built-in Mode Customization](https://docs.roocode.com/features/custom-modes#built-in-mode-customization)\n  - [Mode Deletion and Rules](https://docs.roocode.com/features/custom-modes#mode-deletion-and-rules)\n  - [Global Rules Directory](https://docs.roocode.com/features/custom-modes#global-rules-directory)\n  - [Troubleshooting](https://docs.roocode.com/features/custom-modes#troubleshooting)\n\n![Roo Code Logo](https://docs.roocode.com/img/roo-code-logo-dark.png)\n\nEmpowering developers to build better software faster with AI-powered tools and insights.\n\n[GitHub](https://github.com/RooCodeInc/Roo-Code)[Discord](https://discord.gg/roocode)[Reddit](https://www.reddit.com/r/RooCode/)[X (Twitter)](https://x.com/roo_code)[LinkedIn](https://www.linkedin.com/company/roo-code)[TikTok](https://www.tiktok.com/@roo.code)[Bluesky](https://bsky.app/profile/roocode.bsky.social)\n\nGitHub\n\n- [Issues](https://github.com/RooCodeInc/Roo-Code/issues)\n- [Feature Requests](https://github.com/RooCodeInc/Roo-Code/discussions/categories/feature-requests?discussions_q=is%3Aopen+category%3A%22Feature+Requests%22+sort%3Atop)\n\nDownload\n\n- [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=RooVeterinaryInc.roo-cline)\n- [Open VSX Registry](https://open-vsx.org/extension/RooVeterinaryInc/roo-cline)\n\nCompany\n\n- [Contact](mailto:support@roocode.com)\n- [Careers](https://careers.roocode.com/)\n- [Website Privacy Policy](https://roocode.com/privacy)\n- [Extension Privacy Policy](https://github.com/RooCodeInc/Roo-Code/blob/main/PRIVACY.md)\n\nLike most of the internet, we use cookies. Are you OK with that?\n\nDeclineAccept",
  "metadata": {
    "ogDescription": "Learn how to create custom modes in Roo Code to tailor AI behavior for specific tasks. Configure tool access, file permissions, and specialized instructions.",
    "twitter:image": "https://docs.roocode.com/img/social-share.jpg",
    "docusaurus_tag": "docs-default-current",
    "og:title": "Customizing Modes | Roo Code Documentation",
    "og:image": "https://docs.roocode.com/img/social-share.jpg",
    "ogTitle": "Customizing Modes | Roo Code Documentation",
    "og:type": "website",
    "twitter:card": "summary_large_image",
    "twitter:creator": "@roo_code",
    "docusaurus_locale": "en",
    "og:description": "Learn how to create custom modes in Roo Code to tailor AI behavior for specific tasks. Configure tool access, file permissions, and specialized instructions.",
    "title": "Customizing Modes | Roo Code Documentation",
    "docsearch:language": "en",
    "twitter:site": "@roo_code",
    "docsearch:version": "current",
    "generator": "Docusaurus v3.9.2",
    "og:locale": "en_US",
    "ogImage": "https://docs.roocode.com/img/social-share.jpg",
    "docusaurus_version": "current",
    "language": "en",
    "ogUrl": "https://docs.roocode.com/features/custom-modes",
    "ogLocale": "en_US",
    "viewport": [
      "width=device-width, initial-scale=1.0",
      "width=device-width, initial-scale=1"
    ],
    "docsearch:docusaurus_tag": "docs-default-current",
    "keywords": "custom modes,Roo Code customization,AI assistant configuration,mode creation,tool permissions,file restrictions",
    "favicon": "https://docs.roocode.com/img/favicon.ico",
    "description": "Learn how to create custom modes in Roo Code to tailor AI behavior for specific tasks. Configure tool access, file permissions, and specialized instructions.",
    "og:url": "https://docs.roocode.com/features/custom-modes",
    "scrapeId": "f7a4d723-ad93-4147-9109-e5e169fe897a",
    "sourceURL": "https://docs.roocode.com/features/custom-modes",
    "url": "https://docs.roocode.com/features/custom-modes",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic",
    "cacheState": "miss",
    "indexId": "a670229f-5e80-4c75-b54f-26ee680c77a8",
    "creditsUsed": 1
  }
}