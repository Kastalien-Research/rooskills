{
  "markdown": "Get comprehensive, actionable reviews directly in your PRs. [Try Roo's PR Reviewer](https://roocode.com/reviewer?utm_source=docs&utm_medium=banner&utm_campaign=reviewer_promo)\n\n[Skip to main content](https://docs.roocode.com/features/shell-integration#__docusaurus_skipToContent_fallback)\n\n[![Roo Code Logo](https://docs.roocode.com/img/roo-code-logo-dark.png)](https://docs.roocode.com/)\n\n`ctrl`  `K`\n\n[Reddit](https://www.reddit.com/r/RooCode/ \"Reddit\")[Discord](https://discord.gg/roocode \"Discord\")\n\n[20.3k](https://github.com/RooCodeInc/Roo-Code \"GitHub Repository\") [Install ·935.7k](https://marketplace.visualstudio.com/items?itemName=RooVeterinaryInc.roo-cline \"Install VS Code Extension\")\n\n- [Welcome](https://docs.roocode.com/)\n- [Getting Started](https://docs.roocode.com/features/shell-integration#)\n\n- [Tutorial Videos](https://docs.roocode.com/features/shell-integration#)\n\n- [Roo Code Cloud](https://docs.roocode.com/features/shell-integration#)\n\n- Features\n\n  - [API Configuration Profiles](https://docs.roocode.com/features/api-configuration-profiles)\n  - [Auto-Approving Actions](https://docs.roocode.com/features/auto-approving-actions)\n  - [Boomerang Tasks](https://docs.roocode.com/features/boomerang-tasks)\n  - [Browser Use](https://docs.roocode.com/features/browser-use)\n  - [Checkpoints](https://docs.roocode.com/features/checkpoints)\n  - [Code Actions](https://docs.roocode.com/features/code-actions)\n  - [Codebase Indexing](https://docs.roocode.com/features/codebase-indexing)\n  - [Custom Instructions](https://docs.roocode.com/features/custom-instructions)\n  - [Diagnostics Integration](https://docs.roocode.com/features/diagnostics-integration)\n  - [Customizing Modes](https://docs.roocode.com/features/custom-modes)\n  - [Diff/Fast Edits](https://docs.roocode.com/features/fast-edits)\n  - [Enhance Prompt](https://docs.roocode.com/features/enhance-prompt)\n  - [Import/Export/Reset Settings](https://docs.roocode.com/features/settings-management)\n  - [Intelligent Context Condensing](https://docs.roocode.com/features/intelligent-context-condensing)\n  - [Keyboard Navigation](https://docs.roocode.com/features/keyboard-shortcuts)\n  - [Roo Code Marketplace](https://docs.roocode.com/features/marketplace)\n  - [Message Queueing](https://docs.roocode.com/features/message-queueing)\n  - [Model Temperature](https://docs.roocode.com/features/model-temperature)\n  - [Multi-File Reads](https://docs.roocode.com/features/concurrent-file-reads)\n  - [.rooignore](https://docs.roocode.com/features/rooignore)\n  - [Slash Commands](https://docs.roocode.com/features/slash-commands)\n  - [Suggested Responses](https://docs.roocode.com/features/suggested-responses)\n  - [Task Todo List](https://docs.roocode.com/features/task-todo-list)\n  - [Terminal Shell Integration](https://docs.roocode.com/features/shell-integration)\n  - [MCP](https://docs.roocode.com/features/shell-integration#)\n\n  - [Experimental](https://docs.roocode.com/features/shell-integration#)\n\n  - [Additional Features](https://docs.roocode.com/features/more-features)\n- [Advanced Usage](https://docs.roocode.com/features/shell-integration#)\n\n- [Model Providers](https://docs.roocode.com/features/shell-integration#)\n\n- [FAQ](https://docs.roocode.com/features/shell-integration#)\n\n- [Contributing (GitHub)](https://github.com/RooCodeInc/Roo-Code/blob/main/CONTRIBUTING.md)\n- [Roocabulary (GitHub)](https://github.com/cannuri/Roocabulary)\n- [Update Notes](https://docs.roocode.com/features/shell-integration#)\n\n\n- [Home page](https://docs.roocode.com/)\n- Features\n- Terminal Shell Integration\n\nCopy Page\n\nOn this page\n\n# Terminal Shell Integration\n\nTerminal Shell Integration is a key feature that enables Roo Code to execute commands in your terminal and intelligently process their output. This bidirectional communication between the AI and your development environment unlocks powerful automation capabilities.\n\n* * *\n\n## What is Shell Integration? [​](https://docs.roocode.com/features/shell-integration\\#what-is-shell-integration \"Direct link to What is Shell Integration?\")\n\nShell integration is automatically enabled in Roo Code and connects directly to your terminal's command execution lifecycle without requiring any setup from you. This built-in feature allows Roo to:\n\n- Execute commands on your behalf through the [`execute_command`](https://docs.roocode.com/advanced-usage/available-tools/execute-command) tool\n- Read command output in real-time without manual copy-pasting\n- Automatically detect and fix errors in running applications\n- Observe command exit codes to determine success or failure\n- Track working directory changes as you navigate your project\n- React intelligently to terminal output without user intervention\n- Stop running commands directly from the chat interface using the stop button that appears next to the command execution message.\n\n![Stop Command Button in Chat UI](https://docs.roocode.com/img/v3.15/v3.15.png)\n\nWhen you ask Roo to perform tasks like installing dependencies, starting a development server, or analyzing build errors, shell integration works behind the scenes to make these interactions smooth and effective.\n\n* * *\n\n## Troubleshooting Shell Integration [​](https://docs.roocode.com/features/shell-integration\\#troubleshooting-shell-integration \"Direct link to Troubleshooting Shell Integration\")\n\nShell integration is built into Roo Code and works automatically in most cases. If you see \"Shell Integration Unavailable\" messages or experience issues with command execution, try these solutions:\n\n1. **Update VSCode/Cursor** to the latest version (VSCode 1.93+ required)\n2. **Ensure a compatible shell is selected**: Command Palette ( `Ctrl+Shift+P` or `Cmd+Shift+P`) → \"Terminal: Select Default Profile\" → Choose bash, zsh, PowerShell, or fish\n3. **Windows PowerShell users**: Run `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser` then restart VSCode\n4. **WSL users**: Add `. \"$(code --locate-shell-integration-path bash)\"` to your `~/.bashrc`\n\n* * *\n\n## Command Execution Fallback [​](https://docs.roocode.com/features/shell-integration\\#command-execution-fallback \"Direct link to Command Execution Fallback\")\n\nRoo Code has a fallback mechanism for executing commands. This is most relevant if you have chosen to use VS Code's terminal integration (by UNCHECKING the [`Disable terminal shell integration`](https://docs.roocode.com/features/shell-integration#disable-terminal-shell-integration) setting) and that integration then fails.\n\n- **How it works**: If Roo Code is configured to use VS Code's terminal integration but cannot connect or encounters issues, it may automatically attempt to execute the command directly using a background process. This is a fallback to ensure the command still attempts to run.\n- **Notification**: You might see a notification in the chat if this fallback is used, indicating that the command is running without the full features of either Roo's inline terminal or VS Code's shell integration (e.g., real-time output streaming or precise exit code detection might be limited).\n\n![Command execution fallback notification example](https://docs.roocode.com/img/v3.15.0/v3.15.0.png)\n\n- **Resolution**: If you encounter this fallback, it typically indicates an issue with your VS Code shell integration setup. Review the troubleshooting steps in this document or consider using Roo Code's recommended inline terminal by ensuring the [`Disable terminal shell integration`](https://docs.roocode.com/features/shell-integration#disable-terminal-shell-integration) setting is CHECKED.\n\n![Roo Code's recommended inline terminal in action](https://docs.roocode.com/img/shell-integration/shell-integration-12.png)\n\n_Example of Roo Code's recommended inline terminal._\n\n* * *\n\n## Terminal Integration Settings [​](https://docs.roocode.com/features/shell-integration\\#terminal-integration-settings \"Direct link to Terminal Integration Settings\")\n\nRoo Code provides settings to fine-tune how it interacts with terminals. To access these settings:\n\n1. Click the  icon in the top-right corner of the Roo Code sidebar.\n2. In the settings pane that opens, select the \"Terminal\" group from the left-hand menu.\n\n### Basic Settings [​](https://docs.roocode.com/features/shell-integration\\#basic-settings \"Direct link to Basic Settings\")\n\n#### Terminal Output Limit [​](https://docs.roocode.com/features/shell-integration\\#terminal-output-limit \"Direct link to Terminal Output Limit\")\n\n![Terminal output limit slider set to 500](https://docs.roocode.com/img/shell-integration/shell-integration.png)\n\nThis setting controls how much output Roo Code captures from your commands. Consider lowering it if you're concerned about token usage or if Roo seems slow processing very long outputs (you'll still get the beginning and end). Consider increasing it if you frequently need more middle content from long commands directly in Roo's context, but be mindful of potential token costs. Default: 500 lines.\n\n#### Compress progress bar output [​](https://docs.roocode.com/features/shell-integration\\#compress-progress-bar-output \"Direct link to Compress progress bar output\")\n\n![Compress progress bar output checkbox](https://docs.roocode.com/img/shell-integration/shell-integration-10.png)\n\nKeep this enabled (default) for cleaner output and token savings. It makes Roo Code process dynamic output like progress bars or spinners more like a real terminal, showing only the final state. Disable this only in rare cases where you specifically need to debug the intermediate, raw output of a progress bar or similar dynamic display.\n\n### Advanced Settings [​](https://docs.roocode.com/features/shell-integration\\#advanced-settings \"Direct link to Advanced Settings\")\n\nImportant\n\n**Terminal restart required for these settings**\n\nChanges to advanced terminal settings only take effect after restarting your terminals. To restart a terminal:\n\n1. Click the trash icon in the terminal panel to close the current terminal\n2. Open a new terminal with Terminal → New Terminal or `Ctrl` + `` ` `` (backtick)\n\nAlways restart all open terminals after changing any of these settings.\n\n#### Inherit environment variables [​](https://docs.roocode.com/features/shell-integration\\#inherit-environment-variables \"Direct link to Inherit environment variables\")\n\n![Inherit environment variables checkbox](https://docs.roocode.com/img/shell-integration/shell-integration-11.png)\n\nThis setting controls whether Roo Code's terminal sessions use the same environment variables (like `PATH`, API keys, etc.) as your main VSCode/Cursor environment. It directly mirrors the VSCode global setting [`terminal.integrated.inheritEnv`](https://code.visualstudio.com/docs/editor/integrated-terminal#_inherit-environment-variables). Keep this enabled (default for VSCode) if you want Roo commands to operate with the same context and tools available in your regular VSCode terminal. Consider disabling it only if you need a completely clean, isolated environment for Roo's terminal tasks or are troubleshooting complex environment variable conflicts.\n\n### Runtime Environment [​](https://docs.roocode.com/features/shell-integration\\#runtime-environment \"Direct link to Runtime Environment\")\n\nOn macOS (and possibly other operating systems) the environment provided to VSCode, and consequently Roo Code, can differ depending on how VSCode is launched.\n\nIf launched from the command line `vscode` command, VSCode and Roo Code will inherit the environment from the shell that launched it, and all will (usually) be well.\nIf launched from the Finder, Dock, or Spotlight, environment exported from `.zshrc`, or `.zprofile` will likely be missing. If you have environment variables set in one of those files, and find they are missing when running VSCode, move them to .zshenv, and log out and back in again, so the window manager will pick up the new environment settings.\n\n#### Disable terminal shell integration [​](https://docs.roocode.com/features/shell-integration\\#disable-terminal-shell-integration \"Direct link to Disable terminal shell integration\")\n\n![Disable terminal shell integration checkbox](https://docs.roocode.com/img/shell-integration/shell-integration-9.png)\n\nThis setting determines how Roo Code executes terminal commands.\n\n- **Keep this checkbox CHECKED (recommended):** Roo Code will execute commands using its built-in inline terminal, displaying output directly within the chat interface. This method is generally robust, provides clear output, and is the preferred way for most users to interact with terminal commands through Roo Code. It ensures commands run in a consistent environment managed by Roo Code.\n![Roo Code's inline terminal with 'Disable terminal shell integration' CHECKED](https://docs.roocode.com/img/shell-integration/shell-integration-12.png)\n_Roo Code's inline terminal, active when \"Disable terminal shell integration\" is CHECKED._\n\n- **UNCHECK this checkbox (to use VS Code's terminal integration):** Roo Code will attempt to run commands directly within your active VS Code terminal panel. This alternative method might be useful for specific edge cases where you explicitly need commands to run within your fully customized VS Code shell environment or require interaction with the VS Code terminal's specific features for a command. However, this can sometimes be less reliable depending on your shell setup and VS Code version.\n\n\nThe following settings are advanced options that apply **only if you have UNCHECKED 'Disable terminal shell integration'** (choosing to use VS Code's terminal integration instead of Roo Code's recommended inline terminal):\n\n##### Terminal shell integration timeout [​](https://docs.roocode.com/features/shell-integration\\#terminal-shell-integration-timeout \"Direct link to Terminal shell integration timeout\")\n\n![Terminal shell integration timeout slider set to 15s](https://docs.roocode.com/img/shell-integration/shell-integration-1.png)\n\nIf shell integration is enabled but you still see 'Shell Integration Unavailable,' especially with complex shell setups (e.g., Zsh with many plugins, or a slow-loading corporate environment), your shell might be taking too long to initialize. Increase this value to give your shell more time to signal its readiness to Roo Code. Try increments of 5-10 seconds. Default: 15s (as shown in UI).\n\n##### Terminal command delay [​](https://docs.roocode.com/features/shell-integration\\#terminal-command-delay \"Direct link to Terminal command delay\")\n\n![Terminal command delay slider set to 0ms](https://docs.roocode.com/img/shell-integration/shell-integration-2.png)\n\nIf command output appears incomplete or Roo seems to miss the end of a command's output (even with shell integration enabled), a small delay might help. Introduce a small delay (e.g., 50ms or 100ms). This gives the terminal more time to flush all output before Roo Code considers the command complete. This is a workaround for potential timing issues in VSCode's terminal or certain shells (see VSCode bug [#237208](https://github.com/microsoft/vscode/issues/237208)). Default: 0ms.\n\n##### Enable PowerShell counter workaround [​](https://docs.roocode.com/features/shell-integration\\#enable-powershell-counter-workaround \"Direct link to Enable PowerShell counter workaround\")\n\n![Enable PowerShell counter workaround checkbox](https://docs.roocode.com/img/shell-integration/shell-integration-3.png)\n\nSpecific to PowerShell users. Enable this if you find Roo Code struggles to run the _exact same PowerShell command multiple times in a row_, or if output capture from PowerShell commands is unreliable. This adds a unique counter to commands to help PowerShell differentiate them.\n\n##### Clear ZSH EOL mark [​](https://docs.roocode.com/features/shell-integration\\#clear-zsh-eol-mark \"Direct link to Clear ZSH EOL mark\")\n\n![Clear ZSH EOL mark checkbox](https://docs.roocode.com/img/shell-integration/shell-integration-4.png)\n\nSpecific to Zsh users. Zsh sometimes adds a special character (often `%`) at the end of a line if it doesn't end with a newline. Enable this if Roo Code seems to misinterpret or get confused by the output of Zsh commands, particularly if the last line of output appears to include an unexpected character. This attempts to remove that marker ( `PROMPT_EOL_MARK=''`).\n\n##### Enable Oh My Zsh integration [​](https://docs.roocode.com/features/shell-integration\\#enable-oh-my-zsh-integration \"Direct link to Enable Oh My Zsh integration\")\n\n![Enable Oh My Zsh integration checkbox](https://docs.roocode.com/img/shell-integration/shell-integration-5.png)\n\nFor users of the popular Oh My Zsh framework for Zsh. Enable this if you use Oh My Zsh and experience general issues with terminal command execution or output rendering that aren't solved by other settings. This helps Roo Code align with Oh My Zsh's specific shell integration mechanisms by setting `ITERM_SHELL_INTEGRATION_INSTALLED=Yes`. Restarting the IDE might be necessary.\n\n##### Enable Powerlevel10k integration [​](https://docs.roocode.com/features/shell-integration\\#enable-powerlevel10k-integration \"Direct link to Enable Powerlevel10k integration\")\n\n![Enable Powerlevel10k integration checkbox](https://docs.roocode.com/img/shell-integration/shell-integration-6.png)\n\nFor users of the Powerlevel10k theme for Zsh. Enable this if your Powerlevel10k prompt (which can be quite complex) seems to interfere with Roo Code's ability to correctly detect command boundaries, parse output, or track the current working directory. This sets `POWERLEVEL9K_TERM_SHELL_INTEGRATION=true`.\n\n##### Enable ZDOTDIR handling [​](https://docs.roocode.com/features/shell-integration\\#enable-zdotdir-handling \"Direct link to Enable ZDOTDIR handling\")\n\n![Enable ZDOTDIR handling checkbox](https://docs.roocode.com/img/shell-integration/shell-integration-7.png)\n\nAn advanced option for Zsh users with customized Zsh startup file locations. Enable this if you use `ZDOTDIR` to specify a custom directory for your Zsh configuration files (like `.zshrc`). This setting helps Roo Code work correctly with such setups by creating an isolated, temporary `ZDOTDIR` for its own integration scripts, preventing conflicts with your personal Zsh environment.\n\n* * *\n\n## How Shell Integration Works [​](https://docs.roocode.com/features/shell-integration\\#how-shell-integration-works \"Direct link to How Shell Integration Works\")\n\nShell integration connects Roo to your terminal's command execution process in real-time:\n\n1. **Connection**: When you open a terminal, VS Code establishes a special connection with your shell.\n\n2. **Command Tracking**: VS Code monitors your terminal activities by detecting:\n   - When a new prompt appears\n   - When you enter a command\n   - When the command starts running\n   - When the command finishes (and whether it succeeded or failed)\n   - What directory you're currently in\n3. **Different Shells, Same Result**: Each shell type (Bash, Zsh, PowerShell, Fish) implements this slightly differently behind the scenes, but they all provide the same functionality to Roo.\n\n4. **Information Gathering**: Roo can see what commands are running, where they're running, how long they take, whether they succeed, and their complete output - all without you having to copy and paste anything.\n\n\n* * *\n\n## Troubleshooting Shell Integration [​](https://docs.roocode.com/features/shell-integration\\#troubleshooting-shell-integration-1 \"Direct link to Troubleshooting Shell Integration\")\n\n### PowerShell Execution Policy (Windows) [​](https://docs.roocode.com/features/shell-integration\\#powershell-execution-policy-windows \"Direct link to PowerShell Execution Policy (Windows)\")\n\nPowerShell restricts script execution by default. To configure:\n\n1. Open PowerShell as Administrator\n2. Check current policy: `Get-ExecutionPolicy`\n3. Set appropriate policy: `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser`\n\nCommon policies:\n\n- `Restricted`: No scripts allowed (default)\n- `RemoteSigned`: Local scripts can run; downloaded scripts need signing\n- `Unrestricted`: All scripts run with warnings\n- `AllSigned`: All scripts must be signed\n\n### Manual Shell Integration Installation [​](https://docs.roocode.com/features/shell-integration\\#manual-shell-integration-installation \"Direct link to Manual Shell Integration Installation\")\n\nIf automatic integration fails, add the appropriate line to your shell configuration:\n\n**Bash** ( `~/.bashrc`):\n\n```codeBlockLines_e6Vv\n[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path bash)\"\n\n```\n\n**Zsh** ( `~/.zshrc`):\n\n```codeBlockLines_e6Vv\n[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path zsh)\"\n\n```\n\n**PowerShell** ( `$Profile`):\n\n```codeBlockLines_e6Vv\nif ($env:TERM_PROGRAM -eq \"vscode\") { . \"$(code --locate-shell-integration-path pwsh)\" }\n\n```\n\n**Fish** ( `~/.config/fish/config.fish`):\n\n```codeBlockLines_e6Vv\nstring match -q \"$TERM_PROGRAM\" \"vscode\"; and . (code --locate-shell-integration-path fish)\n\n```\n\n### Terminal Customization Issues [​](https://docs.roocode.com/features/shell-integration\\#terminal-customization-issues \"Direct link to Terminal Customization Issues\")\n\nIf you use terminal customization tools:\n\n**Powerlevel10k**:\n\n```codeBlockLines_e6Vv\n# Add before sourcing powerlevel10k in ~/.zshrc\ntypeset -g POWERLEVEL9K_TERM_SHELL_INTEGRATION=true\n\n```\n\n**Alternative**: Enable the Powerlevel10k Integration setting in Roo Code.\n\n### Verifying Shell Integration Status [​](https://docs.roocode.com/features/shell-integration\\#verifying-shell-integration-status \"Direct link to Verifying Shell Integration Status\")\n\nConfirm shell integration is active with these commands:\n\n**Bash**:\n\n```codeBlockLines_e6Vv\nset | grep -i '[16]33;'\necho \"$PROMPT_COMMAND\" | grep vsc\ntrap -p DEBUG | grep vsc\n\n```\n\n**Zsh**:\n\n```codeBlockLines_e6Vv\nfunctions | grep -i vsc\ntypeset -p precmd_functions preexec_functions\n\n```\n\n**PowerShell**:\n\n```codeBlockLines_e6Vv\nGet-Command -Name \"*VSC*\" -CommandType Function\nGet-Content Function:\\Prompt | Select-String \"VSCode\"\n\n```\n\n**Fish**:\n\n```codeBlockLines_e6Vv\nfunctions | grep -i vsc\nfunctions fish_prompt | grep -i vsc\n\n```\n\nVisual indicators of active shell integration:\n\n1. Shell integration indicator in terminal title bar\n2. Command detection highlighting\n3. Working directory updates in terminal title\n4. Command duration and exit code reporting\n\n* * *\n\n## WSL Terminal Integration Methods [​](https://docs.roocode.com/features/shell-integration\\#wsl-terminal-integration-methods \"Direct link to WSL Terminal Integration Methods\")\n\nWhen using Windows Subsystem for Linux (WSL), there are two distinct ways to use VSCode with WSL, each with different implications for shell integration:\n\n### Method 1: VSCode Windows with WSL Terminal [​](https://docs.roocode.com/features/shell-integration\\#method-1-vscode-windows-with-wsl-terminal \"Direct link to Method 1: VSCode Windows with WSL Terminal\")\n\nIn this setup:\n\n- VSCode runs natively in Windows\n- You use the WSL terminal integration feature in VSCode\n- Shell commands are executed through the WSL bridge\n- May experience additional latency due to Windows-WSL communication\n- Shell integration markers may be affected by the WSL-Windows boundary: you must make sure that `source \"$(code --locate-shell-integration-path <shell>)\"` is loaded for your shell within the WSL environment because it may not get automatically loaded; see above.\n\n### Method 2: VSCode Running Within WSL [​](https://docs.roocode.com/features/shell-integration\\#method-2-vscode-running-within-wsl \"Direct link to Method 2: VSCode Running Within WSL\")\n\nIn this setup:\n\n- You launch VSCode directly from within WSL using `code .`\n- VSCode server runs natively in the Linux environment\n- Direct access to Linux filesystem and tools\n- Better performance and reliability for shell integration\n- Shell integration is loaded automatically since VSCode runs natively in the Linux environment\n- Recommended approach for WSL development\n\nFor optimal shell integration with WSL, we recommend:\n\n1. Open your WSL distribution\n2. Navigate to your project directory\n3. Launch VSCode using `code .`\n4. Use the integrated terminal within VSCode\n\n* * *\n\n## Known Issues and Workarounds [​](https://docs.roocode.com/features/shell-integration\\#known-issues-and-workarounds \"Direct link to Known Issues and Workarounds\")\n\n### Cygwin (bash, zsh) [​](https://docs.roocode.com/features/shell-integration\\#cygwin-bash-zsh \"Direct link to Cygwin (bash, zsh)\")\n\nCygwin provides a Unix-like environment on Windows systems. To configure Cygwin as your terminal in VS Code:\n\n1. Install Cygwin from [https://www.cygwin.com/](https://www.cygwin.com/)\n\n2. Open VS Code settings:\n   - Select File > Preferences > Settings\n   - Click the \"Open Settings (JSON)\" icon in the top right corner\n3. Add the following configuration to your `settings.json` (inside the top-level curly braces `{}`):\n\n\n\n\n\n```codeBlockLines_e6Vv\n{\n     \"terminal.integrated.profiles.windows\": {\n       \"Cygwin\": {\n         \"path\": \"C:\\\\cygwin64\\\\bin\\\\bash.exe\",\n         \"args\": [\"--login\"],\n         \"env\": {\"CHERE_INVOKING\": \"1\"}\n       }\n     },\n     \"terminal.integrated.defaultProfile.windows\": \"Cygwin\"\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n> Note: If you have 32-bit Cygwin installed, use `\"C:\\\\cygwin\\\\bin\\\\bash.exe\"` for the path.\n\n4. Understanding the configuration:\n   - `path`: Points to the Bash executable in your Cygwin installation\n   - `args`: The `--login` flag ensures the shell reads profile files\n   - `env`: The `CHERE_INVOKING` environment variable tells Cygwin to use the current directory as the working directory\n   - `terminal.integrated.defaultProfile.windows`: Sets Cygwin as the default terminal profile\n5. To open a new Cygwin terminal:\n   - Press Ctrl+Shift+(backtick) to open a new terminal, or\n   - Press `F1`, type \"Terminal: Create New Terminal (with Profile)\", and select \"Cygwin\"\n\nWhile our testing shows that this works out of the box, if you encounter shell integration issues with Cygwin, ensure you have added the appropriate shell integration hooks to your Cygwin bash profile as described in the \"Manual Shell Integration Installation\" section.\n\n### VS Code Shell Integration for Fish + Cygwin on Windows [​](https://docs.roocode.com/features/shell-integration\\#vs-code-shell-integration-for-fish--cygwin-on-windows \"Direct link to VS Code Shell Integration for Fish + Cygwin on Windows\")\n\nFor fellow Windows users running Fish terminal within a Cygwin environment, here's how VS Code's shell integration works:\n\n1. **(Optional) Locate the Shell Integration Script:**\nOpen your Fish terminal _within VS Code_ and run the following command:\n\n\n\n\n\n```codeBlockLines_e6Vv\ncode --locate-shell-integration-path fish\n\n```\n\n\n\n\n\n\n\n\n\nThis will output the path to the `shellIntegration.fish` script. Note down this path.\n\n2. **Update Your Fish Configuration:**\nEdit your `config.fish` file (usually located at `~/.config/fish/config.fish` within your Cygwin home directory). Add the following line, preferably within an `if status is-interactive` block or at the very end of the file:\n\n\n\n\n\n```codeBlockLines_e6Vv\n# Example config.fish structure\nif status is-interactive\n       # Your other interactive shell configurations...\n       # automatic locate integration script:\n       string match -q \"$TERM_PROGRAM\" \"vscode\"; and . (code --locate-shell-integration-path fish)\n\n       # Or if the above fails for you:\n       # Source the VS Code shell integration script\n       # IMPORTANT: Replace the example path below with the actual path you found in Step 1.\n       # Make sure the path is in a format Cygwin can understand (e.g., using /cygdrive/c/...).\n       # source \"/cygdrive/c/Users/YourUser/.vscode/extensions/..../shellIntegration.fish\"\nend\n\n```\n\n\n\n\n\n\n\n\n\n_Remember to replace the example path with the actual path from Step 1, correctly formatted for Cygwin._\n\n3. **Configure VS Code Terminal Profile:**\nOpen your VS Code `settings.json` file (Ctrl+Shift+P -> \"Preferences: Open User Settings (JSON)\"). Update or add the Fish profile under `terminal.integrated.profiles.windows` like this:\n\n\n\n\n\n```codeBlockLines_e6Vv\n{\n     // ... other settings ...\n\n     \"terminal.integrated.profiles.windows\": {\n       // ... other profiles ...\n\n       // Recommended: Use bash.exe to launch fish as a login shell\n       \"fish\": {\n         \"path\": \"C:\\\\cygwin64\\\\bin\\\\bash.exe\", // Or your Cygwin bash path\n         \"args\": [\\\n           \"--login\", // Ensures login scripts run (important for Cygwin environment)\\\n           \"-i\",      // Ensures bash runs interactively\\\n           \"-c\",\\\n           \"exec fish\" // Replace bash process with fish\\\n         ],\n         \"icon\": \"terminal-bash\" // Optional: Use a recognizable icon\n       }\n       // Alternative (if the above fails): Launch fish directly\n       \"fish-direct\": {\n         \"path\": \"C:\\\\cygwin64\\\\bin\\\\fish.exe\", // Ensure this is in your Windows PATH or provide full path\n         // Use 'options' here instead of 'args'; otherwise, you might encounter the error \"terminal process terminated exit code 1\".\n         \"options\": [\"-l\", \"-c\"], // Example: login and interactive flags.\n         \"icon\": \"terminal-fish\" // Optional: Use a fish icon\n       }\n     },\n\n     // Optional: Set fish as your default if desired\n\n```\n\n\n* * *\n\n## Known Issues and Workarounds [​](https://docs.roocode.com/features/shell-integration\\#known-issues-and-workarounds-1 \"Direct link to Known Issues and Workarounds\")\n\n// \"terminal.integrated.defaultProfile.windows\": \"fish\", // or \"fish-direct\" depending what you use.\n\n// ... other settings ...\n}\n\n````codeBlockLines_e6Vv\n*Note: Using `bash.exe --login -i -c \"exec fish\"` is often more reliable in Cygwin environments for ensuring the correct environment setup before `fish` starts. However, if that approach doesn't work, try the `fish-direct` profile configuration.*\n\n4.  **Restart VS Code:**\nClose and reopen Visual Studio Code completely to apply the changes.\n\n5.  **Verify:**\nOpen a new Fish terminal in VS Code. The shell integration features (like command decorations, better command history navigation, etc.) should now be active. You can test basic functionality by running simple commands like `echo \"Hello from integrated Fish!\"`. <img src=\"/img/shell-integration/shell-integration-8.png\" alt=\"Fish Cygwin Integration Example\" width=\"600\" />\n\nThis setup works reliably on Windows systems using Cygwin, Fish, and the Starship prompt, and should assist users with similar configurations.\n\n### Shell Integration Failures After VSCode 1.98\n\n**Issue**: After VSCode updates beyond version 1.98, shell integration may fail with the error \"VSCE output start escape sequence (]633;C or ]133;C) not received\".\n\n**Solutions**:\n1. **Set Terminal Command Delay**:\n- Set the Terminal Command Delay to 50ms in Roo Code settings\n- Restart all terminals after changing this setting\n- This matches older default behavior and may resolve the issue, however some users have reported that a value of 0ms works better. This is a workaround for upstream VSCode problems.\n\n2. **Roll Back VSCode Version**:\n- Download VSCode v1.98 from [VSCode Updates](https://code.visualstudio.com/updates/v1_98)\n- Replace your current VSCode installation\n- No backup of Roo settings needed\n\n3. **WSL-Specific Workaround**:\n- If using WSL, ensure you launch VSCode from within WSL using `code .`\n\n4. **ZSH Users**:\n- Try enabling some or all ZSH-related workarounds in Roo settings\n- These settings can help regardless of your operating system\n\n### Ctrl+C Behavior\n\n**Issue**: If text is already typed in the terminal when Roo tries to run a command, Roo will press Ctrl+C first to clear the line, which can interrupt running processes.\n\n**Workaround**: Make sure your terminal prompt is empty (no partial commands typed) before asking Roo to execute terminal commands.\n\n### Multi-line Command Issues\n\n**Issue**: Commands that span multiple lines can confuse Roo and may show output from previous commands mixed in with current output.\n\n**Workaround**: Instead of multi-line commands, use command chaining with `&amp;&amp;` to keep everything on one line (e.g., `echo a &amp;&amp; echo b` instead of typing each command on a separate line).\n\n### PowerShell-Specific Issues\n\n1. **Premature Completion**: PowerShell sometimes tells Roo a command is finished before all the output has been shown.\n2. **Repeated Commands**: PowerShell may refuse to run the same command twice in a row.\n\n**Workaround**: Enable the \"PowerShell counter workaround\" setting and set a terminal command delay of 150ms in the settings to give commands more time to complete.\n\n### Incomplete Terminal Output\n\n**Issue**: Sometimes VS Code doesn't show or capture all the output from a command.\n\n**Workaround**: If you notice missing output, try closing and reopening the terminal tab, then run the command again. This refreshes the terminal connection.\n\n### Python Virtual Environment (venv) Issues\n\n**Issue**: Disabling shell integration will disable venv; venv is VSCode-managed, Roo does not know anything about it because disabling shell integration uses a completely different mechanism for running commands (execa).\n\n**Workaround**: If you need to use Python virtual environments with Roo Code, you might be able to:\n\n```bash\nkillall code # closes all vscode windows!\n. venv/bin/activate\ncode\n\n````\n\nThis way the environment is configured before code launches so Roo should inherit it.\n\n* * *\n\n## Troubleshooting Resources [​](https://docs.roocode.com/features/shell-integration\\#troubleshooting-resources \"Direct link to Troubleshooting Resources\")\n\n### Checking Debug Logs [​](https://docs.roocode.com/features/shell-integration\\#checking-debug-logs \"Direct link to Checking Debug Logs\")\n\nWhen shell integration issues occur, check the debug logs:\n\n1. Open Help → Toggle Developer Tools → Console\n2. Set \"Show All Levels\" to see all log messages\n3. Look for messages containing `[Terminal Process]`\n4. Check `preOutput` content in error messages:\n   - Empty preOutput ( `''`) means VSCode sent no data\n   - This indicates a potential VSCode shell integration issue, or an upstream bug that is out of our control\n   - The absence of shell integration markers may require adjusting settings to work around possible upstream bugs or local workstation configuration issues related to shell initialization and VSCode's loading of special shell integration hooks\n\n### Using the VSCode Terminal Integration Test Extension [​](https://docs.roocode.com/features/shell-integration\\#using-the-vscode-terminal-integration-test-extension \"Direct link to Using the VSCode Terminal Integration Test Extension\")\n\nThe [VSCode Terminal Integration Test Extension](https://github.com/KJ7LNW/vsce-test-terminal-integration) helps diagnose shell integration issues by testing different settings combinations:\n\n1. **When Commands Stall**:\n   - If you see \"command already running\" warnings, click \"Reset Stats\" to reset the terminal state\n   - These warnings indicate shell integration is not working\n   - Try different settings combinations until you find one that works\n   - If it really gets stuck, restart the extension by closing the window and pressing F5\n2. **Testing Settings**:\n   - Systematically try different combinations of:\n     - Terminal Command Delay\n     - Shell Integration settings\n   - Document which combinations succeed or fail\n   - This helps identify patterns in shell integration issues\n3. **Reporting Issues**:\n   - Once you find a problematic configuration\n   - Document the exact settings combination\n   - Note your environment (OS, VSCode version, shell, and any shell prompt customization)\n   - Open an issue with these details to help improve shell integration\n\n### Additional Resources [​](https://docs.roocode.com/features/shell-integration\\#additional-resources \"Direct link to Additional Resources\")\n\n- [VSCode Terminal Output Issue #237208](https://github.com/microsoft/vscode/issues/237208)\n- [VSCode Terminal Integration Test Repository](https://github.com/KJ7LNW/vsce-test-terminal-integration)\n- [Roo Code Shell Integration Architecture PR](https://github.com/RooCodeInc/Roo-Code/pull/1365)\n\n* * *\n\n## Support [​](https://docs.roocode.com/features/shell-integration\\#support \"Direct link to Support\")\n\nIf you're still having issues:\n\n1. Check [Roo Code GitHub Issues](https://github.com/RooCodeInc/Roo-Code/issues)\n2. Create a new issue with:\n   - OS and VSCode version\n   - Shell type\n   - Steps to reproduce\n   - Error messages\n\nFor additional help, join our [Discord](https://discord.gg/roocode).\n\n[Edit this page](https://github.com/RooCodeInc/Roo-Code-Docs/edit/main/docs/features/shell-integration.md)\n\nLast updated on **Oct 3, 2025**\n\n[Previous\\\\\n\\\\\nTask Todo List](https://docs.roocode.com/features/task-todo-list) [Next\\\\\n\\\\\nMCP Overview](https://docs.roocode.com/features/mcp/overview)\n\n- [What is Shell Integration?](https://docs.roocode.com/features/shell-integration#what-is-shell-integration)\n- [Troubleshooting Shell Integration](https://docs.roocode.com/features/shell-integration#troubleshooting-shell-integration)\n- [Command Execution Fallback](https://docs.roocode.com/features/shell-integration#command-execution-fallback)\n- [Terminal Integration Settings](https://docs.roocode.com/features/shell-integration#terminal-integration-settings)\n  - [Basic Settings](https://docs.roocode.com/features/shell-integration#basic-settings)\n  - [Advanced Settings](https://docs.roocode.com/features/shell-integration#advanced-settings)\n  - [Runtime Environment](https://docs.roocode.com/features/shell-integration#runtime-environment)\n- [How Shell Integration Works](https://docs.roocode.com/features/shell-integration#how-shell-integration-works)\n- [Troubleshooting Shell Integration](https://docs.roocode.com/features/shell-integration#troubleshooting-shell-integration-1)\n  - [PowerShell Execution Policy (Windows)](https://docs.roocode.com/features/shell-integration#powershell-execution-policy-windows)\n  - [Manual Shell Integration Installation](https://docs.roocode.com/features/shell-integration#manual-shell-integration-installation)\n  - [Terminal Customization Issues](https://docs.roocode.com/features/shell-integration#terminal-customization-issues)\n  - [Verifying Shell Integration Status](https://docs.roocode.com/features/shell-integration#verifying-shell-integration-status)\n- [WSL Terminal Integration Methods](https://docs.roocode.com/features/shell-integration#wsl-terminal-integration-methods)\n  - [Method 1: VSCode Windows with WSL Terminal](https://docs.roocode.com/features/shell-integration#method-1-vscode-windows-with-wsl-terminal)\n  - [Method 2: VSCode Running Within WSL](https://docs.roocode.com/features/shell-integration#method-2-vscode-running-within-wsl)\n- [Known Issues and Workarounds](https://docs.roocode.com/features/shell-integration#known-issues-and-workarounds)\n  - [Cygwin (bash, zsh)](https://docs.roocode.com/features/shell-integration#cygwin-bash-zsh)\n  - [VS Code Shell Integration for Fish + Cygwin on Windows](https://docs.roocode.com/features/shell-integration#vs-code-shell-integration-for-fish--cygwin-on-windows)\n- [Known Issues and Workarounds](https://docs.roocode.com/features/shell-integration#known-issues-and-workarounds-1)\n- [Troubleshooting Resources](https://docs.roocode.com/features/shell-integration#troubleshooting-resources)\n  - [Checking Debug Logs](https://docs.roocode.com/features/shell-integration#checking-debug-logs)\n  - [Using the VSCode Terminal Integration Test Extension](https://docs.roocode.com/features/shell-integration#using-the-vscode-terminal-integration-test-extension)\n  - [Additional Resources](https://docs.roocode.com/features/shell-integration#additional-resources)\n- [Support](https://docs.roocode.com/features/shell-integration#support)\n\n![Roo Code Logo](https://docs.roocode.com/img/roo-code-logo-dark.png)\n\nEmpowering developers to build better software faster with AI-powered tools and insights.\n\n[GitHub](https://github.com/RooCodeInc/Roo-Code)[Discord](https://discord.gg/roocode)[Reddit](https://www.reddit.com/r/RooCode/)[X (Twitter)](https://x.com/roo_code)[LinkedIn](https://www.linkedin.com/company/roo-code)[TikTok](https://www.tiktok.com/@roo.code)[Bluesky](https://bsky.app/profile/roocode.bsky.social)\n\nGitHub\n\n- [Issues](https://github.com/RooCodeInc/Roo-Code/issues)\n- [Feature Requests](https://github.com/RooCodeInc/Roo-Code/discussions/categories/feature-requests?discussions_q=is%3Aopen+category%3A%22Feature+Requests%22+sort%3Atop)\n\nDownload\n\n- [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=RooVeterinaryInc.roo-cline)\n- [Open VSX Registry](https://open-vsx.org/extension/RooVeterinaryInc/roo-cline)\n\nCompany\n\n- [Contact](mailto:support@roocode.com)\n- [Careers](https://careers.roocode.com/)\n- [Website Privacy Policy](https://roocode.com/privacy)\n- [Extension Privacy Policy](https://github.com/RooCodeInc/Roo-Code/blob/main/PRIVACY.md)\n\nLike most of the internet, we use cookies. Are you OK with that?\n\nDeclineAccept",
  "metadata": {
    "og:description": "Learn how Roo Code integrates with your shell to execute commands. Troubleshooting guide for terminal issues and shell configuration.",
    "keywords": "shell integration,terminal commands,command execution,shell configuration,troubleshooting",
    "og:locale": "en_US",
    "language": "en",
    "og:url": "https://docs.roocode.com/features/shell-integration",
    "twitter:creator": "@roo_code",
    "twitter:site": "@roo_code",
    "docsearch:docusaurus_tag": "docs-default-current",
    "og:image": "https://docs.roocode.com/img/social-share.jpg",
    "ogUrl": "https://docs.roocode.com/features/shell-integration",
    "docusaurus_tag": "docs-default-current",
    "og:title": "Terminal Shell Integration | Roo Code Documentation",
    "ogLocale": "en_US",
    "ogTitle": "Terminal Shell Integration | Roo Code Documentation",
    "description": "Learn how Roo Code integrates with your shell to execute commands. Troubleshooting guide for terminal issues and shell configuration.",
    "docsearch:language": "en",
    "ogImage": "https://docs.roocode.com/img/social-share.jpg",
    "twitter:card": "summary_large_image",
    "twitter:image": "https://docs.roocode.com/img/social-share.jpg",
    "title": "Terminal Shell Integration | Roo Code Documentation",
    "ogDescription": "Learn how Roo Code integrates with your shell to execute commands. Troubleshooting guide for terminal issues and shell configuration.",
    "docusaurus_locale": "en",
    "favicon": "https://docs.roocode.com/img/favicon.ico",
    "docusaurus_version": "current",
    "docsearch:version": "current",
    "viewport": "width=device-width, initial-scale=1.0",
    "generator": "Docusaurus v3.9.2",
    "og:type": "website",
    "scrapeId": "450b3cef-e18b-4993-ae16-176517e8b65d",
    "sourceURL": "https://docs.roocode.com/features/shell-integration",
    "url": "https://docs.roocode.com/features/shell-integration",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic",
    "cacheState": "miss",
    "indexId": "45a46a1a-1951-4799-93c1-2b774c04ac9f",
    "creditsUsed": 1
  }
}